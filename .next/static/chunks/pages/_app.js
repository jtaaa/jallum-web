/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/_app"],{

/***/ "./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/memoize */ \"./node_modules/@emotion/memoize/dist/memoize.browser.esm.js\");\n\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\n\nvar index = (0,_emotion_memoize__WEBPACK_IMPORTED_MODULE_0__.default)(function (prop) {\n  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111\n  /* o */\n  && prop.charCodeAt(1) === 110\n  /* n */\n  && prop.charCodeAt(2) < 91;\n}\n/* Z+1 */\n);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzP2Y2ZTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBdUM7O0FBRXZDLGs3SEFBazdIOztBQUVsN0gsWUFBWSx5REFBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtEQUFlLEtBQUssRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvaXMtcHJvcC12YWxpZC5icm93c2VyLmVzbS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0eXBlfHVzZU1hcHx2YWx1ZXx3aWR0aHx3bW9kZXx3cmFwfGFib3V0fGRhdGF0eXBlfGlubGlzdHxwcmVmaXh8cHJvcGVydHl8cmVzb3VyY2V8dHlwZW9mfHZvY2FifGF1dG9DYXBpdGFsaXplfGF1dG9Db3JyZWN0fGF1dG9TYXZlfGNvbG9yfGluZXJ0fGl0ZW1Qcm9wfGl0ZW1TY29wZXxpdGVtVHlwZXxpdGVtSUR8aXRlbVJlZnxvbnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpbmRleCA9IG1lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js\n");

/***/ }),

/***/ "./node_modules/@emotion/memoize/dist/memoize.browser.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@emotion/memoize/dist/memoize.browser.esm.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction memoize(fn) {\n  var cache = {};\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (memoize);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9tZW1vaXplLmJyb3dzZXIuZXNtLmpzP2UyYTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtEQUFlLE9BQU8sRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvbWVtb2l6ZS5icm93c2VyLmVzbS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@emotion/memoize/dist/memoize.browser.esm.js\n");

/***/ }),

/***/ "./node_modules/@emotion/stylis/dist/stylis.browser.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@emotion/stylis/dist/stylis.browser.esm.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction stylis_min (W) {\n  function M(d, c, e, h, a) {\n    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {\n      g = e.charCodeAt(l);\n      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);\n\n      if (0 === b + n + v + m) {\n        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {\n          switch (g) {\n            case 32:\n            case 9:\n            case 59:\n            case 13:\n            case 10:\n              break;\n\n            default:\n              f += e.charAt(l);\n          }\n\n          g = 59;\n        }\n\n        switch (g) {\n          case 123:\n            f = f.trim();\n            q = f.charCodeAt(0);\n            k = 1;\n\n            for (t = ++l; l < B;) {\n              switch (g = e.charCodeAt(l)) {\n                case 123:\n                  k++;\n                  break;\n\n                case 125:\n                  k--;\n                  break;\n\n                case 47:\n                  switch (g = e.charCodeAt(l + 1)) {\n                    case 42:\n                    case 47:\n                      a: {\n                        for (u = l + 1; u < J; ++u) {\n                          switch (e.charCodeAt(u)) {\n                            case 47:\n                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                              break;\n\n                            case 10:\n                              if (47 === g) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                          }\n                        }\n\n                        l = u;\n                      }\n\n                  }\n\n                  break;\n\n                case 91:\n                  g++;\n\n                case 40:\n                  g++;\n\n                case 34:\n                case 39:\n                  for (; l++ < J && e.charCodeAt(l) !== g;) {\n                  }\n\n              }\n\n              if (0 === k) break;\n              l++;\n            }\n\n            k = e.substring(t, l);\n            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));\n\n            switch (q) {\n              case 64:\n                0 < r && (f = f.replace(N, ''));\n                g = f.charCodeAt(1);\n\n                switch (g) {\n                  case 100:\n                  case 109:\n                  case 115:\n                  case 45:\n                    r = c;\n                    break;\n\n                  default:\n                    r = O;\n                }\n\n                k = M(c, r, k, g, a + 1);\n                t = k.length;\n                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));\n                if (0 < t) switch (g) {\n                  case 115:\n                    f = f.replace(da, ea);\n\n                  case 100:\n                  case 109:\n                  case 45:\n                    k = f + '{' + k + '}';\n                    break;\n\n                  case 107:\n                    f = f.replace(fa, '$1 $2');\n                    k = f + '{' + k + '}';\n                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;\n                    break;\n\n                  default:\n                    k = f + k, 112 === h && (k = (p += k, ''));\n                } else k = '';\n                break;\n\n              default:\n                k = M(c, X(c, f, I), k, h, a + 1);\n            }\n\n            F += k;\n            k = I = r = u = q = 0;\n            f = '';\n            g = e.charCodeAt(++l);\n            break;\n\n          case 125:\n          case 59:\n            f = (0 < r ? f.replace(N, '') : f).trim();\n            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\\x00\\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {\n              case 0:\n                break;\n\n              case 64:\n                if (105 === g || 99 === g) {\n                  G += f + e.charAt(l);\n                  break;\n                }\n\n              default:\n                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));\n            }\n            I = r = u = q = 0;\n            f = '';\n            g = e.charCodeAt(++l);\n        }\n      }\n\n      switch (g) {\n        case 13:\n        case 10:\n          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\\x00');\n          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);\n          z = 1;\n          D++;\n          break;\n\n        case 59:\n        case 125:\n          if (0 === b + n + v + m) {\n            z++;\n            break;\n          }\n\n        default:\n          z++;\n          y = e.charAt(l);\n\n          switch (g) {\n            case 9:\n            case 32:\n              if (0 === n + m + b) switch (x) {\n                case 44:\n                case 58:\n                case 9:\n                case 32:\n                  y = '';\n                  break;\n\n                default:\n                  32 !== g && (y = ' ');\n              }\n              break;\n\n            case 0:\n              y = '\\\\0';\n              break;\n\n            case 12:\n              y = '\\\\f';\n              break;\n\n            case 11:\n              y = '\\\\v';\n              break;\n\n            case 38:\n              0 === n + b + m && (r = I = 1, y = '\\f' + y);\n              break;\n\n            case 108:\n              if (0 === n + b + m + E && 0 < u) switch (l - u) {\n                case 2:\n                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);\n\n                case 8:\n                  111 === K && (E = K);\n              }\n              break;\n\n            case 58:\n              0 === n + b + m && (u = l);\n              break;\n\n            case 44:\n              0 === b + v + n + m && (r = 1, y += '\\r');\n              break;\n\n            case 34:\n            case 39:\n              0 === b && (n = n === g ? 0 : 0 === n ? g : n);\n              break;\n\n            case 91:\n              0 === n + b + v && m++;\n              break;\n\n            case 93:\n              0 === n + b + v && m--;\n              break;\n\n            case 41:\n              0 === n + b + m && v--;\n              break;\n\n            case 40:\n              if (0 === n + b + m) {\n                if (0 === q) switch (2 * x + 3 * K) {\n                  case 533:\n                    break;\n\n                  default:\n                    q = 1;\n                }\n                v++;\n              }\n\n              break;\n\n            case 64:\n              0 === b + v + n + m + u + k && (k = 1);\n              break;\n\n            case 42:\n            case 47:\n              if (!(0 < n + m + v)) switch (b) {\n                case 0:\n                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {\n                    case 235:\n                      b = 47;\n                      break;\n\n                    case 220:\n                      t = l, b = 42;\n                  }\n\n                  break;\n\n                case 42:\n                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);\n              }\n          }\n\n          0 === b && (f += y);\n      }\n\n      K = x;\n      x = g;\n      l++;\n    }\n\n    t = p.length;\n\n    if (0 < t) {\n      r = c;\n      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;\n      p = r.join(',') + '{' + p + '}';\n\n      if (0 !== w * E) {\n        2 !== w || L(p, 2) || (E = 0);\n\n        switch (E) {\n          case 111:\n            p = p.replace(ha, ':-moz-$1') + p;\n            break;\n\n          case 112:\n            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;\n        }\n\n        E = 0;\n      }\n    }\n\n    return G + p + F;\n  }\n\n  function X(d, c, e) {\n    var h = c.trim().split(ia);\n    c = h;\n    var a = h.length,\n        m = d.length;\n\n    switch (m) {\n      case 0:\n      case 1:\n        var b = 0;\n\n        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {\n          c[b] = Z(d, c[b], e).trim();\n        }\n\n        break;\n\n      default:\n        var v = b = 0;\n\n        for (c = []; b < a; ++b) {\n          for (var n = 0; n < m; ++n) {\n            c[v++] = Z(d[n] + ' ', h[b], e).trim();\n          }\n        }\n\n    }\n\n    return c;\n  }\n\n  function Z(d, c, e) {\n    var h = c.charCodeAt(0);\n    33 > h && (h = (c = c.trim()).charCodeAt(0));\n\n    switch (h) {\n      case 38:\n        return c.replace(F, '$1' + d.trim());\n\n      case 58:\n        return d.trim() + c.replace(F, '$1' + d.trim());\n\n      default:\n        if (0 < 1 * e && 0 < c.indexOf('\\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());\n    }\n\n    return d + c;\n  }\n\n  function P(d, c, e, h) {\n    var a = d + ';',\n        m = 2 * c + 3 * e + 4 * h;\n\n    if (944 === m) {\n      d = a.indexOf(':', 9) + 1;\n      var b = a.substring(d, a.length - 1).trim();\n      b = a.substring(0, d).trim() + b + ';';\n      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;\n    }\n\n    if (0 === w || 2 === w && !L(a, 1)) return a;\n\n    switch (m) {\n      case 1015:\n        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;\n\n      case 951:\n        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;\n\n      case 963:\n        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;\n\n      case 1009:\n        if (100 !== a.charCodeAt(4)) break;\n\n      case 969:\n      case 942:\n        return '-webkit-' + a + a;\n\n      case 978:\n        return '-webkit-' + a + '-moz-' + a + a;\n\n      case 1019:\n      case 983:\n        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;\n\n      case 883:\n        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;\n        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;\n        break;\n\n      case 932:\n        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {\n          case 103:\n            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;\n\n          case 115:\n            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;\n\n          case 98:\n            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;\n        }\n        return '-webkit-' + a + '-ms-' + a + a;\n\n      case 964:\n        return '-webkit-' + a + '-ms-flex-' + a + a;\n\n      case 1023:\n        if (99 !== a.charCodeAt(8)) break;\n        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');\n        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;\n\n      case 1005:\n        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;\n\n      case 1e3:\n        b = a.substring(13).trim();\n        c = b.indexOf('-') + 1;\n\n        switch (b.charCodeAt(0) + b.charCodeAt(c)) {\n          case 226:\n            b = a.replace(G, 'tb');\n            break;\n\n          case 232:\n            b = a.replace(G, 'tb-rl');\n            break;\n\n          case 220:\n            b = a.replace(G, 'lr');\n            break;\n\n          default:\n            return a;\n        }\n\n        return '-webkit-' + a + '-ms-' + b + a;\n\n      case 1017:\n        if (-1 === a.indexOf('sticky', 9)) break;\n\n      case 975:\n        c = (a = d).length - 10;\n        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();\n\n        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {\n          case 203:\n            if (111 > b.charCodeAt(8)) break;\n\n          case 115:\n            a = a.replace(b, '-webkit-' + b) + ';' + a;\n            break;\n\n          case 207:\n          case 102:\n            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;\n        }\n\n        return a + ';';\n\n      case 938:\n        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {\n          case 105:\n            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;\n\n          case 115:\n            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;\n\n          default:\n            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;\n        }\n        break;\n\n      case 973:\n      case 989:\n        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;\n\n      case 931:\n      case 953:\n        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;\n        break;\n\n      case 962:\n        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;\n    }\n\n    return a;\n  }\n\n  function L(d, c) {\n    var e = d.indexOf(1 === c ? ':' : '{'),\n        h = d.substring(0, 3 !== c ? e : 10);\n    e = d.substring(e + 1, d.length - 1);\n    return R(2 !== c ? h : h.replace(na, '$1'), e, c);\n  }\n\n  function ea(d, c) {\n    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));\n    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';\n  }\n\n  function H(d, c, e, h, a, m, b, v, n, q) {\n    for (var g = 0, x = c, w; g < A; ++g) {\n      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {\n        case void 0:\n        case !1:\n        case !0:\n        case null:\n          break;\n\n        default:\n          x = w;\n      }\n    }\n\n    if (x !== c) return x;\n  }\n\n  function T(d) {\n    switch (d) {\n      case void 0:\n      case null:\n        A = S.length = 0;\n        break;\n\n      default:\n        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {\n          T(d[c]);\n        } else Y = !!d | 0;\n    }\n\n    return T;\n  }\n\n  function U(d) {\n    d = d.prefix;\n    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);\n    return U;\n  }\n\n  function B(d, c) {\n    var e = d;\n    33 > e.charCodeAt(0) && (e = e.trim());\n    V = e;\n    e = [V];\n\n    if (0 < A) {\n      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);\n      void 0 !== h && 'string' === typeof h && (c = h);\n    }\n\n    var a = M(O, e, c, 0, 0);\n    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));\n    V = '';\n    E = 0;\n    z = D = 1;\n    return a;\n  }\n\n  var ca = /^\\0+/g,\n      N = /[\\0\\r\\f]/g,\n      aa = /: */g,\n      ka = /zoo|gra/,\n      ma = /([,: ])(transform)/g,\n      ia = /,\\r+?/g,\n      F = /([\\t\\r\\n ])*\\f?&/g,\n      fa = /@(k\\w+)\\s*(\\S*)\\s*/,\n      Q = /::(place)/g,\n      ha = /:(read-only)/g,\n      G = /[svh]\\w+-[tblr]{2}/,\n      da = /\\(\\s*(.*)\\s*\\)/g,\n      oa = /([\\s\\S]*?);/g,\n      ba = /-self|flex-/g,\n      na = /[^]*?(:[rp][el]a[\\w-]+)[^]*/,\n      la = /stretch|:\\s*\\w+\\-(?:conte|avail)/,\n      ja = /([^-])(image-set\\()/,\n      z = 1,\n      D = 1,\n      E = 0,\n      w = 1,\n      O = [],\n      S = [],\n      A = 0,\n      R = null,\n      Y = 0,\n      V = '';\n  B.use = T;\n  B.set = U;\n  void 0 !== W && U(W);\n  return B;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (stylis_min);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@emotion/stylis/dist/stylis.browser.esm.js\n");

/***/ }),

/***/ "./node_modules/@emotion/unitless/dist/unitless.browser.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@emotion/unitless/dist/unitless.browser.esm.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar unitlessKeys = {\n  animationIterationCount: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  msGridRow: 1,\n  msGridRowSpan: 1,\n  msGridColumn: 1,\n  msGridColumnSpan: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (unitlessKeys);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5lc20uanM/MzA0ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtEQUFlLFlBQVksRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L3VuaXRsZXNzLmJyb3dzZXIuZXNtLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBtc0dyaWRSb3c6IDEsXG4gIG1zR3JpZFJvd1NwYW46IDEsXG4gIG1zR3JpZENvbHVtbjogMSxcbiAgbXNHcmlkQ29sdW1uU3BhbjogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXRsZXNzS2V5cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@emotion/unitless/dist/unitless.browser.esm.js\n");

/***/ }),

/***/ "./pages/_app.tsx":
/*!************************!*\
  !*** ./pages/_app.tsx ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Users_jallum_Repos_jallum_web_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _Users_jallum_Repos_jallum_web_node_modules_next_node_modules_babel_runtime_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral */ \"./node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! styled-components */ \"./node_modules/styled-components/dist/styled-components.browser.esm.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/constants */ \"./utils/constants.ts\");\n/* harmony import */ var posthog_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! posthog-js */ \"./node_modules/posthog-js/dist/es.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n\n\n\nvar _jsxFileName = \"/Users/jallum/Repos/jallum-web/pages/_app.tsx\",\n    _this = undefined;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_Users_jallum_Repos_jallum_web_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = (0,_Users_jallum_Repos_jallum_web_node_modules_next_node_modules_babel_runtime_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_2__.default)([\"\\n  body {\\n    margin: 0;\\n    padding: 0;\\n    box-sizing: border-box;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n\n\nvar theme = {\n  colors: {\n    active: \"#222\",\n    primary: \"#444\",\n    text: \"#444\",\n    fall: \"#CA4130\",\n    winter: \"#ACD7C6\",\n    spring: \"#6B862E\",\n    link: \"#444\"\n  }\n};\nvar GlobalStyle = (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.createGlobalStyle)(_templateObject());\n_c = GlobalStyle;\n\n\nvar MyApp = function MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  if (!_utils_constants__WEBPACK_IMPORTED_MODULE_3__.IS_SERVER) {\n    posthog_js__WEBPACK_IMPORTED_MODULE_5__.default.init(\"phc_EwdTbkSTE1hfRXTRTlt77vGUjsjmDn42Uf3orzEWHF7\", {\n      api_host: \"https://app.posthog.com\"\n    });\n  }\n\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(styled_components__WEBPACK_IMPORTED_MODULE_4__.ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(GlobalStyle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_c2 = MyApp;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MyApp);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GlobalStyle\");\n$RefreshReg$(_c2, \"MyApp\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvX2FwcC50c3g/NzIxNiJdLCJuYW1lcyI6WyJ0aGVtZSIsImNvbG9ycyIsImFjdGl2ZSIsInByaW1hcnkiLCJ0ZXh0IiwiZmFsbCIsIndpbnRlciIsInNwcmluZyIsImxpbmsiLCJHbG9iYWxTdHlsZSIsImNyZWF0ZUdsb2JhbFN0eWxlIiwiTXlBcHAiLCJDb21wb25lbnQiLCJwYWdlUHJvcHMiLCJJU19TRVJWRVIiLCJwb3N0aG9nIiwiYXBpX2hvc3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBRUEsSUFBTUEsS0FBSyxHQUFHO0FBQ1pDLFFBQU0sRUFBRTtBQUNOQyxVQUFNLEVBQUUsTUFERjtBQUVOQyxXQUFPLEVBQUUsTUFGSDtBQUdOQyxRQUFJLEVBQUUsTUFIQTtBQUlOQyxRQUFJLEVBQUUsU0FKQTtBQUtOQyxVQUFNLEVBQUUsU0FMRjtBQU1OQyxVQUFNLEVBQUUsU0FORjtBQU9OQyxRQUFJLEVBQUU7QUFQQTtBQURJLENBQWQ7QUFjQSxJQUFNQyxXQUFXLEdBQUdDLG9FQUFILG1CQUFqQjtLQUFNRCxXO0FBUU47O0FBRUEsSUFBTUUsS0FBSyxHQUFHLFNBQVJBLEtBQVEsT0FBd0M7QUFBQSxNQUFyQ0MsU0FBcUMsUUFBckNBLFNBQXFDO0FBQUEsTUFBMUJDLFNBQTBCLFFBQTFCQSxTQUEwQjs7QUFDcEQsTUFBSSxDQUFDQyx1REFBTCxFQUFnQjtBQUNkQyx3REFBQSxDQUFhLGlEQUFiLEVBQWdFO0FBQzlEQyxjQUFRLEVBQUU7QUFEb0QsS0FBaEU7QUFHRDs7QUFDRCxzQkFDRTtBQUFBLDJCQUNFLDhEQUFDLDREQUFEO0FBQWUsV0FBSyxFQUFFaEIsS0FBdEI7QUFBQSw4QkFDRSw4REFBQyxXQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsZUFERixlQUVFLDhEQUFDLFNBQUQsb0JBQWVhLFNBQWY7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQUZGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURGLG1CQURGO0FBUUQsQ0FkRDs7TUFBTUYsSztBQWdCTiwrREFBZUEsS0FBZiIsImZpbGUiOiIuL3BhZ2VzL19hcHAudHN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUHJvcHMgfSBmcm9tIFwibmV4dC9hcHBcIlxuaW1wb3J0IHsgY3JlYXRlR2xvYmFsU3R5bGUsIFRoZW1lUHJvdmlkZXIgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIlxuaW1wb3J0IHsgSVNfU0VSVkVSIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50c1wiXG5cbmNvbnN0IHRoZW1lID0ge1xuICBjb2xvcnM6IHtcbiAgICBhY3RpdmU6IFwiIzIyMlwiLFxuICAgIHByaW1hcnk6IFwiIzQ0NFwiLFxuICAgIHRleHQ6IFwiIzQ0NFwiLFxuICAgIGZhbGw6IFwiI0NBNDEzMFwiLFxuICAgIHdpbnRlcjogXCIjQUNEN0M2XCIsXG4gICAgc3ByaW5nOiBcIiM2Qjg2MkVcIixcbiAgICBsaW5rOiBcIiM0NDRcIixcbiAgfSxcbn1cblxuZXhwb3J0IHR5cGUgVGhlbWUgPSB0eXBlb2YgdGhlbWVcblxuY29uc3QgR2xvYmFsU3R5bGUgPSBjcmVhdGVHbG9iYWxTdHlsZWBcbiAgYm9keSB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuYFxuXG5pbXBvcnQgcG9zdGhvZyBmcm9tIFwicG9zdGhvZy1qc1wiXG5cbmNvbnN0IE15QXBwID0gKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfTogQXBwUHJvcHMpID0+IHtcbiAgaWYgKCFJU19TRVJWRVIpIHtcbiAgICBwb3N0aG9nLmluaXQoXCJwaGNfRXdkVGJrU1RFMWhmUlhUUlRsdDc3dkdVanNqbURuNDJVZjNvcnpFV0hGN1wiLCB7XG4gICAgICBhcGlfaG9zdDogXCJodHRwczovL2FwcC5wb3N0aG9nLmNvbVwiLFxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFRoZW1lUHJvdmlkZXIgdGhlbWU9e3RoZW1lfT5cbiAgICAgICAgPEdsb2JhbFN0eWxlIC8+XG4gICAgICAgIDxDb21wb25lbnQgey4uLnBhZ2VQcm9wc30gLz5cbiAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICA8Lz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBNeUFwcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/_app.tsx\n");

/***/ }),

/***/ "./utils/constants.ts":
/*!****************************!*\
  !*** ./utils/constants.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LARGE_IMAGE_RADIUS\": function() { return /* binding */ LARGE_IMAGE_RADIUS; },\n/* harmony export */   \"TOP_SECTION_PADDING\": function() { return /* binding */ TOP_SECTION_PADDING; },\n/* harmony export */   \"SECTION_PADDING\": function() { return /* binding */ SECTION_PADDING; },\n/* harmony export */   \"GITHUB_PROFILE_URL\": function() { return /* binding */ GITHUB_PROFILE_URL; },\n/* harmony export */   \"TWITTER_PROFILE_URL\": function() { return /* binding */ TWITTER_PROFILE_URL; },\n/* harmony export */   \"WEB_RESUME_URL\": function() { return /* binding */ WEB_RESUME_URL; },\n/* harmony export */   \"OPENSEA_URL\": function() { return /* binding */ OPENSEA_URL; },\n/* harmony export */   \"SPLUNK_URL\": function() { return /* binding */ SPLUNK_URL; },\n/* harmony export */   \"SELLYOURSTUFF_URL\": function() { return /* binding */ SELLYOURSTUFF_URL; },\n/* harmony export */   \"COGNITE_URL\": function() { return /* binding */ COGNITE_URL; },\n/* harmony export */   \"IBM_URL\": function() { return /* binding */ IBM_URL; },\n/* harmony export */   \"MASSY_URL\": function() { return /* binding */ MASSY_URL; },\n/* harmony export */   \"UWBLUEPRINT_URL\": function() { return /* binding */ UWBLUEPRINT_URL; },\n/* harmony export */   \"TELEIOS_URL\": function() { return /* binding */ TELEIOS_URL; },\n/* harmony export */   \"ACS_URL\": function() { return /* binding */ ACS_URL; },\n/* harmony export */   \"IS_SERVER\": function() { return /* binding */ IS_SERVER; }\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\nvar LARGE_IMAGE_RADIUS = [64, 128];\nvar TOP_SECTION_PADDING = 72;\nvar SECTION_PADDING = 24; // More about me stuff\n\nvar GITHUB_PROFILE_URL = \"https://github.com/jtaaa\";\nvar TWITTER_PROFILE_URL = \"https://twitter.com/allum_\";\nvar WEB_RESUME_URL = \"https://resume.jallum.xyz\"; // Places I’ve contributed stuff\n\nvar OPENSEA_URL = \"https://opensea.io/allum.eth\";\nvar SPLUNK_URL = \"https://splunk.com\";\nvar SELLYOURSTUFF_URL = \"https://sellyourstuff.tt\";\nvar COGNITE_URL = \"https://cognite.com\";\nvar IBM_URL = \"https://ibm.com\";\nvar MASSY_URL = \"https://massygroup.com\";\nvar UWBLUEPRINT_URL = \"https://uwblueprint.org\";\nvar TELEIOS_URL = \"https://teleios-systems.com\";\nvar ACS_URL = \"https://uwacs.club\"; // Useful stuff\n\nvar IS_SERVER = false;\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvY29uc3RhbnRzLnRzPzEyZmEiXSwibmFtZXMiOlsiTEFSR0VfSU1BR0VfUkFESVVTIiwiVE9QX1NFQ1RJT05fUEFERElORyIsIlNFQ1RJT05fUEFERElORyIsIkdJVEhVQl9QUk9GSUxFX1VSTCIsIlRXSVRURVJfUFJPRklMRV9VUkwiLCJXRUJfUkVTVU1FX1VSTCIsIk9QRU5TRUFfVVJMIiwiU1BMVU5LX1VSTCIsIlNFTExZT1VSU1RVRkZfVVJMIiwiQ09HTklURV9VUkwiLCJJQk1fVVJMIiwiTUFTU1lfVVJMIiwiVVdCTFVFUFJJTlRfVVJMIiwiVEVMRUlPU19VUkwiLCJBQ1NfVVJMIiwiSVNfU0VSVkVSIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFPLElBQU1BLGtCQUFrQixHQUFHLENBQUMsRUFBRCxFQUFLLEdBQUwsQ0FBM0I7QUFDQSxJQUFNQyxtQkFBbUIsR0FBRyxFQUE1QjtBQUNBLElBQU1DLGVBQWUsR0FBRyxFQUF4QixDLENBRVA7O0FBQ08sSUFBTUMsa0JBQWtCLEdBQUcsMEJBQTNCO0FBQ0EsSUFBTUMsbUJBQW1CLEdBQUcsNEJBQTVCO0FBQ0EsSUFBTUMsY0FBYyxHQUFHLDJCQUF2QixDLENBRVA7O0FBQ08sSUFBTUMsV0FBVyxHQUFHLDhCQUFwQjtBQUNBLElBQU1DLFVBQVUsR0FBRyxvQkFBbkI7QUFDQSxJQUFNQyxpQkFBaUIsR0FBRywwQkFBMUI7QUFDQSxJQUFNQyxXQUFXLEdBQUcscUJBQXBCO0FBQ0EsSUFBTUMsT0FBTyxHQUFHLGlCQUFoQjtBQUNBLElBQU1DLFNBQVMsR0FBRyx3QkFBbEI7QUFDQSxJQUFNQyxlQUFlLEdBQUcseUJBQXhCO0FBQ0EsSUFBTUMsV0FBVyxHQUFHLDZCQUFwQjtBQUNBLElBQU1DLE9BQU8sR0FBRyxvQkFBaEIsQyxDQUVQOztBQUNPLElBQU1DLFNBQVMsUUFBZiIsImZpbGUiOiIuL3V0aWxzL2NvbnN0YW50cy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBMQVJHRV9JTUFHRV9SQURJVVMgPSBbNjQsIDEyOF1cbmV4cG9ydCBjb25zdCBUT1BfU0VDVElPTl9QQURESU5HID0gNzJcbmV4cG9ydCBjb25zdCBTRUNUSU9OX1BBRERJTkcgPSAyNFxuXG4vLyBNb3JlIGFib3V0IG1lIHN0dWZmXG5leHBvcnQgY29uc3QgR0lUSFVCX1BST0ZJTEVfVVJMID0gXCJodHRwczovL2dpdGh1Yi5jb20vanRhYWFcIlxuZXhwb3J0IGNvbnN0IFRXSVRURVJfUFJPRklMRV9VUkwgPSBcImh0dHBzOi8vdHdpdHRlci5jb20vYWxsdW1fXCJcbmV4cG9ydCBjb25zdCBXRUJfUkVTVU1FX1VSTCA9IFwiaHR0cHM6Ly9yZXN1bWUuamFsbHVtLnh5elwiXG5cbi8vIFBsYWNlcyBJ4oCZdmUgY29udHJpYnV0ZWQgc3R1ZmZcbmV4cG9ydCBjb25zdCBPUEVOU0VBX1VSTCA9IFwiaHR0cHM6Ly9vcGVuc2VhLmlvL2FsbHVtLmV0aFwiXG5leHBvcnQgY29uc3QgU1BMVU5LX1VSTCA9IFwiaHR0cHM6Ly9zcGx1bmsuY29tXCJcbmV4cG9ydCBjb25zdCBTRUxMWU9VUlNUVUZGX1VSTCA9IFwiaHR0cHM6Ly9zZWxseW91cnN0dWZmLnR0XCJcbmV4cG9ydCBjb25zdCBDT0dOSVRFX1VSTCA9IFwiaHR0cHM6Ly9jb2duaXRlLmNvbVwiXG5leHBvcnQgY29uc3QgSUJNX1VSTCA9IFwiaHR0cHM6Ly9pYm0uY29tXCJcbmV4cG9ydCBjb25zdCBNQVNTWV9VUkwgPSBcImh0dHBzOi8vbWFzc3lncm91cC5jb21cIlxuZXhwb3J0IGNvbnN0IFVXQkxVRVBSSU5UX1VSTCA9IFwiaHR0cHM6Ly91d2JsdWVwcmludC5vcmdcIlxuZXhwb3J0IGNvbnN0IFRFTEVJT1NfVVJMID0gXCJodHRwczovL3RlbGVpb3Mtc3lzdGVtcy5jb21cIlxuZXhwb3J0IGNvbnN0IEFDU19VUkwgPSBcImh0dHBzOi8vdXdhY3MuY2x1YlwiXG5cbi8vIFVzZWZ1bCBzdHVmZlxuZXhwb3J0IGNvbnN0IElTX1NFUlZFUiA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./utils/constants.ts\n");

/***/ }),

/***/ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \**********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nvar reactIs = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\");\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzP2RhNmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLGtEQUFVOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQixpQkFBaUI7QUFDcEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\n");

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app.tsx!":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app.tsx! ***!
  \***********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_app\",\n      function () {\n        return __webpack_require__(/*! private-next-pages/_app.tsx */ \"./pages/_app.tsx\");\n      }\n    ]);\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz82YmM1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMscURBQTZCO0FBQ3BEO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/cGFnZT0lMkZfYXBwJmFic29sdXRlUGFnZVBhdGg9cHJpdmF0ZS1uZXh0LXBhZ2VzJTJGX2FwcC50c3ghLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9fYXBwXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKFwicHJpdmF0ZS1uZXh0LXBhZ2VzL19hcHAudHN4XCIpO1xuICAgICAgfVxuICAgIF0pO1xuICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app.tsx!\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _defineProperty; }\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzPzcyOTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js\n");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _taggedTemplateLiteral; }\n/* harmony export */ });\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbC5qcz84ZDNkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90YWdnZWRUZW1wbGF0ZUxpdGVyYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICBpZiAoIXJhdykge1xuICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7XG4gICAgcmF3OiB7XG4gICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpXG4gICAgfVxuICB9KSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\n");

/***/ }),

/***/ "./node_modules/posthog-js/dist/es.js":
/*!********************************************!*\
  !*** ./node_modules/posthog-js/dist/es.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = o[Symbol.iterator]();\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\n// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nvar keyStrUriSafe = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$';\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n\n    for (var i = 0; i < alphabet.length; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64: function compressToBase64(input) {\n    if (input == null) return '';\n\n    var res = LZString._compress(input, 6, function (a) {\n      return keyStrBase64.charAt(a);\n    });\n\n    switch (res.length % 4 // To produce valid Base64\n    ) {\n      default: // When could this happen ?\n\n      case 0:\n        return res;\n\n      case 1:\n        return res + '===';\n\n      case 2:\n        return res + '==';\n\n      case 3:\n        return res + '=';\n    }\n  },\n  decompressFromBase64: function decompressFromBase64(input) {\n    if (input == null) return '';\n    if (input == '') return null;\n    return LZString._decompress(input.length, 32, function (index) {\n      return getBaseValue(keyStrBase64, input.charAt(index));\n    });\n  },\n  compressToUTF16: function compressToUTF16(input) {\n    if (input == null) return '';\n    return LZString._compress(input, 15, function (a) {\n      return f(a + 32);\n    }) + ' ';\n  },\n  decompressFromUTF16: function decompressFromUTF16(compressed) {\n    if (compressed == null) return '';\n    if (compressed == '') return null;\n    return LZString._decompress(compressed.length, 16384, function (index) {\n      return compressed.charCodeAt(index) - 32;\n    });\n  },\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function compressToUint8Array(uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf = new Uint8Array(compressed.length * 2); // 2 bytes per character\n\n    for (var i = 0, TotalLen = compressed.length; i < TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i * 2] = current_value >>> 8;\n      buf[i * 2 + 1] = current_value % 256;\n    }\n\n    return buf;\n  },\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array: function decompressFromUint8Array(compressed) {\n    if (compressed === null || compressed === undefined) {\n      return LZString.decompress(compressed);\n    } else {\n      var buf = new Array(compressed.length / 2); // 2 bytes per character\n\n      for (var i = 0, TotalLen = buf.length; i < TotalLen; i++) {\n        buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1];\n      }\n\n      var result = [];\n      buf.forEach(function (c) {\n        result.push(f(c));\n      });\n      return LZString.decompress(result.join(''));\n    }\n  },\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function compressToEncodedURIComponent(input) {\n    if (input == null) return '';\n    return LZString._compress(input, 6, function (a) {\n      return keyStrUriSafe.charAt(a);\n    });\n  },\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent: function decompressFromEncodedURIComponent(input) {\n    if (input == null) return '';\n    if (input == '') return null;\n    input = input.replace(/ /g, '+');\n    return LZString._decompress(input.length, 32, function (index) {\n      return getBaseValue(keyStrUriSafe, input.charAt(index));\n    });\n  },\n  compress: function compress(uncompressed) {\n    return LZString._compress(uncompressed, 16, function (a) {\n      return f(a);\n    });\n  },\n  _compress: function _compress(uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return '';\n    var i,\n        value,\n        context_dictionary = {},\n        context_dictionaryToCreate = {},\n        context_c = '',\n        context_wc = '',\n        context_w = '',\n        context_enlargeIn = 2,\n        // Compensate for the first entry which should not count\n    context_dictSize = 3,\n        context_numBits = 2,\n        context_data = [],\n        context_data_val = 0,\n        context_data_position = 0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n\n      if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {\n          if (context_w.charCodeAt(0) < 256) {\n            for (i = 0; i < context_numBits; i++) {\n              context_data_val = context_data_val << 1;\n\n              if (context_data_position == bitsPerChar - 1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n\n            value = context_w.charCodeAt(0);\n\n            for (i = 0; i < 8; i++) {\n              context_data_val = context_data_val << 1 | value & 1;\n\n              if (context_data_position == bitsPerChar - 1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n\n            for (i = 0; i < context_numBits; i++) {\n              context_data_val = context_data_val << 1 | value;\n\n              if (context_data_position == bitsPerChar - 1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n\n              value = 0;\n            }\n\n            value = context_w.charCodeAt(0);\n\n            for (i = 0; i < 16; i++) {\n              context_data_val = context_data_val << 1 | value & 1;\n\n              if (context_data_position == bitsPerChar - 1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n\n              value = value >> 1;\n            }\n          }\n\n          context_enlargeIn--;\n\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n\n          for (i = 0; i < context_numBits; i++) {\n            context_data_val = context_data_val << 1 | value & 1;\n\n            if (context_data_position == bitsPerChar - 1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n\n            value = value >> 1;\n          }\n        }\n\n        context_enlargeIn--;\n\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        } // Add wc to the dictionary.\n\n\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    } // Output the code for w.\n\n\n    if (context_w !== '') {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {\n        if (context_w.charCodeAt(0) < 256) {\n          for (i = 0; i < context_numBits; i++) {\n            context_data_val = context_data_val << 1;\n\n            if (context_data_position == bitsPerChar - 1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n\n          value = context_w.charCodeAt(0);\n\n          for (i = 0; i < 8; i++) {\n            context_data_val = context_data_val << 1 | value & 1;\n\n            if (context_data_position == bitsPerChar - 1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n\n          for (i = 0; i < context_numBits; i++) {\n            context_data_val = context_data_val << 1 | value;\n\n            if (context_data_position == bitsPerChar - 1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n\n            value = 0;\n          }\n\n          value = context_w.charCodeAt(0);\n\n          for (i = 0; i < 16; i++) {\n            context_data_val = context_data_val << 1 | value & 1;\n\n            if (context_data_position == bitsPerChar - 1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n\n            value = value >> 1;\n          }\n        }\n\n        context_enlargeIn--;\n\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n\n        for (i = 0; i < context_numBits; i++) {\n          context_data_val = context_data_val << 1 | value & 1;\n\n          if (context_data_position == bitsPerChar - 1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n\n          value = value >> 1;\n        }\n      }\n\n      context_enlargeIn--;\n\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    } // Mark the end of the stream\n\n\n    value = 2;\n\n    for (i = 0; i < context_numBits; i++) {\n      context_data_val = context_data_val << 1 | value & 1;\n\n      if (context_data_position == bitsPerChar - 1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n\n      value = value >> 1;\n    } // Flush the last char\n\n\n    while (true) {\n      context_data_val = context_data_val << 1;\n\n      if (context_data_position == bitsPerChar - 1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      } else context_data_position++;\n    }\n\n    return context_data.join('');\n  },\n  decompress: function decompress(compressed) {\n    if (compressed == null) return '';\n    if (compressed == '') return null;\n    return LZString._decompress(compressed.length, 32768, function (index) {\n      return compressed.charCodeAt(index);\n    });\n  },\n  _decompress: function _decompress(length, resetValue, getNextValue) {\n    var dictionary = [],\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = '',\n        result = [],\n        i,\n        w,\n        bits,\n        resb,\n        maxpower,\n        power,\n        c,\n        data = {\n      val: getNextValue(0),\n      position: resetValue,\n      index: 1\n    };\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2, 2);\n    power = 1;\n\n    while (power != maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n\n      bits |= (resb > 0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (bits) {\n      case 0:\n        bits = 0;\n        maxpower = Math.pow(2, 8);\n        power = 1;\n\n        while (power != maxpower) {\n          resb = data.val & data.position;\n          data.position >>= 1;\n\n          if (data.position == 0) {\n            data.position = resetValue;\n            data.val = getNextValue(data.index++);\n          }\n\n          bits |= (resb > 0 ? 1 : 0) * power;\n          power <<= 1;\n        }\n\n        c = f(bits);\n        break;\n\n      case 1:\n        bits = 0;\n        maxpower = Math.pow(2, 16);\n        power = 1;\n\n        while (power != maxpower) {\n          resb = data.val & data.position;\n          data.position >>= 1;\n\n          if (data.position == 0) {\n            data.position = resetValue;\n            data.val = getNextValue(data.index++);\n          }\n\n          bits |= (resb > 0 ? 1 : 0) * power;\n          power <<= 1;\n        }\n\n        c = f(bits);\n        break;\n\n      case 2:\n        return '';\n    }\n\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n\n    while (true) {\n      if (data.index > length) {\n        return '';\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2, numBits);\n      power = 1;\n\n      while (power != maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n\n        bits |= (resb > 0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2, 8);\n          power = 1;\n\n          while (power != maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n\n            bits |= (resb > 0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize - 1;\n          enlargeIn--;\n          break;\n\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2, 16);\n          power = 1;\n\n          while (power != maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n\n            bits |= (resb > 0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize - 1;\n          enlargeIn--;\n          break;\n\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n\n      result.push(entry); // Add w+entry[0] to the dictionary.\n\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n    }\n  }\n};\n\nvar version = \"1.12.1\";\n\nvar Config = {\n  DEBUG: false,\n  LIB_VERSION: version\n};\n\n/* eslint camelcase: \"off\", eqeqeq: \"off\" */\n/*\n * Saved references to long variable names, so that closure compiler can\n * minimize file size.\n */\n\nvar ArrayProto = Array.prototype,\n    FuncProto = Function.prototype,\n    ObjProto = Object.prototype,\n    slice = ArrayProto.slice,\n    toString = ObjProto.toString,\n    hasOwnProperty = ObjProto.hasOwnProperty,\n    win = typeof window !== 'undefined' ? window : {},\n    navigator = win.navigator || {\n  userAgent: ''\n},\n    document$1 = win.document || {},\n    userAgent = navigator.userAgent;\nvar nativeBind = FuncProto.bind,\n    nativeForEach = ArrayProto.forEach,\n    nativeIndexOf = ArrayProto.indexOf,\n    nativeIsArray = Array.isArray,\n    breaker = {};\nvar _ = {\n  trim: function trim(str) {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\n    return str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n  }\n}; // Console override\n\nvar console$1 = {\n  /** @type {function(...*)} */\n  log: function log() {\n    if (Config.DEBUG && !_.isUndefined(window.console) && window.console) {\n      try {\n        window.console.log.apply(window.console, arguments);\n      } catch (err) {\n        _.each(arguments, function (arg) {\n          window.console.log(arg);\n        });\n      }\n    }\n  },\n\n  /** @type {function(...*)} */\n  error: function error() {\n    if (Config.DEBUG && !_.isUndefined(window.console) && window.console) {\n      var args = ['PostHog error:'].concat(Array.prototype.slice.call(arguments));\n\n      try {\n        window.console.error.apply(window.console, args);\n      } catch (err) {\n        _.each(args, function (arg) {\n          window.console.error(arg);\n        });\n      }\n    }\n  },\n\n  /** @type {function(...*)} */\n  critical: function critical() {\n    if (!_.isUndefined(window.console) && window.console) {\n      var args = ['PostHog error:'].concat(Array.prototype.slice.call(arguments));\n\n      try {\n        window.console.error.apply(window.console, args);\n      } catch (err) {\n        _.each(args, function (arg) {\n          window.console.error(arg);\n        });\n      }\n    }\n  }\n}; // UNDERSCORE\n// Embed part of the Underscore Library\n\n_.bind = function (func, context) {\n  var args, _bound;\n\n  if (nativeBind && func.bind === nativeBind) {\n    return nativeBind.apply(func, slice.call(arguments, 1));\n  }\n\n  if (!_.isFunction(func)) {\n    throw new TypeError();\n  }\n\n  args = slice.call(arguments, 2);\n\n  _bound = function bound() {\n    if (!(this instanceof _bound)) {\n      return func.apply(context, args.concat(slice.call(arguments)));\n    }\n\n    var ctor = {};\n    ctor.prototype = func.prototype;\n    var self = new ctor();\n    ctor.prototype = null;\n    var result = func.apply(self, args.concat(slice.call(arguments)));\n\n    if (Object(result) === result) {\n      return result;\n    }\n\n    return self;\n  };\n\n  return _bound;\n};\n\n_.bind_instance_methods = function (obj) {\n  for (var func in obj) {\n    if (typeof obj[func] === 'function') {\n      obj[func] = _.bind(obj[func], obj);\n    }\n  }\n};\n/**\n * @param {*=} obj\n * @param {function(...*)=} iterator\n * @param {Object=} context\n */\n\n\n_.each = function (obj, iterator, context) {\n  if (obj === null || obj === undefined) {\n    return;\n  }\n\n  if (nativeForEach && obj.forEach === nativeForEach) {\n    obj.forEach(iterator, context);\n  } else if (obj.length === +obj.length) {\n    for (var i = 0, l = obj.length; i < l; i++) {\n      if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) {\n        return;\n      }\n    }\n  } else {\n    for (var key in obj) {\n      if (hasOwnProperty.call(obj, key)) {\n        if (iterator.call(context, obj[key], key, obj) === breaker) {\n          return;\n        }\n      }\n    }\n  }\n};\n\n_.extend = function (obj) {\n  _.each(slice.call(arguments, 1), function (source) {\n    for (var prop in source) {\n      if (source[prop] !== void 0) {\n        obj[prop] = source[prop];\n      }\n    }\n  });\n\n  return obj;\n};\n\n_.isArray = nativeIsArray || function (obj) {\n  return toString.call(obj) === '[object Array]';\n}; // from a comment on http://dbj.org/dbj/?p=286\n// fails on only one very rare and deliberate custom object:\n// var bomb = { toString : undefined, valueOf: function(o) { return \"function BOMBA!\"; }};\n\n\n_.isFunction = function (f) {\n  try {\n    return /^\\s*\\bfunction\\b/.test(f);\n  } catch (x) {\n    return false;\n  }\n};\n\n_.include = function (obj, target) {\n  var found = false;\n\n  if (obj === null) {\n    return found;\n  }\n\n  if (nativeIndexOf && obj.indexOf === nativeIndexOf) {\n    return obj.indexOf(target) != -1;\n  }\n\n  _.each(obj, function (value) {\n    if (found || (found = value === target)) {\n      return breaker;\n    }\n  });\n\n  return found;\n};\n\n_.includes = function (str, needle) {\n  return str.indexOf(needle) !== -1;\n}; // Underscore Addons\n\n\n_.isObject = function (obj) {\n  return obj === Object(obj) && !_.isArray(obj);\n};\n\n_.isEmptyObject = function (obj) {\n  if (_.isObject(obj)) {\n    for (var key in obj) {\n      if (hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\n_.isUndefined = function (obj) {\n  return obj === void 0;\n};\n\n_.isString = function (obj) {\n  return toString.call(obj) == '[object String]';\n};\n\n_.isDate = function (obj) {\n  return toString.call(obj) == '[object Date]';\n};\n\n_.isNumber = function (obj) {\n  return toString.call(obj) == '[object Number]';\n};\n\n_.encodeDates = function (obj) {\n  _.each(obj, function (v, k) {\n    if (_.isDate(v)) {\n      obj[k] = _.formatDate(v);\n    } else if (_.isObject(v)) {\n      obj[k] = _.encodeDates(v); // recurse\n    }\n  });\n\n  return obj;\n};\n\n_.timestamp = function () {\n  Date.now = Date.now || function () {\n    return +new Date();\n  };\n\n  return Date.now();\n};\n\n_.formatDate = function (d) {\n  // YYYY-MM-DDTHH:MM:SS in UTC\n  function pad(n) {\n    return n < 10 ? '0' + n : n;\n  }\n\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds());\n};\n\n_.safewrap = function (f) {\n  return function () {\n    try {\n      return f.apply(this, arguments);\n    } catch (e) {\n      console$1.critical('Implementation error. Please turn on debug and contact support@posthog.com.');\n\n      if (Config.DEBUG) {\n        console$1.critical(e);\n      }\n    }\n  };\n};\n\n_.safewrap_class = function (klass, functions) {\n  for (var i = 0; i < functions.length; i++) {\n    klass.prototype[functions[i]] = _.safewrap(klass.prototype[functions[i]]);\n  }\n};\n\n_.safewrap_instance_methods = function (obj) {\n  for (var func in obj) {\n    if (typeof obj[func] === 'function') {\n      obj[func] = _.safewrap(obj[func]);\n    }\n  }\n};\n\n_.strip_empty_properties = function (p) {\n  var ret = {};\n\n  _.each(p, function (v, k) {\n    if (_.isString(v) && v.length > 0) {\n      ret[k] = v;\n    }\n  });\n\n  return ret;\n}; // Deep copies an object.\n// It handles cycles by replacing all references to them with `undefined`\n// Also supports customizing native values\n\n\nvar COPY_IN_PROGRESS_ATTRIBUTE = typeof Symbol !== 'undefined' ? Symbol('__deepCircularCopyInProgress__') : '__deepCircularCopyInProgress__';\n\nfunction deepCircularCopy(value, customizer) {\n  if (value !== Object(value)) return customizer ? customizer(value) : value; // primitive value\n\n  if (value[COPY_IN_PROGRESS_ATTRIBUTE]) return undefined;\n  value[COPY_IN_PROGRESS_ATTRIBUTE] = true;\n  var result;\n\n  if (_.isArray(value)) {\n    result = [];\n\n    _.each(value, function (it) {\n      result.push(deepCircularCopy(it, customizer));\n    });\n  } else {\n    result = {};\n\n    _.each(value, function (val, key) {\n      if (key !== COPY_IN_PROGRESS_ATTRIBUTE) {\n        result[key] = deepCircularCopy(val, customizer);\n      }\n    });\n  }\n\n  delete value[COPY_IN_PROGRESS_ATTRIBUTE];\n  return result;\n}\n\n_.copyAndTruncateStrings = function (object, maxStringLength) {\n  return deepCircularCopy(object, function (value) {\n    if (typeof value === 'string' && maxStringLength !== null) {\n      value = value.slice(0, maxStringLength);\n    }\n\n    return value;\n  });\n};\n\n_.base64Encode = function (data) {\n  var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n  var o1,\n      o2,\n      o3,\n      h1,\n      h2,\n      h3,\n      h4,\n      bits,\n      i = 0,\n      ac = 0,\n      enc = '',\n      tmp_arr = [];\n\n  if (!data) {\n    return data;\n  }\n\n  data = _.utf8Encode(data);\n\n  do {\n    // pack three octets into four hexets\n    o1 = data.charCodeAt(i++);\n    o2 = data.charCodeAt(i++);\n    o3 = data.charCodeAt(i++);\n    bits = o1 << 16 | o2 << 8 | o3;\n    h1 = bits >> 18 & 0x3f;\n    h2 = bits >> 12 & 0x3f;\n    h3 = bits >> 6 & 0x3f;\n    h4 = bits & 0x3f; // use hexets to index into b64, and append result to encoded string\n\n    tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n  } while (i < data.length);\n\n  enc = tmp_arr.join('');\n\n  switch (data.length % 3) {\n    case 1:\n      enc = enc.slice(0, -2) + '==';\n      break;\n\n    case 2:\n      enc = enc.slice(0, -1) + '=';\n      break;\n  }\n\n  return enc;\n};\n\n_.utf8Encode = function (string) {\n  string = (string + '').replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n  var utftext = '',\n      start,\n      end;\n  var stringl = 0,\n      n;\n  start = end = 0;\n  stringl = string.length;\n\n  for (n = 0; n < stringl; n++) {\n    var c1 = string.charCodeAt(n);\n    var enc = null;\n\n    if (c1 < 128) {\n      end++;\n    } else if (c1 > 127 && c1 < 2048) {\n      enc = String.fromCharCode(c1 >> 6 | 192, c1 & 63 | 128);\n    } else {\n      enc = String.fromCharCode(c1 >> 12 | 224, c1 >> 6 & 63 | 128, c1 & 63 | 128);\n    }\n\n    if (enc !== null) {\n      if (end > start) {\n        utftext += string.substring(start, end);\n      }\n\n      utftext += enc;\n      start = end = n + 1;\n    }\n  }\n\n  if (end > start) {\n    utftext += string.substring(start, string.length);\n  }\n\n  return utftext;\n};\n\n_.UUID = function () {\n  // Time/ticks information\n  // 1*new Date() is a cross browser version of Date.now()\n  var T = function T() {\n    var d = 1 * new Date(),\n        i = 0; // this while loop figures how many browser ticks go by\n    // before 1*new Date() returns a new number, ie the amount\n    // of ticks that go by per millisecond\n\n    while (d == 1 * new Date()) {\n      i++;\n    }\n\n    return d.toString(16) + i.toString(16);\n  }; // Math.Random entropy\n\n\n  var R = function R() {\n    return Math.random().toString(16).replace('.', '');\n  }; // User agent entropy\n  // This function takes the user agent string, and then xors\n  // together each sequence of 8 bytes.  This produces a final\n  // sequence of 8 bytes which it returns as hex.\n\n\n  var UA = function UA() {\n    var ua = userAgent,\n        i,\n        ch,\n        buffer = [],\n        ret = 0;\n\n    function xor(result, byte_array) {\n      var j,\n          tmp = 0;\n\n      for (j = 0; j < byte_array.length; j++) {\n        tmp |= buffer[j] << j * 8;\n      }\n\n      return result ^ tmp;\n    }\n\n    for (i = 0; i < ua.length; i++) {\n      ch = ua.charCodeAt(i);\n      buffer.unshift(ch & 0xff);\n\n      if (buffer.length >= 4) {\n        ret = xor(ret, buffer);\n        buffer = [];\n      }\n    }\n\n    if (buffer.length > 0) {\n      ret = xor(ret, buffer);\n    }\n\n    return ret.toString(16);\n  };\n\n  return function () {\n    var se = (window.screen.height * window.screen.width).toString(16);\n    return T() + '-' + R() + '-' + UA() + '-' + se + '-' + T();\n  };\n}(); // _.isBlockedUA()\n// This is to block various web spiders from executing our JS and\n// sending false captureing data\n\n\n_.isBlockedUA = function (ua) {\n  if (/(google web preview|baiduspider|yandexbot|bingbot|googlebot|yahoo! slurp)/i.test(ua)) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * @param {Object=} formdata\n * @param {string=} arg_separator\n */\n\n\n_.HTTPBuildQuery = function (formdata, arg_separator) {\n  var use_val,\n      use_key,\n      tph_arr = [];\n\n  if (_.isUndefined(arg_separator)) {\n    arg_separator = '&';\n  }\n\n  _.each(formdata, function (val, key) {\n    use_val = encodeURIComponent(val.toString());\n    use_key = encodeURIComponent(key);\n    tph_arr[tph_arr.length] = use_key + '=' + use_val;\n  });\n\n  return tph_arr.join(arg_separator);\n};\n\n_.getQueryParam = function (url, param) {\n  // Expects a raw URL\n  param = param.replace(/[[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  var regexS = '[\\\\?&]' + param + '=([^&#]*)',\n      regex = new RegExp(regexS),\n      results = regex.exec(url);\n\n  if (results === null || results && typeof results[1] !== 'string' && results[1].length) {\n    return '';\n  } else {\n    var result = results[1];\n\n    try {\n      result = decodeURIComponent(result);\n    } catch (err) {\n      console$1.error('Skipping decoding for malformed query param: ' + result);\n    }\n\n    return result.replace(/\\+/g, ' ');\n  }\n};\n\n_.getHashParam = function (hash, param) {\n  var matches = hash.match(new RegExp(param + '=([^&]*)'));\n  return matches ? matches[1] : null;\n};\n\n_.register_event = function () {\n  // written by Dean Edwards, 2005\n  // with input from Tino Zijdel - crisp@xs4all.nl\n  // with input from Carl Sverre - mail@carlsverre.com\n  // with input from PostHog\n  // http://dean.edwards.name/weblog/2005/10/add-event/\n  // https://gist.github.com/1930440\n\n  /**\n   * @param {Object} element\n   * @param {string} type\n   * @param {function(...*)} handler\n   * @param {boolean=} oldSchool\n   * @param {boolean=} useCapture\n   */\n  var register_event = function register_event(element, type, handler, oldSchool, useCapture) {\n    if (!element) {\n      console$1.error('No valid element provided to register_event');\n      return;\n    }\n\n    if (element.addEventListener && !oldSchool) {\n      element.addEventListener(type, handler, !!useCapture);\n    } else {\n      var ontype = 'on' + type;\n      var old_handler = element[ontype]; // can be undefined\n\n      element[ontype] = makeHandler(element, handler, old_handler);\n    }\n  };\n\n  function makeHandler(element, new_handler, old_handlers) {\n    var handler = function handler(event) {\n      event = event || fixEvent(window.event); // this basically happens in firefox whenever another script\n      // overwrites the onload callback and doesn't pass the event\n      // object to previously defined callbacks.  All the browsers\n      // that don't define window.event implement addEventListener\n      // so the dom_loaded handler will still be fired as usual.\n\n      if (!event) {\n        return undefined;\n      }\n\n      var ret = true;\n      var old_result, new_result;\n\n      if (_.isFunction(old_handlers)) {\n        old_result = old_handlers(event);\n      }\n\n      new_result = new_handler.call(element, event);\n\n      if (false === old_result || false === new_result) {\n        ret = false;\n      }\n\n      return ret;\n    };\n\n    return handler;\n  }\n\n  function fixEvent(event) {\n    if (event) {\n      event.preventDefault = fixEvent.preventDefault;\n      event.stopPropagation = fixEvent.stopPropagation;\n    }\n\n    return event;\n  }\n\n  fixEvent.preventDefault = function () {\n    this.returnValue = false;\n  };\n\n  fixEvent.stopPropagation = function () {\n    this.cancelBubble = true;\n  };\n\n  return register_event;\n}();\n\n_.info = {\n  campaignParams: function campaignParams() {\n    var campaign_keywords = 'utm_source utm_medium utm_campaign utm_content utm_term'.split(' '),\n        kw = '',\n        params = {};\n\n    _.each(campaign_keywords, function (kwkey) {\n      kw = _.getQueryParam(document$1.URL, kwkey);\n\n      if (kw.length) {\n        params[kwkey] = kw;\n      }\n    });\n\n    return params;\n  },\n  searchEngine: function searchEngine(referrer) {\n    if (referrer.search('https?://(.*)google.([^/?]*)') === 0) {\n      return 'google';\n    } else if (referrer.search('https?://(.*)bing.com') === 0) {\n      return 'bing';\n    } else if (referrer.search('https?://(.*)yahoo.com') === 0) {\n      return 'yahoo';\n    } else if (referrer.search('https?://(.*)duckduckgo.com') === 0) {\n      return 'duckduckgo';\n    } else {\n      return null;\n    }\n  },\n  searchInfo: function searchInfo(referrer) {\n    var search = _.info.searchEngine(referrer),\n        param = search != 'yahoo' ? 'q' : 'p',\n        ret = {};\n\n    if (search !== null) {\n      ret['$search_engine'] = search;\n\n      var keyword = _.getQueryParam(referrer, param);\n\n      if (keyword.length) {\n        ret['ph_keyword'] = keyword;\n      }\n    }\n\n    return ret;\n  },\n\n  /**\n   * This function detects which browser is running this script.\n   * The order of the checks are important since many user agents\n   * include key words used in later checks.\n   */\n  browser: function browser(user_agent, vendor, opera) {\n    vendor = vendor || ''; // vendor is undefined for at least IE9\n\n    if (opera || _.includes(user_agent, ' OPR/')) {\n      if (_.includes(user_agent, 'Mini')) {\n        return 'Opera Mini';\n      }\n\n      return 'Opera';\n    } else if (/(BlackBerry|PlayBook|BB10)/i.test(user_agent)) {\n      return 'BlackBerry';\n    } else if (_.includes(user_agent, 'IEMobile') || _.includes(user_agent, 'WPDesktop')) {\n      return 'Internet Explorer Mobile';\n    } else if (_.includes(user_agent, 'SamsungBrowser/')) {\n      // https://developer.samsung.com/internet/user-agent-string-format\n      return 'Samsung Internet';\n    } else if (_.includes(user_agent, 'Edge') || _.includes(user_agent, 'Edg/')) {\n      return 'Microsoft Edge';\n    } else if (_.includes(user_agent, 'FBIOS')) {\n      return 'Facebook Mobile';\n    } else if (_.includes(user_agent, 'Chrome')) {\n      return 'Chrome';\n    } else if (_.includes(user_agent, 'CriOS')) {\n      return 'Chrome iOS';\n    } else if (_.includes(user_agent, 'UCWEB') || _.includes(user_agent, 'UCBrowser')) {\n      return 'UC Browser';\n    } else if (_.includes(user_agent, 'FxiOS')) {\n      return 'Firefox iOS';\n    } else if (_.includes(vendor, 'Apple')) {\n      if (_.includes(user_agent, 'Mobile')) {\n        return 'Mobile Safari';\n      }\n\n      return 'Safari';\n    } else if (_.includes(user_agent, 'Android')) {\n      return 'Android Mobile';\n    } else if (_.includes(user_agent, 'Konqueror')) {\n      return 'Konqueror';\n    } else if (_.includes(user_agent, 'Firefox')) {\n      return 'Firefox';\n    } else if (_.includes(user_agent, 'MSIE') || _.includes(user_agent, 'Trident/')) {\n      return 'Internet Explorer';\n    } else if (_.includes(user_agent, 'Gecko')) {\n      return 'Mozilla';\n    } else {\n      return '';\n    }\n  },\n\n  /**\n   * This function detects which browser version is running this script,\n   * parsing major and minor version (e.g., 42.1). User agent strings from:\n   * http://www.useragentstring.com/pages/useragentstring.php\n   */\n  browserVersion: function browserVersion(userAgent, vendor, opera) {\n    var browser = _.info.browser(userAgent, vendor, opera);\n\n    var versionRegexs = {\n      'Internet Explorer Mobile': /rv:(\\d+(\\.\\d+)?)/,\n      'Microsoft Edge': /Edge?\\/(\\d+(\\.\\d+)?)/,\n      Chrome: /Chrome\\/(\\d+(\\.\\d+)?)/,\n      'Chrome iOS': /CriOS\\/(\\d+(\\.\\d+)?)/,\n      'UC Browser': /(UCBrowser|UCWEB)\\/(\\d+(\\.\\d+)?)/,\n      Safari: /Version\\/(\\d+(\\.\\d+)?)/,\n      'Mobile Safari': /Version\\/(\\d+(\\.\\d+)?)/,\n      Opera: /(Opera|OPR)\\/(\\d+(\\.\\d+)?)/,\n      Firefox: /Firefox\\/(\\d+(\\.\\d+)?)/,\n      'Firefox iOS': /FxiOS\\/(\\d+(\\.\\d+)?)/,\n      Konqueror: /Konqueror:(\\d+(\\.\\d+)?)/,\n      BlackBerry: /BlackBerry (\\d+(\\.\\d+)?)/,\n      'Android Mobile': /android\\s(\\d+(\\.\\d+)?)/,\n      'Samsung Internet': /SamsungBrowser\\/(\\d+(\\.\\d+)?)/,\n      'Internet Explorer': /(rv:|MSIE )(\\d+(\\.\\d+)?)/,\n      Mozilla: /rv:(\\d+(\\.\\d+)?)/\n    };\n    var regex = versionRegexs[browser];\n\n    if (regex === undefined) {\n      return null;\n    }\n\n    var matches = userAgent.match(regex);\n\n    if (!matches) {\n      return null;\n    }\n\n    return parseFloat(matches[matches.length - 2]);\n  },\n  os: function os() {\n    var a = userAgent;\n\n    if (/Windows/i.test(a)) {\n      if (/Phone/.test(a) || /WPDesktop/.test(a)) {\n        return 'Windows Phone';\n      }\n\n      return 'Windows';\n    } else if (/(iPhone|iPad|iPod)/.test(a)) {\n      return 'iOS';\n    } else if (/Android/.test(a)) {\n      return 'Android';\n    } else if (/(BlackBerry|PlayBook|BB10)/i.test(a)) {\n      return 'BlackBerry';\n    } else if (/Mac/i.test(a)) {\n      return 'Mac OS X';\n    } else if (/Linux/.test(a)) {\n      return 'Linux';\n    } else if (/CrOS/.test(a)) {\n      return 'Chrome OS';\n    } else {\n      return '';\n    }\n  },\n  device: function device(user_agent) {\n    if (/Windows Phone/i.test(user_agent) || /WPDesktop/.test(user_agent)) {\n      return 'Windows Phone';\n    } else if (/iPad/.test(user_agent)) {\n      return 'iPad';\n    } else if (/iPod/.test(user_agent)) {\n      return 'iPod Touch';\n    } else if (/iPhone/.test(user_agent)) {\n      return 'iPhone';\n    } else if (/(BlackBerry|PlayBook|BB10)/i.test(user_agent)) {\n      return 'BlackBerry';\n    } else if (/Android/.test(user_agent) && !/Mobile/.test(user_agent)) {\n      return 'Android Tablet';\n    } else if (/Android/.test(user_agent)) {\n      return 'Android';\n    } else {\n      return '';\n    }\n  },\n  deviceType: function deviceType(user_agent) {\n    var device = this.device(user_agent);\n\n    if (device === 'iPad' || device === 'Android Tablet') {\n      return 'Tablet';\n    } else if (device) {\n      return 'Mobile';\n    } else {\n      return 'Desktop';\n    }\n  },\n  referringDomain: function referringDomain(referrer) {\n    var split = referrer.split('/');\n\n    if (split.length >= 3) {\n      return split[2];\n    }\n\n    return '';\n  },\n  properties: function properties() {\n    return _.extend(_.strip_empty_properties({\n      $os: _.info.os(),\n      $browser: _.info.browser(userAgent, navigator.vendor, window.opera),\n      $device: _.info.device(userAgent),\n      $device_type: _.info.deviceType(userAgent)\n    }), {\n      $current_url: window.location.href,\n      $host: window.location.host,\n      $pathname: window.location.pathname,\n      $browser_version: _.info.browserVersion(userAgent, navigator.vendor, window.opera),\n      $screen_height: window.screen.height,\n      $screen_width: window.screen.width,\n      $viewport_height: window.innerHeight,\n      $viewport_width: window.innerWidth,\n      $lib: 'web',\n      $lib_version: Config.LIB_VERSION,\n      $insert_id: Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10),\n      $time: _.timestamp() / 1000 // epoch time in seconds\n\n    });\n  },\n  people_properties: function people_properties() {\n    return _.extend(_.strip_empty_properties({\n      $os: _.info.os(),\n      $browser: _.info.browser(userAgent, navigator.vendor, window.opera)\n    }), {\n      $browser_version: _.info.browserVersion(userAgent, navigator.vendor, window.opera)\n    });\n  }\n}; // EXPORTS (for closure compiler)\n\n_['isObject'] = _.isObject;\n_['isBlockedUA'] = _.isBlockedUA;\n_['isEmptyObject'] = _.isEmptyObject;\n_['info'] = _.info;\n_['info']['device'] = _.info.device;\n_['info']['browser'] = _.info.browser;\n_['info']['browserVersion'] = _.info.browserVersion;\n_['info']['properties'] = _.info.properties;\n\n/*\n * Get the className of an element, accounting for edge cases where element.className is an object\n * @param {Element} el - element to get the className of\n * @returns {string} the element's class\n */\n\nfunction getClassName(el) {\n  switch (_typeof(el.className)) {\n    case 'string':\n      return el.className;\n\n    case 'object':\n      // handle cases where className might be SVGAnimatedString or some other type\n      return el.className.baseVal || el.getAttribute('class') || '';\n\n    default:\n      // future proof\n      return '';\n  }\n}\n/*\n * Get the direct text content of an element, protecting against sensitive data collection.\n * Concats textContent of each of the element's text node children; this avoids potential\n * collection of sensitive data that could happen if we used element.textContent and the\n * element had sensitive child elements, since element.textContent includes child content.\n * Scrubs values that look like they could be sensitive (i.e. cc or ssn number).\n * @param {Element} el - element to get the text of\n * @returns {string} the element's direct text content\n */\n\nfunction getSafeText(el) {\n  var elText = '';\n\n  if (shouldCaptureElement(el) && !isSensitiveElement(el) && el.childNodes && el.childNodes.length) {\n    _.each(el.childNodes, function (child) {\n      if (isTextNode(child) && child.textContent) {\n        elText += _.trim(child.textContent) // scrub potentially sensitive values\n        .split(/(\\s+)/).filter(shouldCaptureValue).join('') // normalize whitespace\n        .replace(/[\\r\\n]/g, ' ').replace(/[ ]+/g, ' ') // truncate\n        .substring(0, 255);\n      }\n    });\n  }\n\n  return _.trim(elText);\n}\n/*\n * Check whether an element has nodeType Node.ELEMENT_NODE\n * @param {Element} el - element to check\n * @returns {boolean} whether el is of the correct nodeType\n */\n\nfunction isElementNode(el) {\n  return el && el.nodeType === 1; // Node.ELEMENT_NODE - use integer constant for browser portability\n}\n/*\n * Check whether an element is of a given tag type.\n * Due to potential reference discrepancies (such as the webcomponents.js polyfill),\n * we want to match tagNames instead of specific references because something like\n * element === document.body won't always work because element might not be a native\n * element.\n * @param {Element} el - element to check\n * @param {string} tag - tag name (e.g., \"div\")\n * @returns {boolean} whether el is of the given tag type\n */\n\nfunction isTag(el, tag) {\n  return el && el.tagName && el.tagName.toLowerCase() === tag.toLowerCase();\n}\n/*\n * Check whether an element has nodeType Node.TEXT_NODE\n * @param {Element} el - element to check\n * @returns {boolean} whether el is of the correct nodeType\n */\n\nfunction isTextNode(el) {\n  return el && el.nodeType === 3; // Node.TEXT_NODE - use integer constant for browser portability\n}\nvar usefulElements = ['a', 'button', 'form', 'input', 'select', 'textarea', 'label'];\n/*\n * Check whether a DOM event should be \"captured\" or if it may contain sentitive data\n * using a variety of heuristics.\n * @param {Element} el - element to check\n * @param {Event} event - event to check\n * @returns {boolean} whether the event should be captured\n */\n\nfunction shouldCaptureDomEvent(el, event) {\n  if (!el || isTag(el, 'html') || !isElementNode(el)) {\n    return false;\n  }\n\n  var parentIsUsefulElement = false;\n  var targetElementList = [el];\n  var parentNode = true;\n  var curEl = el;\n\n  while (curEl.parentNode && !isTag(curEl, 'body')) {\n    // If element is a shadow root, we skip it\n    if (curEl.parentNode.nodeType === 11) {\n      targetElementList.push(curEl.parentNode.host);\n      curEl = curEl.parentNode.host;\n      continue;\n    }\n\n    parentNode = curEl.parentNode;\n    if (!parentNode) break;\n\n    if (usefulElements.indexOf(parentNode.tagName.toLowerCase()) > -1) {\n      parentIsUsefulElement = true;\n    } else {\n      var _compStyles = window.getComputedStyle(parentNode);\n\n      if (_compStyles && _compStyles.getPropertyValue('cursor') === 'pointer') {\n        parentIsUsefulElement = true;\n      }\n    }\n\n    targetElementList.push(parentNode);\n    curEl = parentNode;\n  }\n\n  var compStyles = window.getComputedStyle(el);\n\n  if (compStyles && compStyles.getPropertyValue('cursor') === 'pointer' && event.type === 'click') {\n    return true;\n  }\n\n  var tag = el.tagName.toLowerCase();\n\n  switch (tag) {\n    case 'html':\n      return false;\n\n    case 'form':\n      return event.type === 'submit';\n\n    case 'input':\n      return event.type === 'change' || event.type === 'click';\n\n    case 'select':\n    case 'textarea':\n      return event.type === 'change' || event.type === 'click';\n\n    default:\n      if (parentIsUsefulElement) return event.type === 'click';\n      return event.type === 'click' && (usefulElements.indexOf(tag) > -1 || el.getAttribute('contenteditable') === 'true');\n  }\n}\n/*\n * Check whether a DOM element should be \"captured\" or if it may contain sentitive data\n * using a variety of heuristics.\n * @param {Element} el - element to check\n * @returns {boolean} whether the element should be captured\n */\n\nfunction shouldCaptureElement(el) {\n  for (var curEl = el; curEl.parentNode && !isTag(curEl, 'body'); curEl = curEl.parentNode) {\n    var classes = getClassName(curEl).split(' ');\n\n    if (_.includes(classes, 'ph-sensitive') || _.includes(classes, 'ph-no-capture')) {\n      return false;\n    }\n  }\n\n  if (_.includes(getClassName(el).split(' '), 'ph-include')) {\n    return true;\n  } // don't include hidden or password fields\n\n\n  var type = el.type || '';\n\n  if (typeof type === 'string') {\n    // it's possible for el.type to be a DOM element if el is a form with a child input[name=\"type\"]\n    switch (type.toLowerCase()) {\n      case 'hidden':\n        return false;\n\n      case 'password':\n        return false;\n    }\n  } // filter out data from fields that look like sensitive fields\n\n\n  var name = el.name || el.id || '';\n\n  if (typeof name === 'string') {\n    // it's possible for el.name or el.id to be a DOM element if el is a form with a child input[name=\"name\"]\n    var sensitiveNameRegex = /^cc|cardnum|ccnum|creditcard|csc|cvc|cvv|exp|pass|pwd|routing|seccode|securitycode|securitynum|socialsec|socsec|ssn/i;\n\n    if (sensitiveNameRegex.test(name.replace(/[^a-zA-Z0-9]/g, ''))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*\n * Check whether a DOM element is 'sensitive' and we should only capture limited data\n * @param {Element} el - element to check\n * @returns {boolean} whether the element should be captured\n */\n\nfunction isSensitiveElement(el) {\n  // don't send data from inputs or similar elements since there will always be\n  // a risk of clientside javascript placing sensitive data in attributes\n  if (isTag(el, 'input') && el.type != 'button' || isTag(el, 'select') || isTag(el, 'textarea') || el.getAttribute('contenteditable') === 'true') {\n    return true;\n  }\n\n  return false;\n}\n/*\n * Check whether a string value should be \"captured\" or if it may contain sentitive data\n * using a variety of heuristics.\n * @param {string} value - string value to check\n * @returns {boolean} whether the element should be captured\n */\n\nfunction shouldCaptureValue(value) {\n  if (value === null || _.isUndefined(value)) {\n    return false;\n  }\n\n  if (typeof value === 'string') {\n    value = _.trim(value); // check to see if input value looks like a credit card number\n    // see: https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9781449327453/ch04s20.html\n\n    var ccRegex = /^(?:(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11}))$/;\n\n    if (ccRegex.test((value || '').replace(/[- ]/g, ''))) {\n      return false;\n    } // check to see if input value looks like a social security number\n\n\n    var ssnRegex = /(^\\d{3}-?\\d{2}-?\\d{4}$)/;\n\n    if (ssnRegex.test(value)) {\n      return false;\n    }\n  }\n\n  return true;\n}\nfunction loadScript(scriptUrlToLoad, callback) {\n  var scriptTag = document.createElement('script');\n  scriptTag.type = 'text/javascript';\n  scriptTag.src = scriptUrlToLoad;\n  scriptTag.onload = callback;\n  var scripts = document.getElementsByTagName('script');\n\n  if (scripts.length > 0) {\n    scripts[0].parentNode.insertBefore(scriptTag, scripts[0]);\n  } else {\n    document.body.appendChild(scriptTag);\n  }\n}\n\n// Naive rage click implementation: If mouse has not moved than RAGE_CLICK_THRESHOLD_PX\n// over RAGE_CLICK_CLICK_COUNT clicks with max RAGE_CLICK_TIMEOUT_MS between clicks, it's\n// counted as a rage click\nvar RAGE_CLICK_THRESHOLD_PX = 30;\nvar RAGE_CLICK_TIMEOUT_MS = 1000;\nvar RAGE_CLICK_CLICK_COUNT = 3;\n\nvar RageClick = /*#__PURE__*/function () {\n  function RageClick(instance) {\n    var enabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : instance.get_config('rageclick');\n\n    _classCallCheck(this, RageClick);\n\n    this.clicks = [];\n    this.instance = instance;\n    this.enabled = enabled;\n  }\n\n  _createClass(RageClick, [{\n    key: \"click\",\n    value: function click(x, y, timestamp) {\n      if (!this.enabled) {\n        return;\n      }\n\n      var lastClick = this.clicks[this.clicks.length - 1];\n\n      if (lastClick && Math.abs(x - lastClick.x) + Math.abs(y - lastClick.y) < RAGE_CLICK_THRESHOLD_PX && timestamp - lastClick.timestamp < RAGE_CLICK_TIMEOUT_MS) {\n        this.clicks.push({\n          x: x,\n          y: y,\n          timestamp: timestamp\n        });\n\n        if (this.clicks.length === RAGE_CLICK_CLICK_COUNT) {\n          this.instance.capture('$rageclick');\n        }\n      } else {\n        this.clicks = [{\n          x: x,\n          y: y,\n          timestamp: timestamp\n        }];\n      }\n    }\n  }]);\n\n  return RageClick;\n}();\n\nvar autocapture = {\n  _initializedTokens: [],\n  _previousElementSibling: function _previousElementSibling(el) {\n    if (el.previousElementSibling) {\n      return el.previousElementSibling;\n    } else {\n      do {\n        el = el.previousSibling;\n      } while (el && !isElementNode(el));\n\n      return el;\n    }\n  },\n  _getPropertiesFromElement: function _getPropertiesFromElement(elem, maskInputs, maskText) {\n    var tag_name = elem.tagName.toLowerCase();\n    var props = {\n      tag_name: tag_name\n    };\n\n    if (usefulElements.indexOf(tag_name) > -1 && !maskText) {\n      props['$el_text'] = getSafeText(elem);\n    }\n\n    var classes = getClassName(elem);\n    if (classes.length > 0) props['classes'] = classes.split(' ').filter(function (c) {\n      return c !== '';\n    });\n\n    _.each(elem.attributes, function (attr) {\n      // Only capture attributes we know are safe\n      if (isSensitiveElement(elem) && ['name', 'id', 'class'].indexOf(attr.name) === -1) return;\n\n      if (!maskInputs && shouldCaptureValue(attr.value)) {\n        props['attr__' + attr.name] = attr.value;\n      }\n    });\n\n    var nthChild = 1;\n    var nthOfType = 1;\n    var currentElem = elem;\n\n    while (currentElem = this._previousElementSibling(currentElem)) {\n      // eslint-disable-line no-cond-assign\n      nthChild++;\n\n      if (currentElem.tagName === elem.tagName) {\n        nthOfType++;\n      }\n    }\n\n    props['nth_child'] = nthChild;\n    props['nth_of_type'] = nthOfType;\n    return props;\n  },\n  _getDefaultProperties: function _getDefaultProperties(eventType) {\n    return {\n      $event_type: eventType,\n      $ce_version: 1\n    };\n  },\n  _extractCustomPropertyValue: function _extractCustomPropertyValue(customProperty) {\n    var propValues = [];\n\n    _.each(document.querySelectorAll(customProperty['css_selector']), function (matchedElem) {\n      var value;\n\n      if (['input', 'select'].indexOf(matchedElem.tagName.toLowerCase()) > -1) {\n        value = matchedElem['value'];\n      } else if (matchedElem['textContent']) {\n        value = matchedElem['textContent'];\n      }\n\n      if (shouldCaptureValue(value)) {\n        propValues.push(value);\n      }\n    });\n\n    return propValues.join(', ');\n  },\n  _getCustomProperties: function _getCustomProperties(targetElementList) {\n    var props = {};\n\n    _.each(this._customProperties, function (customProperty) {\n      _.each(customProperty['event_selectors'], function (eventSelector) {\n        var eventElements = document.querySelectorAll(eventSelector);\n\n        _.each(eventElements, function (eventElement) {\n          if (_.includes(targetElementList, eventElement) && shouldCaptureElement(eventElement)) {\n            props[customProperty['name']] = this._extractCustomPropertyValue(customProperty);\n          }\n        }, this);\n      }, this);\n    }, this);\n\n    return props;\n  },\n  _getEventTarget: function _getEventTarget(e) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Event/target#Compatibility_notes\n    if (typeof e.target === 'undefined') {\n      return e.srcElement;\n    } else {\n      if (e.target.shadowRoot) {\n        return e.composedPath()[0];\n      }\n\n      return e.target;\n    }\n  },\n  _captureEvent: function _captureEvent(e, instance) {\n    /*** Don't mess with this code without running IE8 tests on it ***/\n    var target = this._getEventTarget(e);\n\n    if (isTextNode(target)) {\n      // defeat Safari bug (see: http://www.quirksmode.org/js/events_properties.html)\n      target = target.parentNode;\n    }\n\n    if (e.type === 'click') {\n      this.rageclicks.click(e.clientX, e.clientY, new Date().getTime());\n    }\n\n    if (shouldCaptureDomEvent(target, e)) {\n      var targetElementList = [target];\n      var curEl = target;\n\n      while (curEl.parentNode && !isTag(curEl, 'body')) {\n        if (curEl.parentNode.nodeType === 11) {\n          targetElementList.push(curEl.parentNode.host);\n          curEl = curEl.parentNode.host;\n          continue;\n        }\n\n        targetElementList.push(curEl.parentNode);\n        curEl = curEl.parentNode;\n      }\n\n      var elementsJson = [];\n      var href,\n          explicitNoCapture = false;\n\n      _.each(targetElementList, function (el) {\n        var shouldCaptureEl = shouldCaptureElement(el); // if the element or a parent element is an anchor tag\n        // include the href as a property\n\n        if (el.tagName.toLowerCase() === 'a') {\n          href = el.getAttribute('href');\n          href = shouldCaptureEl && shouldCaptureValue(href) && href;\n        } // allow users to programmatically prevent capturing of elements by adding class 'ph-no-capture'\n\n\n        var classes = getClassName(el).split(' ');\n\n        if (_.includes(classes, 'ph-no-capture')) {\n          explicitNoCapture = true;\n        }\n\n        elementsJson.push(this._getPropertiesFromElement(el, instance.get_config('mask_all_element_attributes'), instance.get_config('mask_all_text')));\n      }, this);\n\n      if (!instance.get_config('mask_all_text')) {\n        elementsJson[0]['$el_text'] = getSafeText(target);\n      }\n\n      if (href) {\n        elementsJson[0]['attr__href'] = href;\n      }\n\n      if (explicitNoCapture) {\n        return false;\n      }\n\n      var props = _.extend(this._getDefaultProperties(e.type), {\n        $elements: elementsJson\n      }, this._getCustomProperties(targetElementList));\n\n      instance.capture('$autocapture', props);\n      return true;\n    }\n  },\n  // only reason is to stub for unit tests\n  // since you can't override window.location props\n  _navigate: function _navigate(href) {\n    window.location.href = href;\n  },\n  _addDomEventHandlers: function _addDomEventHandlers(instance) {\n    var handler = _.bind(function (e) {\n      e = e || window.event;\n\n      this._captureEvent(e, instance);\n    }, this);\n\n    _.register_event(document, 'submit', handler, false, true);\n\n    _.register_event(document, 'change', handler, false, true);\n\n    _.register_event(document, 'click', handler, false, true);\n  },\n  _customProperties: {},\n  init: function init(instance) {\n    instance.toolbar.maybeLoadEditor();\n    this.rageclicks = new RageClick(instance);\n  },\n  afterDecideResponse: function afterDecideResponse(response, instance) {\n    var token = instance.get_config('token');\n\n    if (this._initializedTokens.indexOf(token) > -1) {\n      console.log('autocapture already initialized for token \"' + token + '\"');\n      return;\n    }\n\n    this._initializedTokens.push(token);\n\n    if (response && response['config'] && response['config']['enable_collect_everything'] === true && instance.get_config('autocapture')) {\n      if (response['custom_properties']) {\n        this._customProperties = response['custom_properties'];\n      }\n\n      this._addDomEventHandlers(instance);\n    } else {\n      instance['__autocapture_enabled'] = false;\n    }\n  },\n  // this is a mechanism to ramp up CE with no server-side interaction.\n  // when CE is active, every page load results in a decide request. we\n  // need to gently ramp this up so we don't overload decide. this decides\n  // deterministically if CE is enabled for this project by modding the char\n  // value of the project token.\n  enabledForProject: function enabledForProject(token, numBuckets, numEnabledBuckets) {\n    numBuckets = !_.isUndefined(numBuckets) ? numBuckets : 10;\n    numEnabledBuckets = !_.isUndefined(numEnabledBuckets) ? numEnabledBuckets : 10;\n    var charCodeSum = 0;\n\n    for (var i = 0; i < token.length; i++) {\n      charCodeSum += token.charCodeAt(i);\n    }\n\n    return charCodeSum % numBuckets < numEnabledBuckets;\n  },\n  isBrowserSupported: function isBrowserSupported() {\n    return _.isFunction(document.querySelectorAll);\n  }\n};\n\n_.bind_instance_methods(autocapture);\n\n_.safewrap_instance_methods(autocapture);\n\nvar DOMAIN_MATCH_REGEX = /[a-z0-9][a-z0-9-]+\\.[a-z.]{2,6}$/i; // Methods partially borrowed from quirksmode.org/js/cookies.html\n\nvar cookieStore = {\n  get: function get(name) {\n    try {\n      var nameEQ = name + '=';\n      var ca = document.cookie.split(';');\n\n      for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n\n        while (c.charAt(0) == ' ') {\n          c = c.substring(1, c.length);\n        }\n\n        if (c.indexOf(nameEQ) === 0) {\n          return decodeURIComponent(c.substring(nameEQ.length, c.length));\n        }\n      }\n    } catch (err) {}\n\n    return null;\n  },\n  parse: function parse(name) {\n    var cookie;\n\n    try {\n      cookie = JSON.parse(cookieStore.get(name)) || {};\n    } catch (err) {// noop\n    }\n\n    return cookie;\n  },\n  set: function set(name, value, days, cross_subdomain, is_secure) {\n    try {\n      var cdomain = '',\n          expires = '',\n          secure = '';\n\n      if (cross_subdomain) {\n        var matches = document.location.hostname.match(DOMAIN_MATCH_REGEX),\n            domain = matches ? matches[0] : '';\n        cdomain = domain ? '; domain=.' + domain : '';\n      }\n\n      if (days) {\n        var date = new Date();\n        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n        expires = '; expires=' + date.toGMTString();\n      }\n\n      if (is_secure) {\n        secure = '; secure';\n      }\n\n      var new_cookie_val = name + '=' + encodeURIComponent(value) + expires + '; path=/' + cdomain + secure;\n      document.cookie = new_cookie_val;\n      return new_cookie_val;\n    } catch (err) {\n      return;\n    }\n  },\n  remove: function remove(name, cross_subdomain) {\n    try {\n      cookieStore.set(name, '', -1, cross_subdomain);\n    } catch (err) {\n      return;\n    }\n  }\n};\nvar _localStorage_supported = null;\nvar localStore = {\n  is_supported: function is_supported() {\n    if (_localStorage_supported !== null) {\n      return _localStorage_supported;\n    }\n\n    var supported = true;\n\n    try {\n      var key = '__mplssupport__',\n          val = 'xyz';\n      localStore.set(key, val);\n\n      if (localStore.get(key) !== val) {\n        supported = false;\n      }\n\n      localStore.remove(key);\n    } catch (err) {\n      supported = false;\n    }\n\n    if (!supported) {\n      console$1.error('localStorage unsupported; falling back to cookie store');\n    }\n\n    _localStorage_supported = supported;\n    return supported;\n  },\n  error: function error(msg) {\n    console$1.error('localStorage error: ' + msg);\n  },\n  get: function get(name) {\n    try {\n      return window.localStorage.getItem(name);\n    } catch (err) {\n      localStore.error(err);\n    }\n\n    return null;\n  },\n  parse: function parse(name) {\n    try {\n      return JSON.parse(localStore.get(name)) || {};\n    } catch (err) {// noop\n    }\n\n    return null;\n  },\n  set: function set(name, value) {\n    try {\n      window.localStorage.setItem(name, value);\n    } catch (err) {\n      localStore.error(err);\n    }\n  },\n  remove: function remove(name) {\n    try {\n      window.localStorage.removeItem(name);\n    } catch (err) {\n      localStore.error(err);\n    }\n  }\n};\nvar memoryStorage = {}; // Storage that only lasts the length of the pageview if we don't want to use cookies\n\nvar memoryStore = {\n  is_supported: function is_supported() {\n    return true;\n  },\n  error: function error(msg) {\n    console$1.error('memoryStorage error: ' + msg);\n  },\n  parse: function parse(name) {\n    return memoryStorage[name] || null;\n  },\n  set: function set(name, value) {\n    memoryStorage[name] = value;\n  },\n  remove: function remove(name) {\n    delete memoryStorage[name];\n  }\n};\n\n/**\n * GDPR utils\n *\n * The General Data Protection Regulation (GDPR) is a regulation in EU law on data protection\n * and privacy for all individuals within the European Union. It addresses the export of personal\n * data outside the EU. The GDPR aims primarily to give control back to citizens and residents\n * over their personal data and to simplify the regulatory environment for international business\n * by unifying the regulation within the EU.\n *\n * This set of utilities is intended to enable opt in/out functionality in the PostHog JS SDK.\n * These functions are used internally by the SDK and are not intended to be publicly exposed.\n */\n/**\n * A function used to capture a PostHog event (e.g. PostHogLib.capture)\n * @callback captureFunction\n * @param {String} event_name The name of the event. This can be anything the user does - 'Button Click', 'Sign Up', 'Item Purchased', etc.\n * @param {Object} [properties] A set of properties to include with the event you're sending. These describe the user who did the event or details about the event itself.\n * @param {Function} [callback] If provided, the callback function will be called after capturing the event.\n */\n\n/** Public **/\n\nvar GDPR_DEFAULT_PERSISTENCE_PREFIX = '__ph_opt_in_out_';\n/**\n * Opt the user in to data capturing and cookies/localstorage for the given token\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {captureFunction} [options.capture] - function used for capturing a PostHog event to record the opt-in action\n * @param {string} [options.captureEventName] - event name to be used for capturing the opt-in action\n * @param {Object} [options.captureProperties] - set of properties to be captured along with the opt-in action\n * @param {string} [options.persistenceType] Persistence mechanism used - cookie or localStorage\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @param {Number} [options.cookieExpiration] - number of days until the opt-in cookie expires\n * @param {string} [options.cookieDomain] - custom cookie domain\n * @param {boolean} [options.crossSiteCookie] - whether the opt-in cookie is set as cross-site-enabled\n * @param {boolean} [options.crossSubdomainCookie] - whether the opt-in cookie is set as cross-subdomain or not\n * @param {boolean} [options.secureCookie] - whether the opt-in cookie is set as secure or not\n */\n\nfunction optIn(token, options) {\n  _optInOut(true, token, options);\n}\n/**\n * Opt the user out of data capturing and cookies/localstorage for the given token\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistenceType] Persistence mechanism used - cookie or localStorage\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @param {Number} [options.cookieExpiration] - number of days until the opt-out cookie expires\n * @param {string} [options.cookieDomain] - custom cookie domain\n * @param {boolean} [options.crossSiteCookie] - whether the opt-in cookie is set as cross-site-enabled\n * @param {boolean} [options.crossSubdomainCookie] - whether the opt-out cookie is set as cross-subdomain or not\n * @param {boolean} [options.secureCookie] - whether the opt-out cookie is set as secure or not\n */\n\nfunction optOut(token, options) {\n  _optInOut(false, token, options);\n}\n/**\n * Check whether the user has opted in to data capturing and cookies/localstorage for the given token\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistenceType] Persistence mechanism used - cookie or localStorage\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @returns {boolean} whether the user has opted in to the given opt type\n */\n\nfunction hasOptedIn(token, options) {\n  return _getStorageValue(token, options) === '1';\n}\n/**\n * Check whether the user has opted out of data capturing and cookies/localstorage for the given token\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistenceType] Persistence mechanism used - cookie or localStorage\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @param {boolean} [options.respectDnt] - flag to take browser DNT setting into account\n * @returns {boolean} whether the user has opted out of the given opt type\n */\n\nfunction hasOptedOut(token, options) {\n  if (_hasDoNotTrackFlagOn(options)) {\n    return true;\n  }\n\n  return _getStorageValue(token, options) === '0';\n}\n/**\n * Wrap a PostHogLib method with a check for whether the user is opted out of data capturing and cookies/localstorage for the given token\n * If the user has opted out, return early instead of executing the method.\n * If a callback argument was provided, execute it passing the 0 error code.\n * @param {function} method - wrapped method to be executed if the user has not opted out\n * @returns {*} the result of executing method OR undefined if the user has opted out\n */\n\nfunction addOptOutCheckPostHogLib(method, silenceErrors) {\n  return _addOptOutCheck(method, function (name) {\n    return this.get_config(name);\n  }, silenceErrors);\n}\n/**\n * Wrap a PostHogPeople method with a check for whether the user is opted out of data capturing and cookies/localstorage for the given token\n * If the user has opted out, return early instead of executing the method.\n * If a callback argument was provided, execute it passing the 0 error code.\n * @param {function} method - wrapped method to be executed if the user has not opted out\n * @returns {*} the result of executing method OR undefined if the user has opted out\n */\n\nfunction addOptOutCheckPostHogPeople(method, silenceErrors) {\n  return _addOptOutCheck(method, function (name) {\n    return this._get_config(name);\n  }, silenceErrors);\n}\n/**\n * Clear the user's opt in/out status of data capturing and cookies/localstorage for the given token\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistenceType] Persistence mechanism used - cookie or localStorage\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @param {Number} [options.cookieExpiration] - number of days until the opt-in cookie expires\n * @param {string} [options.cookieDomain] - custom cookie domain\n * @param {boolean} [options.crossSiteCookie] - whether the opt-in cookie is set as cross-site-enabled\n * @param {boolean} [options.crossSubdomainCookie] - whether the opt-in cookie is set as cross-subdomain or not\n * @param {boolean} [options.secureCookie] - whether the opt-in cookie is set as secure or not\n */\n\nfunction clearOptInOut(token, options) {\n  options = options || {};\n\n  _getStorage(options).remove(_getStorageKey(token, options), !!options.crossSubdomainCookie, options.cookieDomain);\n}\n/** Private **/\n\n/**\n * Get storage util\n * @param {Object} [options]\n * @param {string} [options.persistenceType]\n * @returns {object} either cookieStore or localStore\n */\n\nfunction _getStorage(options) {\n  options = options || {};\n  return options.persistenceType === 'localStorage' ? localStore : cookieStore;\n}\n/**\n * Get the name of the cookie that is used for the given opt type (capturing, cookie, etc.)\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @returns {string} the name of the cookie for the given opt type\n */\n\n\nfunction _getStorageKey(token, options) {\n  options = options || {};\n  return (options.persistencePrefix || GDPR_DEFAULT_PERSISTENCE_PREFIX) + token;\n}\n/**\n * Get the value of the cookie that is used for the given opt type (capturing, cookie, etc.)\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @returns {string} the value of the cookie for the given opt type\n */\n\n\nfunction _getStorageValue(token, options) {\n  return _getStorage(options).get(_getStorageKey(token, options));\n}\n/**\n * Check whether the user has set the DNT/doNotTrack setting to true in their browser\n * @param {Object} [options]\n * @param {string} [options.window] - alternate window object to check; used to force various DNT settings in browser tests\n * @param {boolean} [options.respectDnt] - flag to take browser DNT setting into account\n * @returns {boolean} whether the DNT setting is true\n */\n\n\nfunction _hasDoNotTrackFlagOn(options) {\n  if (options && options.respectDnt) {\n    var win$1 = options && options.window || win;\n    var nav = win$1['navigator'] || {};\n    var hasDntOn = false;\n\n    _.each([nav['doNotTrack'], // standard\n    nav['msDoNotTrack'], win$1['doNotTrack']], function (dntValue) {\n      if (_.includes([true, 1, '1', 'yes'], dntValue)) {\n        hasDntOn = true;\n      }\n    });\n\n    return hasDntOn;\n  }\n\n  return false;\n}\n/**\n * Set cookie/localstorage for the user indicating that they are opted in or out for the given opt type\n * @param {boolean} optValue - whether to opt the user in or out for the given opt type\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {captureFunction} [options.capture] - function used for capturing a PostHog event to record the opt-in action\n * @param {string} [options.captureEventName] - event name to be used for capturing the opt-in action\n * @param {Object} [options.captureProperties] - set of properties to be captured along with the opt-in action\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @param {Number} [options.cookieExpiration] - number of days until the opt-in cookie expires\n * @param {string} [options.cookieDomain] - custom cookie domain\n * @param {boolean} [options.crossSiteCookie] - whether the opt-in cookie is set as cross-site-enabled\n * @param {boolean} [options.crossSubdomainCookie] - whether the opt-in cookie is set as cross-subdomain or not\n * @param {boolean} [options.secureCookie] - whether the opt-in cookie is set as secure or not\n */\n\n\nfunction _optInOut(optValue, token, options) {\n  if (!_.isString(token) || !token.length) {\n    console.error('gdpr.' + (optValue ? 'optIn' : 'optOut') + ' called with an invalid token');\n    return;\n  }\n\n  options = options || {};\n\n  _getStorage(options).set(_getStorageKey(token, options), optValue ? 1 : 0, _.isNumber(options.cookieExpiration) ? options.cookieExpiration : null, !!options.crossSubdomainCookie, !!options.secureCookie, !!options.crossSiteCookie, options.cookieDomain);\n\n  if (options.capture && optValue) {\n    // only capture event if opting in (optValue=true)\n    options.capture(options.captureEventName || '$opt_in', options.captureProperties, {\n      send_immediately: true\n    });\n  }\n}\n/**\n * Wrap a method with a check for whether the user is opted out of data capturing and cookies/localstorage for the given token\n * If the user has opted out, return early instead of executing the method.\n * If a callback argument was provided, execute it passing the 0 error code.\n * @param {function} method - wrapped method to be executed if the user has not opted out\n * @param {function} getConfigValue - getter function for the PostHog API token and other options to be used with opt-out check\n * @returns {*} the result of executing method OR undefined if the user has opted out\n */\n\n\nfunction _addOptOutCheck(method, getConfigValue, silenceErrors) {\n  return function () {\n    var optedOut = false;\n\n    try {\n      var token = getConfigValue.call(this, 'token');\n      var respectDnt = getConfigValue.call(this, 'respect_dnt');\n      var persistenceType = getConfigValue.call(this, 'opt_out_capturing_persistence_type');\n      var persistencePrefix = getConfigValue.call(this, 'opt_out_capturing_cookie_prefix');\n      var win = getConfigValue.call(this, 'window'); // used to override window during browser tests\n\n      if (token) {\n        // if there was an issue getting the token, continue method execution as normal\n        optedOut = hasOptedOut(token, {\n          respectDnt: respectDnt,\n          persistenceType: persistenceType,\n          persistencePrefix: persistencePrefix,\n          window: win\n        });\n      }\n    } catch (err) {\n      if (!silenceErrors) {\n        console.error('Unexpected error when checking capturing opt-out status: ' + err);\n      }\n    }\n\n    if (!optedOut) {\n      return method.apply(this, arguments);\n    }\n\n    var callback = arguments[arguments.length - 1];\n\n    if (typeof callback === 'function') {\n      callback(0);\n    }\n\n    return;\n  };\n}\n\n/* eslint camelcase: \"off\" */\n/** @const */\n\nvar SET_ACTION = '$set';\n/** @const */\n\nvar SET_ONCE_ACTION = '$set_once'; // Internal methods for posthog.people API.\n// These methods shouldn't involve network I/O.\n\nvar apiActions = {\n  set_action: function set_action(prop, to) {\n    var data = {};\n    var $set = {};\n\n    if (_.isObject(prop)) {\n      _.each(prop, function (v, k) {\n        if (!this._is_reserved_property(k)) {\n          $set[k] = v;\n        }\n      }, this);\n    } else {\n      $set[prop] = to;\n    }\n\n    data[SET_ACTION] = $set;\n    return data;\n  },\n  set_once_action: function set_once_action(prop, to) {\n    var data = {};\n    var $set_once = {};\n\n    if (_.isObject(prop)) {\n      _.each(prop, function (v, k) {\n        if (!this._is_reserved_property(k)) {\n          $set_once[k] = v;\n        }\n      }, this);\n    } else {\n      $set_once[prop] = to;\n    }\n\n    data[SET_ONCE_ACTION] = $set_once;\n    return data;\n  }\n};\n\n/* eslint camelcase: \"off\" */\n/**\n * PostHog People Object\n * @constructor\n */\n\nvar PostHogPeople = function PostHogPeople() {};\n\n_.extend(PostHogPeople.prototype, apiActions);\n\nPostHogPeople.prototype._init = function (posthog_instance) {\n  this._posthog = posthog_instance;\n};\n/*\n * Set properties on a user record.\n *\n * ### Usage:\n *\n *     posthog.people.set('gender', 'm');\n *\n *     // or set multiple properties at once\n *     posthog.people.set({\n *         'Company': 'Acme',\n *         'Plan': 'Premium',\n *         'Upgrade date': new Date()\n *     });\n *     // properties can be strings, integers, dates, or lists\n *\n * @param {Object|String} prop If a string, this is the name of the property. If an object, this is an associative array of names and values.\n * @param {*} [to] A value to set on the given property name\n * @param {Function} [callback] If provided, the callback will be called after captureing the event.\n */\n\n\nPostHogPeople.prototype.set = addOptOutCheckPostHogPeople(function (prop, to, callback) {\n  var data = this.set_action(prop, to);\n\n  if (_.isObject(prop)) {\n    callback = to;\n  } // make sure that the referrer info has been updated and saved\n\n\n  if (this._get_config('save_referrer')) {\n    this._posthog['persistence'].update_referrer_info(document.referrer);\n  } // update $set object with default people properties\n\n\n  data[SET_ACTION] = _.extend({}, _.info.people_properties(), this._posthog['persistence'].get_referrer_info(), data[SET_ACTION]);\n  return this._send_request(data, callback);\n});\n/*\n * Set properties on a user record, only if they do not yet exist.\n * This will not overwrite previous people property values, unlike\n * people.set().\n *\n * ### Usage:\n *\n *     posthog.people.set_once('First Login Date', new Date());\n *\n *     // or set multiple properties at once\n *     posthog.people.set_once({\n *         'First Login Date': new Date(),\n *         'Starting Plan': 'Premium'\n *     });\n *\n *     // properties can be strings, integers or dates\n *\n * @param {Object|String} prop If a string, this is the name of the property. If an object, this is an associative array of names and values.\n * @param {*} [to] A value to set on the given property name\n * @param {Function} [callback] If provided, the callback will be called after captureing the event.\n */\n\nPostHogPeople.prototype.set_once = addOptOutCheckPostHogPeople(function (prop, to, callback) {\n  var data = this.set_once_action(prop, to);\n\n  if (_.isObject(prop)) {\n    callback = to;\n  }\n\n  return this._send_request(data, callback);\n});\n\nPostHogPeople.prototype.toString = function () {\n  return this._posthog.toString() + '.people';\n};\n\nPostHogPeople.prototype._send_request = function (data, callback) {\n  data['$token'] = this._get_config('token');\n  data['$distinct_id'] = this._posthog.get_distinct_id();\n\n  var device_id = this._posthog.get_property('$device_id');\n\n  var user_id = this._posthog.get_property('$user_id');\n\n  var had_persisted_distinct_id = this._posthog.get_property('$had_persisted_distinct_id');\n\n  if (device_id) {\n    data['$device_id'] = device_id;\n  }\n\n  if (user_id) {\n    data['$user_id'] = user_id;\n  }\n\n  if (had_persisted_distinct_id) {\n    data['$had_persisted_distinct_id'] = had_persisted_distinct_id;\n  }\n\n  var date_encoded_data = _.encodeDates(data);\n\n  var truncated_data = _.copyAndTruncateStrings(date_encoded_data, this._get_config('properties_string_max_length'));\n\n  var json_data = JSON.stringify(date_encoded_data);\n\n  var encoded_data = _.base64Encode(json_data);\n\n  this._posthog._send_request(this._get_config('api_host') + '/engage/', {\n    data: encoded_data\n  }, {}, this._posthog._prepare_callback(callback, truncated_data));\n\n  return truncated_data;\n};\n\nPostHogPeople.prototype._get_config = function (conf_var) {\n  return this._posthog.get_config(conf_var);\n};\n\nPostHogPeople.prototype._is_reserved_property = function (prop) {\n  return prop === '$distinct_id' || prop === '$token' || prop === '$device_id' || prop === '$user_id' || prop === '$had_persisted_distinct_id';\n}; // PostHogPeople Exports\n\n\nPostHogPeople.prototype['set'] = PostHogPeople.prototype.set;\nPostHogPeople.prototype['set_once'] = PostHogPeople.prototype.set_once;\nPostHogPeople.prototype['toString'] = PostHogPeople.prototype.toString;\n\nvar PostHogFeatureFlags = /*#__PURE__*/function () {\n  function PostHogFeatureFlags(instance) {\n    _classCallCheck(this, PostHogFeatureFlags);\n\n    this.instance = instance;\n    this._override_warning = false;\n    this.flagCallReported = {};\n  }\n\n  _createClass(PostHogFeatureFlags, [{\n    key: \"getFlags\",\n    value: function getFlags() {\n      if (this.instance.get_property('$override_feature_flags')) {\n        if (!this._override_warning) console.warn('[PostHog] Overriding feature flags! Feature flags from server were: ' + JSON.stringify(this.instance.get_property('$active_feature_flags')));\n        this._override_warning = true;\n        return this.instance.get_property('$override_feature_flags');\n      }\n\n      return this.instance.get_property('$active_feature_flags');\n    }\n  }, {\n    key: \"reloadFeatureFlags\",\n    value: function reloadFeatureFlags() {\n      var _this = this;\n\n      var parseDecideResponse = function parseDecideResponse(response) {\n        if (response['featureFlags']) {\n          _this.instance.persistence && _this.instance.persistence.register({\n            $active_feature_flags: response['featureFlags']\n          });\n        } else {\n          _this.instance.persistence && _this.instance.persistence.unregister('$active_feature_flags');\n        }\n      };\n\n      var token = this.instance.get_config('token');\n      var json_data = JSON.stringify({\n        token: token,\n        distinct_id: this.instance.get_distinct_id()\n      });\n\n      var encoded_data = _.base64Encode(json_data);\n\n      this.instance._send_request(this.instance.get_config('api_host') + '/decide/', {\n        data: encoded_data\n      }, {\n        method: 'POST'\n      }, this.instance._prepare_callback(parseDecideResponse));\n    }\n    /*\n     * See if feature flag is enabled for user.\n     *\n     * ### Usage:\n     *\n     *     if(posthog.isFeatureEnabled('beta-feature')) { // do something }\n     *\n     * @param {Object|String} prop Key of the feature flag.\n     * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n     */\n\n  }, {\n    key: \"isFeatureEnabled\",\n    value: function isFeatureEnabled(key) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this.getFlags()) {\n        console.warn('isFeatureEnabled for key \"' + key + '\" failed. Feature flags didn\\'t load in time.');\n        return false;\n      }\n\n      var flagEnabled = this.getFlags().indexOf(key) > -1;\n\n      if ((options.send_event || !('send_event' in options)) && !this.flagCallReported[key]) {\n        this.flagCallReported[key] = true;\n        this.instance.capture('$feature_flag_called', {\n          $feature_flag: key,\n          $feature_flag_response: flagEnabled\n        });\n      }\n\n      return flagEnabled;\n    }\n    /*\n     * Override feature flags for debugging.\n     *\n     * ### Usage:\n     *\n     *     posthog.feature_flags.override(['beta-feature']) or posthog.feature_flags.override(false)\n     *\n     * @param {Object|String} prop Flags to override with.\n     */\n\n  }, {\n    key: \"override\",\n    value: function override(flags) {\n      if (flags === false) return this.instance.persistence.unregister('$override_feature_flags');\n      this.instance.persistence.register('$override_feature_flags', flags);\n    }\n  }]);\n\n  return PostHogFeatureFlags;\n}();\n\n/* eslint camelcase: \"off\" */\n/*\n * Constants\n */\n\n/** @const */\n\nvar SET_QUEUE_KEY = '__mps';\n/** @const */\n\nvar SET_ONCE_QUEUE_KEY = '__mpso';\n/** @const */\n\nvar UNSET_QUEUE_KEY = '__mpus';\n/** @const */\n\nvar ADD_QUEUE_KEY = '__mpa';\n/** @const */\n\nvar APPEND_QUEUE_KEY = '__mpap';\n/** @const */\n\nvar REMOVE_QUEUE_KEY = '__mpr';\n/** @const */\n\nvar UNION_QUEUE_KEY = '__mpu'; // This key is deprecated, but we want to check for it to see whether aliasing is allowed.\n\n/** @const */\n\nvar PEOPLE_DISTINCT_ID_KEY = '$people_distinct_id';\n/** @const */\n\nvar ALIAS_ID_KEY = '__alias';\n/** @const */\n\nvar CAMPAIGN_IDS_KEY = '__cmpns';\n/** @const */\n\nvar EVENT_TIMERS_KEY = '__timers';\n/** @const */\n\nvar SESSION_RECORDING_ENABLED = '$session_recording_enabled';\n/** @const */\n\nvar SESSION_ID = '$sesid';\n/** @const */\n\nvar RESERVED_PROPERTIES = [SET_QUEUE_KEY, SET_ONCE_QUEUE_KEY, UNSET_QUEUE_KEY, ADD_QUEUE_KEY, APPEND_QUEUE_KEY, REMOVE_QUEUE_KEY, UNION_QUEUE_KEY, PEOPLE_DISTINCT_ID_KEY, ALIAS_ID_KEY, CAMPAIGN_IDS_KEY, EVENT_TIMERS_KEY, SESSION_RECORDING_ENABLED, SESSION_ID];\n/**\n * PostHog Persistence Object\n * @constructor\n */\n\nvar PostHogPersistence = function PostHogPersistence(config) {\n  // clean chars that aren't accepted by the http spec for cookie values\n  // https://datatracker.ietf.org/doc/html/rfc2616#section-2.2\n  var token = '';\n\n  if (config['token']) {\n    token = config['token'].replace(/\\+/g, 'PL').replace(/\\//g, 'SL').replace(/=/g, 'EQ');\n  }\n\n  this['props'] = {};\n  this.campaign_params_saved = false;\n  this['featureFlagEventHandlers'] = [];\n\n  if (config['persistence_name']) {\n    this.name = 'ph_' + config['persistence_name'];\n  } else {\n    this.name = 'ph_' + token + '_posthog';\n  }\n\n  var storage_type = config['persistence'];\n\n  if (storage_type !== 'cookie' && storage_type !== 'localStorage' && storage_type !== 'memory') {\n    console$1.critical('Unknown persistence type ' + storage_type + '; falling back to cookie');\n    storage_type = config['persistence'] = 'cookie';\n  }\n\n  if (storage_type === 'localStorage' && localStore.is_supported()) {\n    this.storage = localStore;\n  } else if (storage_type === 'memory') {\n    this.storage = memoryStore;\n  } else {\n    this.storage = cookieStore;\n  }\n\n  this.load();\n  this.update_config(config);\n  this.save();\n};\n\nPostHogPersistence.prototype.addFeatureFlagsHandler = function (handler) {\n  this.featureFlagEventHandlers.push(handler);\n  return true;\n};\n\nPostHogPersistence.prototype.receivedFeatureFlags = function (flags) {\n  this.featureFlagEventHandlers.forEach(function (handler) {\n    return handler(flags);\n  });\n};\n\nPostHogPersistence.prototype.properties = function () {\n  var p = {}; // Filter out reserved properties\n\n  _.each(this['props'], function (v, k) {\n    if (!_.include(RESERVED_PROPERTIES, k)) {\n      p[k] = v;\n    }\n  });\n\n  return p;\n};\n\nPostHogPersistence.prototype.load = function () {\n  if (this.disabled) {\n    return;\n  }\n\n  var entry = this.storage.parse(this.name);\n\n  if (entry) {\n    this['props'] = _.extend({}, entry);\n  }\n};\n\nPostHogPersistence.prototype.save = function () {\n  if (this.disabled) {\n    return;\n  }\n\n  this.storage.set(this.name, JSON.stringify(this['props']), this.expire_days, this.cross_subdomain, this.secure);\n};\n\nPostHogPersistence.prototype.remove = function () {\n  // remove both domain and subdomain cookies\n  this.storage.remove(this.name, false);\n  this.storage.remove(this.name, true);\n}; // removes the storage entry and deletes all loaded data\n// forced name for tests\n\n\nPostHogPersistence.prototype.clear = function () {\n  this.remove();\n  this['props'] = {};\n};\n/**\n * @param {Object} props\n * @param {*=} default_value\n * @param {number=} days\n */\n\n\nPostHogPersistence.prototype.register_once = function (props, default_value, days) {\n  if (_.isObject(props)) {\n    if (typeof default_value === 'undefined') {\n      default_value = 'None';\n    }\n\n    this.expire_days = typeof days === 'undefined' ? this.default_expiry : days;\n\n    if (props && props.$active_feature_flags) {\n      this.receivedFeatureFlags(props.$active_feature_flags);\n    }\n\n    _.each(props, function (val, prop) {\n      if (!this['props'].hasOwnProperty(prop) || this['props'][prop] === default_value) {\n        this['props'][prop] = val;\n      }\n    }, this);\n\n    this.save();\n    return true;\n  }\n\n  return false;\n};\n/**\n * @param {Object} props\n * @param {number=} days\n */\n\n\nPostHogPersistence.prototype.register = function (props, days) {\n  if (_.isObject(props)) {\n    this.expire_days = typeof days === 'undefined' ? this.default_expiry : days;\n\n    if (props && props.$active_feature_flags) {\n      this.receivedFeatureFlags(props.$active_feature_flags);\n    }\n\n    _.extend(this['props'], props);\n\n    this.save();\n    return true;\n  }\n\n  return false;\n};\n\nPostHogPersistence.prototype.unregister = function (prop) {\n  if (prop in this['props']) {\n    delete this['props'][prop];\n    this.save();\n\n    if (prop === '$active_feature_flags') {\n      this.receivedFeatureFlags([]);\n    }\n  }\n};\n\nPostHogPersistence.prototype.update_campaign_params = function () {\n  if (!this.campaign_params_saved) {\n    this.register_once(_.info.campaignParams());\n    this.campaign_params_saved = true;\n  }\n};\n\nPostHogPersistence.prototype.update_search_keyword = function (referrer) {\n  this.register(_.info.searchInfo(referrer));\n}; // EXPORTED METHOD, we test this directly.\n\n\nPostHogPersistence.prototype.update_referrer_info = function (referrer) {\n  // If referrer doesn't exist, we want to note the fact that it was type-in traffic.\n  // Register once, so first touch\n  this.register_once({\n    $initial_referrer: referrer || '$direct',\n    $initial_referring_domain: _.info.referringDomain(referrer) || '$direct'\n  }, ''); // Register the current referrer but override if it's different, hence register\n\n  this.register({\n    $referrer: referrer || this['props']['$referrer'] || '$direct',\n    $referring_domain: _.info.referringDomain(referrer) || this['props']['$referring_domain'] || '$direct'\n  });\n};\n\nPostHogPersistence.prototype.get_referrer_info = function () {\n  return _.strip_empty_properties({\n    $initial_referrer: this['props']['$initial_referrer'],\n    $initial_referring_domain: this['props']['$initial_referring_domain']\n  });\n}; // safely fills the passed in object with stored properties,\n// does not override any properties defined in both\n// returns the passed in object\n\n\nPostHogPersistence.prototype.safe_merge = function (props) {\n  _.each(this['props'], function (val, prop) {\n    if (!(prop in props)) {\n      props[prop] = val;\n    }\n  });\n\n  return props;\n};\n\nPostHogPersistence.prototype.update_config = function (config) {\n  this.default_expiry = this.expire_days = config['cookie_expiration'];\n  this.set_disabled(config['disable_persistence']);\n  this.set_cross_subdomain(config['cross_subdomain_cookie']);\n  this.set_secure(config['secure_cookie']);\n};\n\nPostHogPersistence.prototype.set_disabled = function (disabled) {\n  this.disabled = disabled;\n\n  if (this.disabled) {\n    this.remove();\n  } else {\n    this.save();\n  }\n};\n\nPostHogPersistence.prototype.set_cross_subdomain = function (cross_subdomain) {\n  if (cross_subdomain !== this.cross_subdomain) {\n    this.cross_subdomain = cross_subdomain;\n    this.remove();\n    this.save();\n  }\n};\n\nPostHogPersistence.prototype.get_cross_subdomain = function () {\n  return this.cross_subdomain;\n};\n\nPostHogPersistence.prototype.set_secure = function (secure) {\n  if (secure !== this.secure) {\n    this.secure = secure ? true : false;\n    this.remove();\n    this.save();\n  }\n};\n\nPostHogPersistence.prototype.set_event_timer = function (event_name, timestamp) {\n  var timers = this['props'][EVENT_TIMERS_KEY] || {};\n  timers[event_name] = timestamp;\n  this['props'][EVENT_TIMERS_KEY] = timers;\n  this.save();\n};\n\nPostHogPersistence.prototype.remove_event_timer = function (event_name) {\n  var timers = this['props'][EVENT_TIMERS_KEY] || {};\n  var timestamp = timers[event_name];\n\n  if (!_.isUndefined(timestamp)) {\n    delete this['props'][EVENT_TIMERS_KEY][event_name];\n    this.save();\n  }\n\n  return timestamp;\n};\n\nvar SESSION_CHANGE_THRESHOLD = 30 * 60 * 1000; // 30 mins\n\nvar sessionIdGenerator = (function (persistence, timestamp) {\n  var _ref = persistence['props'][SESSION_ID] || [0, null],\n      _ref2 = _slicedToArray(_ref, 2),\n      lastTimestamp = _ref2[0],\n      sessionId = _ref2[1];\n\n  if (Math.abs(timestamp - lastTimestamp) > SESSION_CHANGE_THRESHOLD) {\n    sessionId = _.UUID();\n  }\n\n  persistence.register(_defineProperty({}, SESSION_ID, [timestamp, sessionId]));\n  return sessionId;\n});\n\nvar BASE_ENDPOINT = '/e/';\nvar SessionRecording = /*#__PURE__*/function () {\n  function SessionRecording(instance) {\n    _classCallCheck(this, SessionRecording);\n\n    this.instance = instance;\n    this.captureStarted = false;\n    this.snapshots = [];\n    this.emit = false;\n    this.endpoint = BASE_ENDPOINT;\n    this.stopRrweb = null;\n  }\n\n  _createClass(SessionRecording, [{\n    key: \"startRecordingIfEnabled\",\n    value: function startRecordingIfEnabled() {\n      if (this.instance.get_property(SESSION_RECORDING_ENABLED) && !this.instance.get_config('disable_session_recording')) {\n        this._startCapture();\n      }\n    }\n  }, {\n    key: \"started\",\n    value: function started() {\n      return this.captureStarted;\n    }\n  }, {\n    key: \"stopRecording\",\n    value: function stopRecording() {\n      if (this.captureStarted && this.stopRrweb) {\n        this.stopRrweb();\n        this.stopRrweb = null;\n        this.captureStarted = false;\n      }\n    }\n  }, {\n    key: \"afterDecideResponse\",\n    value: function afterDecideResponse(response) {\n      var enableRecordings = !this.instance.get_config('disable_session_recording') && !!response['sessionRecording'];\n\n      if (this.instance.persistence) {\n        this.instance.persistence.register(_defineProperty({}, SESSION_RECORDING_ENABLED, enableRecordings));\n      }\n\n      if (enableRecordings) {\n        if (response['sessionRecording'].endpoint) {\n          this.endpoint = response['sessionRecording'].endpoint;\n        }\n\n        this.submitRecordings();\n      }\n    }\n  }, {\n    key: \"submitRecordings\",\n    value: function submitRecordings() {\n      var _this = this;\n\n      this.emit = true;\n\n      this._startCapture();\n\n      this.snapshots.forEach(function (properties) {\n        return _this._captureSnapshot(properties);\n      });\n    }\n  }, {\n    key: \"_startCapture\",\n    value: function _startCapture() {\n      // According to the rrweb docs, rrweb is not supported on IE11 and below:\n      // \"rrweb does not support IE11 and below because it uses the MutationObserver API which was supported by these browsers.\"\n      // https://github.com/rrweb-io/rrweb/blob/master/guide.md#compatibility-note\n      //\n      // However, MutationObserver does exist on IE11, it just doesn't work well and does not detect all changes.\n      // Instead, when we load \"recorder.js\", the first JS error is about \"Object.assign\" being undefined.\n      // Thus instead of MutationObserver, we look for this function and block recording if it's undefined.\n      if (typeof Object.assign === 'undefined') {\n        return;\n      }\n\n      if (!this.captureStarted && !this.instance.get_config('disable_session_recording')) {\n        this.captureStarted = true;\n        loadScript(this.instance.get_config('api_host') + '/static/recorder.js?v=' + Config.LIB_VERSION, _.bind(this._onScriptLoaded, this));\n      }\n    }\n  }, {\n    key: \"_onScriptLoaded\",\n    value: function _onScriptLoaded() {\n      var _this2 = this;\n\n      // rrweb config info: https://github.com/rrweb-io/rrweb/blob/7d5d0033258d6c29599fb08412202d9a2c7b9413/src/record/index.ts#L28\n      var sessionRecordingOptions = {\n        // select set of rrweb config options we expose to our users\n        // see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n        blockClass: 'ph-no-capture',\n        blockSelector: null,\n        ignoreClass: 'ph-ignore-input',\n        maskAllInputs: false,\n        maskInputOptions: {},\n        maskInputFn: null,\n        slimDOMOptions: {},\n        collectFonts: false\n      }; // only allows user to set our 'whitelisted' options\n\n      var userSessionRecordingOptions = this.instance.get_config('session_recording');\n\n      for (var _i = 0, _Object$entries = Object.entries(userSessionRecordingOptions || {}); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        if (key in sessionRecordingOptions) {\n          sessionRecordingOptions[key] = value;\n        }\n      }\n\n      this.stopRrweb = window.rrweb.record(_objectSpread2({\n        emit: function emit(data) {\n          var properties = {\n            $snapshot_data: data,\n            $session_id: sessionIdGenerator(_this2.instance.persistence, data.timestamp)\n          };\n\n          _this2.instance._captureMetrics.incr('rrweb-record');\n\n          _this2.instance._captureMetrics.incr(\"rrweb-record-\".concat(data.type));\n\n          if (_this2.emit) {\n            _this2._captureSnapshot(properties);\n          } else {\n            _this2.snapshots.push(properties);\n          }\n        }\n      }, sessionRecordingOptions)); // :TRICKY: rrweb does not capture navigation within SPA-s, so hook into our $pageview events to get access to all events.\n      //   Dropping the initial event is fine (it's always captured by rrweb).\n\n      this.instance._addCaptureHook(function (eventName) {\n        if (eventName === '$pageview') {\n          window.rrweb.record.addCustomEvent('$pageview', {\n            href: window.location.href\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_captureSnapshot\",\n    value: function _captureSnapshot(properties) {\n      // :TRICKY: Make sure we batch these requests, use a custom endpoint and don't truncate the strings.\n      this.instance.capture('$snapshot', properties, {\n        transport: 'XHR',\n        method: 'POST',\n        endpoint: this.endpoint,\n        _forceCompression: true,\n        _noTruncate: true,\n        _batchKey: 'sessionRecording',\n        _metrics: {\n          rrweb_full_snapshot: properties.$snapshot_data.type === 2\n        }\n      });\n    }\n  }]);\n\n  return SessionRecording;\n}();\n\nvar Decide = /*#__PURE__*/function () {\n  function Decide(instance) {\n    _classCallCheck(this, Decide);\n\n    this.instance = instance;\n  }\n\n  _createClass(Decide, [{\n    key: \"call\",\n    value: function call() {\n      var _this = this;\n\n      /*\n      Calls /decide endpoint to fetch options for autocapture, session recording, feature flags & compression.\n      */\n      var json_data = JSON.stringify({\n        token: this.instance.get_config('token'),\n        distinct_id: this.instance.get_distinct_id()\n      });\n\n      var encoded_data = _.base64Encode(json_data);\n\n      this.instance._send_request(this.instance.get_config('api_host') + '/decide/', {\n        data: encoded_data\n      }, {\n        method: 'POST'\n      }, function (response) {\n        return _this.parseDecideResponse(response);\n      });\n    }\n  }, {\n    key: \"parseDecideResponse\",\n    value: function parseDecideResponse(response) {\n      if (!(document && document.body)) {\n        console.log('document not ready yet, trying again in 500 milliseconds...');\n        setTimeout(function () {\n          this.parseDecideResponse(response);\n        }, 500);\n        return;\n      }\n\n      this.instance.toolbar.afterDecideResponse(response);\n      this.instance.sessionRecording.afterDecideResponse(response);\n      autocapture.afterDecideResponse(response, this.instance);\n\n      if (response['featureFlags']) {\n        this.instance.persistence && this.instance.persistence.register({\n          $active_feature_flags: response['featureFlags']\n        });\n      } else {\n        this.instance.persistence && this.instance.persistence.unregister('$active_feature_flags');\n      }\n\n      if (response['supportedCompression']) {\n        var compression = {};\n\n        var _iterator = _createForOfIteratorHelper(response['supportedCompression']),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var method = _step.value;\n            compression[method] = true;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.instance['compression'] = compression;\n      } else {\n        this.instance['compression'] = {};\n      }\n    }\n  }]);\n\n  return Decide;\n}();\n\nvar Toolbar = /*#__PURE__*/function () {\n  function Toolbar(instance) {\n    _classCallCheck(this, Toolbar);\n\n    this.instance = instance;\n  }\n\n  _createClass(Toolbar, [{\n    key: \"afterDecideResponse\",\n    value: function afterDecideResponse(response) {\n      var editorParams = response['editorParams'] || (response['toolbarVersion'] ? {\n        toolbarVersion: response['toolbarVersion']\n      } : {});\n\n      if (response['isAuthenticated'] && editorParams['toolbarVersion'] && editorParams['toolbarVersion'].indexOf('toolbar') === 0) {\n        this._loadEditor(_objectSpread2(_objectSpread2({}, editorParams), {}, {\n          apiURL: this.instance.get_config('api_host')\n        }));\n\n        this.instance.set_config({\n          debug: true\n        });\n      }\n    }\n    /**\n     * To load the visual editor, we need an access token and other state. That state comes from one of three places:\n     * 1. In the URL hash params if the customer is using an old snippet\n     * 2. From session storage under the key `editorParams` if the editor was initialized on a previous page\n     */\n\n  }, {\n    key: \"maybeLoadEditor\",\n    value: function maybeLoadEditor() {\n      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location;\n      var localStorage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.localStorage;\n      var history = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.history;\n\n      try {\n        var stateHash = _.getHashParam(location.hash, '__posthog') || _.getHashParam(location.hash, 'state');\n\n        var state = stateHash ? JSON.parse(decodeURIComponent(stateHash)) : null;\n        var parseFromUrl = state && (state['action'] === 'mpeditor' || state['action'] === 'ph_authorize');\n        var editorParams;\n\n        if (parseFromUrl) {\n          // happens if they are initializing the editor using an old snippet\n          editorParams = state;\n\n          if (editorParams && Object.keys(editorParams).length > 0) {\n            localStorage.setItem('_postHogEditorParams', JSON.stringify(editorParams));\n\n            if (state['desiredHash']) {\n              // hash that was in the url before the redirect\n              location.hash = state['desiredHash'];\n            } else if (history) {\n              history.replaceState('', document.title, location.pathname + location.search); // completely remove hash\n            } else {\n              location.hash = ''; // clear hash (but leaves # unfortunately)\n            }\n          }\n        } else {\n          // get credentials from localStorage from a previous initialzation\n          editorParams = JSON.parse(localStorage.getItem('_postHogEditorParams') || '{}'); // delete \"add-action\" or other intent from editorParams, otherwise we'll have the same intent\n          // every time we open the page (e.g. you just visiting your own site an hour later)\n\n          delete editorParams.userIntent;\n        }\n\n        editorParams['apiURL'] = this.instance.get_config('api_host');\n\n        if (editorParams['token'] && this.instance.get_config('token') === editorParams['token']) {\n          this._loadEditor(editorParams);\n\n          return true;\n        } else {\n          return false;\n        }\n      } catch (e) {\n        return false;\n      }\n    }\n  }, {\n    key: \"_loadEditor\",\n    value: function _loadEditor(editorParams) {\n      var _this = this;\n\n      if (!window['_postHogToolbarLoaded']) {\n        // only load the codeless event editor once, even if there are multiple instances of PostHogLib\n        window['_postHogToolbarLoaded'] = true;\n        var host = editorParams['jsURL'] || editorParams['apiURL'] || this.instance.get_config('api_host');\n        var toolbarScript = 'toolbar.js';\n        var editorUrl = host + (host.endsWith('/') ? '' : '/') + 'static/' + toolbarScript + '?_ts=' + new Date().getTime();\n        loadScript(editorUrl, function () {\n          window['ph_load_editor'](editorParams);\n        }); // Turbolinks doesn't fire an onload event but does replace the entire page, including the toolbar\n\n        _.register_event(window, 'turbolinks:load', function () {\n          window['_postHogToolbarLoaded'] = false;\n\n          _this._loadEditor(editorParams);\n        });\n\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Toolbar;\n}();\n\nvar RequestQueueScaffold = /*#__PURE__*/function () {\n  function RequestQueueScaffold() {\n    var pollInterval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;\n\n    _classCallCheck(this, RequestQueueScaffold);\n\n    this.isPolling = true; // flag to continue to recursively poll or not\n\n    this._event_queue = [];\n    this._empty_queue_count = 0; // to track empty polls\n\n    this._poller = function () {}; // to become interval for reference to clear later\n\n\n    this._pollInterval = pollInterval;\n  }\n\n  _createClass(RequestQueueScaffold, [{\n    key: \"setPollInterval\",\n    value: function setPollInterval(interval) {\n      this._pollInterval = interval; // Reset interval if running already\n\n      if (this.isPolling) {\n        this.poll();\n      }\n    }\n  }, {\n    key: \"enqueue\",\n    value: function enqueue() {\n      return;\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return;\n    }\n  }, {\n    key: \"unload\",\n    value: function unload() {\n      return;\n    }\n  }, {\n    key: \"getTime\",\n    value: function getTime() {\n      return new Date().getTime();\n    }\n  }]);\n\n  return RequestQueueScaffold;\n}();\n\nvar RequestQueue = /*#__PURE__*/function (_RequestQueueScaffold) {\n  _inherits(RequestQueue, _RequestQueueScaffold);\n\n  var _super = _createSuper(RequestQueue);\n\n  function RequestQueue(captureMetrics, handlePollRequest) {\n    var _this;\n\n    var pollInterval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3000;\n\n    _classCallCheck(this, RequestQueue);\n\n    _this = _super.call(this, pollInterval);\n    _this.handlePollRequest = handlePollRequest;\n    _this.captureMetrics = captureMetrics;\n    return _this;\n  }\n\n  _createClass(RequestQueue, [{\n    key: \"enqueue\",\n    value: function enqueue(url, data, options) {\n      this.captureMetrics.incr('batch-enqueue');\n\n      this._event_queue.push({\n        url: url,\n        data: data,\n        options: options\n      });\n\n      if (!this.isPolling) {\n        this.isPolling = true;\n        this.poll();\n      }\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      var _this2 = this;\n\n      clearTimeout(this._poller);\n      this._poller = setTimeout(function () {\n        if (_this2._event_queue.length > 0) {\n          var requests = _this2.formatQueue();\n\n          var _loop = function _loop(key) {\n            var _requests$key = requests[key],\n                url = _requests$key.url,\n                data = _requests$key.data,\n                options = _requests$key.options;\n\n            _.each(data, function (_, dataKey) {\n              data[dataKey]['offset'] = Math.abs(data[dataKey]['timestamp'] - _this2.getTime());\n              delete data[dataKey]['timestamp'];\n            });\n\n            _this2.handlePollRequest(url, data, options);\n\n            _this2.captureMetrics.incr('batch-requests');\n\n            _this2.captureMetrics.incr(\"batch-requests-\".concat(url.slice(url.length - 2)));\n\n            _this2.captureMetrics.incr('batch-handle', data.length);\n\n            _this2.captureMetrics.incr(\"batch-handle-\".concat(url.slice(url.length - 2)), data.length);\n          };\n\n          for (var key in requests) {\n            _loop(key);\n          }\n\n          _this2._event_queue.length = 0; // flush the _event_queue\n\n          _this2._empty_queue_count = 0;\n        } else {\n          _this2._empty_queue_count++;\n        }\n        /**\n         * _empty_queue_count will increment each time the queue is polled\n         *  and it is empty. To avoid empty polling (user went idle, stepped away from comp)\n         *  we can turn it off with the isPolling flag.\n         *\n         * Polling will be re enabled when the next time PostHogLib.capture is called with\n         *  an event that should be added to the event queue.\n         */\n\n\n        if (_this2._empty_queue_count > 4) {\n          _this2.isPolling = false;\n          _this2._empty_queue_count = 0;\n        }\n\n        if (_this2.isPolling) {\n          _this2.poll();\n        }\n      }, this._pollInterval);\n    }\n  }, {\n    key: \"updateUnloadMetrics\",\n    value: function updateUnloadMetrics() {\n      var requests = this.formatQueue();\n\n      for (var key in requests) {\n        var _requests$key2 = requests[key],\n            url = _requests$key2.url,\n            data = _requests$key2.data;\n        this.captureMetrics.incr('batch-unload-requests');\n        this.captureMetrics.incr(\"batch-unload-requests-\".concat(url.slice(url.length - 2)));\n        this.captureMetrics.incr('batch-unload', data.length);\n        this.captureMetrics.incr(\"batch-unload-\".concat(url.slice(url.length - 2)), data.length);\n      }\n    }\n  }, {\n    key: \"unload\",\n    value: function unload() {\n      clearTimeout(this._poller);\n      var requests = this._event_queue.length > 0 ? this.formatQueue() : {};\n      this._event_queue.length = 0;\n\n      for (var key in requests) {\n        var _requests$key3 = requests[key],\n            url = _requests$key3.url,\n            data = _requests$key3.data,\n            options = _requests$key3.options;\n        this.handlePollRequest(url, data, _objectSpread2(_objectSpread2({}, options), {}, {\n          transport: 'sendbeacon'\n        }));\n      }\n    }\n  }, {\n    key: \"formatQueue\",\n    value: function formatQueue() {\n      var requests = {};\n\n      _.each(this._event_queue, function (request) {\n        var url = request.url,\n            data = request.data,\n            options = request.options;\n        var key = (options ? options._batchKey : null) || url;\n\n        if (requests[key] === undefined) {\n          requests[key] = {\n            data: [],\n            url: url,\n            options: options\n          };\n        } // :TRICKY: Metrics-only code\n\n\n        if (options && requests[key].options && requests[key].options._metrics && !requests[key].options._metrics['rrweb_full_snapshot']) {\n          requests[key].options._metrics['rrweb_full_snapshot'] = options._metrics['rrweb_full_snapshot'];\n        }\n\n        requests[key].data.push(data);\n      });\n\n      return requests;\n    }\n  }]);\n\n  return RequestQueue;\n}(RequestQueueScaffold);\n\nvar CaptureMetrics = /*#__PURE__*/function () {\n  function CaptureMetrics(enabled, capture) {\n    var getTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {\n      return new Date().getTime();\n    };\n\n    _classCallCheck(this, CaptureMetrics);\n\n    this.enabled = enabled;\n    this.capture = capture;\n    this.getTime = getTime;\n    this.metrics = {};\n    this.requests = {};\n  }\n\n  _createClass(CaptureMetrics, [{\n    key: \"incr\",\n    value: function incr(key) {\n      var by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      if (this.enabled) {\n        key = \"phjs-\".concat(key);\n        this.metrics[key] = (this.metrics[key] || 0) + by;\n      }\n    }\n  }, {\n    key: \"decr\",\n    value: function decr(key) {\n      if (this.enabled) {\n        key = \"phjs-\".concat(key);\n        this.metrics[key] = (this.metrics[key] || 0) - 1;\n      }\n    }\n  }, {\n    key: \"startRequest\",\n    value: function startRequest(payload) {\n      if (this.enabled) {\n        var requestId = _.UUID();\n\n        this.requests[requestId] = [this.getTime(), payload];\n        return requestId;\n      }\n    }\n  }, {\n    key: \"finishRequest\",\n    value: function finishRequest(requestId) {\n      if (this.enabled && this.requests[requestId]) {\n        var _this$requests$reques = _slicedToArray(this.requests[requestId], 2),\n            startTime = _this$requests$reques[0],\n            payload = _this$requests$reques[1];\n\n        payload['duration'] = this.getTime() - startTime;\n        delete this.requests[requestId];\n        return payload;\n      }\n    }\n  }, {\n    key: \"markRequestFailed\",\n    value: function markRequestFailed(payload) {\n      if (this.enabled) {\n        this.capture('$capture_failed_request', payload);\n      }\n    }\n  }, {\n    key: \"captureInProgressRequests\",\n    value: function captureInProgressRequests() {\n      var _this = this;\n\n      if (this.enabled) {\n        Object.keys(this.requests).forEach(function (requestId) {\n          var payload = _this.finishRequest(requestId);\n\n          _this.markRequestFailed(_objectSpread2(_objectSpread2({}, payload), {}, {\n            type: 'inflight_at_unload'\n          }));\n        });\n      }\n    }\n  }]);\n\n  return CaptureMetrics;\n}();\n\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n\n\nvar u8 = Uint8Array,\n    u16 = Uint16Array,\n    u32 = Uint32Array; // fixed length extra bits\n\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0,\n/* unused */\n0, 0,\n/* impossible */\n0]); // fixed distance extra bits\n// see fleb note\n\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,\n/* unused */\n0, 0]); // code length index map\n\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]); // get base, reverse index map from extra bits\n\nvar freb = function freb(eb, start) {\n  var b = new u16(31);\n\n  for (var i = 0; i < 31; ++i) {\n    b[i] = start += 1 << eb[i - 1];\n  } // numbers here are at max 18 bits\n\n\n  var r = new u32(b[30]);\n\n  for (var i = 1; i < 30; ++i) {\n    for (var j = b[i]; j < b[i + 1]; ++j) {\n      r[j] = j - b[i] << 5 | i;\n    }\n  }\n\n  return [b, r];\n};\n\nvar _a = freb(fleb, 2),\n    fl = _a[0],\n    revfl = _a[1]; // we can ignore the fact that the other numbers are wrong; they never happen anyway\n\n\nfl[28] = 258, revfl[258] = 28;\n\nvar _b = freb(fdeb, 0),\n    revfd = _b[1]; // map of value to reverse (assuming 16 bits)\n\n\nvar rev = new u16(32768);\n\nfor (var i = 0; i < 32768; ++i) {\n  // reverse table algorithm from SO\n  var x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;\n  x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;\n  x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;\n  rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;\n} // create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\n\n\nvar hMap = function hMap(cd, mb, r) {\n  var s = cd.length; // index\n\n  var i = 0; // u16 \"map\": index -> # of codes with bit length = index\n\n  var l = new u16(mb); // length of cd must be 288 (total # of codes)\n\n  for (; i < s; ++i) {\n    ++l[cd[i] - 1];\n  } // u16 \"map\": index -> minimum code for bit length = index\n\n\n  var le = new u16(mb);\n\n  for (i = 0; i < mb; ++i) {\n    le[i] = le[i - 1] + l[i - 1] << 1;\n  }\n\n  var co;\n\n  if (r) {\n    // u16 \"map\": index -> number of actual bits, symbol for code\n    co = new u16(1 << mb); // bits to remove for reverser\n\n    var rvb = 15 - mb;\n\n    for (i = 0; i < s; ++i) {\n      // ignore 0 lengths\n      if (cd[i]) {\n        // num encoding both symbol and bits read\n        var sv = i << 4 | cd[i]; // free bits\n\n        var r_1 = mb - cd[i]; // start value\n\n        var v = le[cd[i] - 1]++ << r_1; // m is end value\n\n        for (var m = v | (1 << r_1) - 1; v <= m; ++v) {\n          // every 16 bit value starting with the code yields the same result\n          co[rev[v] >>> rvb] = sv;\n        }\n      }\n    }\n  } else {\n    co = new u16(s);\n\n    for (i = 0; i < s; ++i) {\n      co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];\n    }\n  }\n\n  return co;\n}; // fixed length tree\n\n\nvar flt = new u8(288);\n\nfor (var i = 0; i < 144; ++i) {\n  flt[i] = 8;\n}\n\nfor (var i = 144; i < 256; ++i) {\n  flt[i] = 9;\n}\n\nfor (var i = 256; i < 280; ++i) {\n  flt[i] = 7;\n}\n\nfor (var i = 280; i < 288; ++i) {\n  flt[i] = 8;\n} // fixed distance tree\n\n\nvar fdt = new u8(32);\n\nfor (var i = 0; i < 32; ++i) {\n  fdt[i] = 5;\n} // fixed length map\n\n\nvar flm = /*#__PURE__*/hMap(flt, 9, 0);\n // fixed distance map\n\nvar fdm = /*#__PURE__*/hMap(fdt, 5, 0);\n // find max of array\n\n\nvar shft = function shft(p) {\n  return (p / 8 >> 0) + (p & 7 && 1);\n}; // typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\n\n\nvar slc = function slc(v, s, e) {\n  if (s == null || s < 0) s = 0;\n  if (e == null || e > v.length) e = v.length; // can't use .constructor in case user-supplied\n\n  var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);\n  n.set(v.subarray(s, e));\n  return n;\n}; // expands raw DEFLATE data\n\n\nvar wbits = function wbits(d, p, v) {\n  v <<= p & 7;\n  var o = p / 8 >> 0;\n  d[o] |= v;\n  d[o + 1] |= v >>> 8;\n}; // starting at p, write the minimum number of bits (>8) that can hold v to d\n\n\nvar wbits16 = function wbits16(d, p, v) {\n  v <<= p & 7;\n  var o = p / 8 >> 0;\n  d[o] |= v;\n  d[o + 1] |= v >>> 8;\n  d[o + 2] |= v >>> 16;\n}; // creates code lengths from a frequency table\n\n\nvar hTree = function hTree(d, mb) {\n  // Need extra info to make a tree\n  var t = [];\n\n  for (var i = 0; i < d.length; ++i) {\n    if (d[i]) t.push({\n      s: i,\n      f: d[i]\n    });\n  }\n\n  var s = t.length;\n  var t2 = t.slice();\n  if (!s) return [new u8(0), 0];\n\n  if (s == 1) {\n    var v = new u8(t[0].s + 1);\n    v[t[0].s] = 1;\n    return [v, 1];\n  }\n\n  t.sort(function (a, b) {\n    return a.f - b.f;\n  }); // after i2 reaches last ind, will be stopped\n  // freq must be greater than largest possible number of symbols\n\n  t.push({\n    s: -1,\n    f: 25001\n  });\n  var l = t[0],\n      r = t[1],\n      i0 = 0,\n      i1 = 1,\n      i2 = 2;\n  t[0] = {\n    s: -1,\n    f: l.f + r.f,\n    l: l,\n    r: r\n  }; // efficient algorithm from UZIP.js\n  // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n  // symbols that combined have high freq, will start processing i2 (high-freq,\n  // non-composite) symbols instead\n  // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n\n  while (i1 != s - 1) {\n    l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n    r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n    t[i1++] = {\n      s: -1,\n      f: l.f + r.f,\n      l: l,\n      r: r\n    };\n  }\n\n  var maxSym = t2[0].s;\n\n  for (var i = 1; i < s; ++i) {\n    if (t2[i].s > maxSym) maxSym = t2[i].s;\n  } // code lengths\n\n\n  var tr = new u16(maxSym + 1); // max bits in tree\n\n  var mbt = ln(t[i1 - 1], tr, 0);\n\n  if (mbt > mb) {\n    // more algorithms from UZIP.js\n    // TODO: find out how this code works (debt)\n    //  ind    debt\n    var i = 0,\n        dt = 0; //    left            cost\n\n    var lft = mbt - mb,\n        cst = 1 << lft;\n    t2.sort(function (a, b) {\n      return tr[b.s] - tr[a.s] || a.f - b.f;\n    });\n\n    for (; i < s; ++i) {\n      var i2_1 = t2[i].s;\n\n      if (tr[i2_1] > mb) {\n        dt += cst - (1 << mbt - tr[i2_1]);\n        tr[i2_1] = mb;\n      } else break;\n    }\n\n    dt >>>= lft;\n\n    while (dt > 0) {\n      var i2_2 = t2[i].s;\n      if (tr[i2_2] < mb) dt -= 1 << mb - tr[i2_2]++ - 1;else ++i;\n    }\n\n    for (; i >= 0 && dt; --i) {\n      var i2_3 = t2[i].s;\n\n      if (tr[i2_3] == mb) {\n        --tr[i2_3];\n        ++dt;\n      }\n    }\n\n    mbt = mb;\n  }\n\n  return [new u8(tr), mbt];\n}; // get the max length and assign length codes\n\n\nvar ln = function ln(n, l, d) {\n  return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;\n}; // length codes generation\n\n\nvar lc = function lc(c) {\n  var s = c.length; // Note that the semicolon was intentional\n\n  while (s && !c[--s]) {\n  }\n\n  var cl = new u16(++s); //  ind      num         streak\n\n  var cli = 0,\n      cln = c[0],\n      cls = 1;\n\n  var w = function w(v) {\n    cl[cli++] = v;\n  };\n\n  for (var i = 1; i <= s; ++i) {\n    if (c[i] == cln && i != s) ++cls;else {\n      if (!cln && cls > 2) {\n        for (; cls > 138; cls -= 138) {\n          w(32754);\n        }\n\n        if (cls > 2) {\n          w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);\n          cls = 0;\n        }\n      } else if (cls > 3) {\n        w(cln), --cls;\n\n        for (; cls > 6; cls -= 6) {\n          w(8304);\n        }\n\n        if (cls > 2) w(cls - 3 << 5 | 8208), cls = 0;\n      }\n\n      while (cls--) {\n        w(cln);\n      }\n\n      cls = 1;\n      cln = c[i];\n    }\n  }\n\n  return [cl.subarray(0, cli), s];\n}; // calculate the length of output from tree, code lengths\n\n\nvar clen = function clen(cf, cl) {\n  var l = 0;\n\n  for (var i = 0; i < cl.length; ++i) {\n    l += cf[i] * cl[i];\n  }\n\n  return l;\n}; // writes a fixed block\n// returns the new bit pos\n\n\nvar wfblk = function wfblk(out, pos, dat) {\n  // no need to write 00 as type: TypedArray defaults to 0\n  var s = dat.length;\n  var o = shft(pos + 2);\n  out[o] = s & 255;\n  out[o + 1] = s >>> 8;\n  out[o + 2] = out[o] ^ 255;\n  out[o + 3] = out[o + 1] ^ 255;\n\n  for (var i = 0; i < s; ++i) {\n    out[o + i + 4] = dat[i];\n  }\n\n  return (o + 4 + s) * 8;\n}; // writes a block\n\n\nvar wblk = function wblk(dat, out, _final2, syms, lf, df, eb, li, bs, bl, p) {\n  wbits(out, p++, _final2);\n  ++lf[256];\n\n  var _a = hTree(lf, 15),\n      dlt = _a[0],\n      mlb = _a[1];\n\n  var _b = hTree(df, 15),\n      ddt = _b[0],\n      mdb = _b[1];\n\n  var _c = lc(dlt),\n      lclt = _c[0],\n      nlc = _c[1];\n\n  var _d = lc(ddt),\n      lcdt = _d[0],\n      ndc = _d[1];\n\n  var lcfreq = new u16(19);\n\n  for (var i = 0; i < lclt.length; ++i) {\n    lcfreq[lclt[i] & 31]++;\n  }\n\n  for (var i = 0; i < lcdt.length; ++i) {\n    lcfreq[lcdt[i] & 31]++;\n  }\n\n  var _e = hTree(lcfreq, 7),\n      lct = _e[0],\n      mlcb = _e[1];\n\n  var nlcc = 19;\n\n  for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc) {\n  }\n\n  var flen = bl + 5 << 3;\n  var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n  var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n  if (flen <= ftlen && flen <= dtlen) return wfblk(out, p, dat.subarray(bs, bs + bl));\n  var lm, ll, dm, dl;\n  wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n\n  if (dtlen < ftlen) {\n    lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n    var llm = hMap(lct, mlcb, 0);\n    wbits(out, p, nlc - 257);\n    wbits(out, p + 5, ndc - 1);\n    wbits(out, p + 10, nlcc - 4);\n    p += 14;\n\n    for (var i = 0; i < nlcc; ++i) {\n      wbits(out, p + 3 * i, lct[clim[i]]);\n    }\n\n    p += 3 * nlcc;\n    var lcts = [lclt, lcdt];\n\n    for (var it = 0; it < 2; ++it) {\n      var clct = lcts[it];\n\n      for (var i = 0; i < clct.length; ++i) {\n        var len = clct[i] & 31;\n        wbits(out, p, llm[len]), p += lct[len];\n        if (len > 15) wbits(out, p, clct[i] >>> 5 & 127), p += clct[i] >>> 12;\n      }\n    }\n  } else {\n    lm = flm, ll = flt, dm = fdm, dl = fdt;\n  }\n\n  for (var i = 0; i < li; ++i) {\n    if (syms[i] > 255) {\n      var len = syms[i] >>> 18 & 31;\n      wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n      if (len > 7) wbits(out, p, syms[i] >>> 23 & 31), p += fleb[len];\n      var dst = syms[i] & 31;\n      wbits16(out, p, dm[dst]), p += dl[dst];\n      if (dst > 3) wbits16(out, p, syms[i] >>> 5 & 8191), p += fdeb[dst];\n    } else {\n      wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n    }\n  }\n\n  wbits16(out, p, lm[256]);\n  return p + ll[256];\n}; // deflate options (nice << 13) | chain\n\n\nvar deo = /*#__PURE__*/new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]); // empty\n\nvar et = /*#__PURE__*/new u8(0); // compresses data into a raw DEFLATE buffer\n\nvar dflt = function dflt(dat, lvl, plvl, pre, post, lst) {\n  var s = dat.length;\n  var o = new u8(pre + s + 5 * (1 + Math.floor(s / 7000)) + post); // writing to this writes to the output buffer\n\n  var w = o.subarray(pre, o.length - post);\n  var pos = 0;\n\n  if (!lvl || s < 8) {\n    for (var i = 0; i <= s; i += 65535) {\n      // end\n      var e = i + 65535;\n\n      if (e < s) {\n        // write full block\n        pos = wfblk(w, pos, dat.subarray(i, e));\n      } else {\n        // write final block\n        w[i] = lst;\n        pos = wfblk(w, pos, dat.subarray(i, s));\n      }\n    }\n  } else {\n    var opt = deo[lvl - 1];\n    var n = opt >>> 13,\n        c = opt & 8191;\n    var msk_1 = (1 << plvl) - 1; //    prev 2-byte val map    curr 2-byte val map\n\n    var prev = new u16(32768),\n        head = new u16(msk_1 + 1);\n    var bs1_1 = Math.ceil(plvl / 3),\n        bs2_1 = 2 * bs1_1;\n\n    var hsh = function hsh(i) {\n      return (dat[i] ^ dat[i + 1] << bs1_1 ^ dat[i + 2] << bs2_1) & msk_1;\n    }; // 24576 is an arbitrary number of maximum symbols per block\n    // 424 buffer for last block\n\n\n    var syms = new u32(25000); // length/literal freq   distance freq\n\n    var lf = new u16(288),\n        df = new u16(32); //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n\n    var lc_1 = 0,\n        eb = 0,\n        i = 0,\n        li = 0,\n        wi = 0,\n        bs = 0;\n\n    for (; i < s; ++i) {\n      // hash value\n      var hv = hsh(i); // index mod 32768\n\n      var imod = i & 32767; // previous index with this value\n\n      var pimod = head[hv];\n      prev[imod] = pimod;\n      head[hv] = imod; // We always should modify head and prev, but only add symbols if\n      // this data is not yet processed (\"wait\" for wait index)\n\n      if (wi <= i) {\n        // bytes remaining\n        var rem = s - i;\n\n        if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n          pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n          li = lc_1 = eb = 0, bs = i;\n\n          for (var j = 0; j < 286; ++j) {\n            lf[j] = 0;\n          }\n\n          for (var j = 0; j < 30; ++j) {\n            df[j] = 0;\n          }\n        } //  len    dist   chain\n\n\n        var l = 2,\n            d = 0,\n            ch_1 = c,\n            dif = imod - pimod & 32767;\n\n        if (rem > 2 && hv == hsh(i - dif)) {\n          var maxn = Math.min(n, rem) - 1;\n          var maxd = Math.min(32767, i); // max possible length\n          // not capped at dif because decompressors implement \"rolling\" index population\n\n          var ml = Math.min(258, rem);\n\n          while (dif <= maxd && --ch_1 && imod != pimod) {\n            if (dat[i + l] == dat[i + l - dif]) {\n              var nl = 0;\n\n              for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl) {\n              }\n\n              if (nl > l) {\n                l = nl, d = dif; // break out early when we reach \"nice\" (we are satisfied enough)\n\n                if (nl > maxn) break; // now, find the rarest 2-byte sequence within this\n                // length of literals and search for that instead.\n                // Much faster than just using the start\n\n                var mmd = Math.min(dif, nl - 2);\n                var md = 0;\n\n                for (var j = 0; j < mmd; ++j) {\n                  var ti = i - dif + j + 32768 & 32767;\n                  var pti = prev[ti];\n                  var cd = ti - pti + 32768 & 32767;\n                  if (cd > md) md = cd, pimod = ti;\n                }\n              }\n            } // check the previous match\n\n\n            imod = pimod, pimod = prev[imod];\n            dif += imod - pimod + 32768 & 32767;\n          }\n        } // d will be nonzero only when a match was found\n\n\n        if (d) {\n          // store both dist and len data in one Uint32\n          // Make sure this is recognized as a len/dist with 28th bit (2^28)\n          syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];\n          var lin = revfl[l] & 31,\n              din = revfd[d] & 31;\n          eb += fleb[lin] + fdeb[din];\n          ++lf[257 + lin];\n          ++df[din];\n          wi = i + l;\n          ++lc_1;\n        } else {\n          syms[li++] = dat[i];\n          ++lf[dat[i]];\n        }\n      }\n    }\n\n    pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos); // this is the easiest way to avoid needing to maintain state\n\n    if (!lst) pos = wfblk(w, pos, et);\n  }\n\n  return slc(o, 0, pre + shft(pos) + post);\n}; // CRC32 table\n\n\nvar crct = /*#__PURE__*/function () {\n  var t = new u32(256);\n\n  for (var i = 0; i < 256; ++i) {\n    var c = i,\n        k = 9;\n\n    while (--k) {\n      c = (c & 1 && 0xEDB88320) ^ c >>> 1;\n    }\n\n    t[i] = c;\n  }\n\n  return t;\n}(); // CRC32\n\n\nvar crc = function crc() {\n  var c = 0xFFFFFFFF;\n  return {\n    p: function p(d) {\n      // closures have awful performance\n      var cr = c;\n\n      for (var i = 0; i < d.length; ++i) {\n        cr = crct[cr & 255 ^ d[i]] ^ cr >>> 8;\n      }\n\n      c = cr;\n    },\n    d: function d() {\n      return c ^ 0xFFFFFFFF;\n    }\n  };\n}; // Alder32\n\nvar dopt = function dopt(dat, opt, pre, post, st) {\n  return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st);\n}; // Walmart object spread\n\n\nvar wbytes = function wbytes(d, b, v) {\n  for (; v; ++b) {\n    d[b] = v, v >>>= 8;\n  }\n}; // gzip header\n\n\nvar gzh = function gzh(c, o) {\n  var fn = o.filename;\n  c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n\n  if (o.mtime != 0) wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n\n  if (fn) {\n    c[3] = 8;\n\n    for (var i = 0; i <= fn.length; ++i) {\n      c[i + 10] = fn.charCodeAt(i);\n    }\n  }\n}; // gzip footer: -8 to -4 = CRC, -4 to -0 is length\n\n\nvar gzhl = function gzhl(o) {\n  return 10 + (o.filename && o.filename.length + 1 || 0);\n}; // zlib header\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\n\nfunction gzipSync(data, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var c = crc(),\n      l = data.length;\n  c.p(data);\n  var d = dopt(data, opts, gzhl(opts), 8),\n      s = d.length;\n  return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\n\n\nfunction strToU8(str, latin1) {\n  var l = str.length;\n  if (!latin1 && typeof TextEncoder != 'undefined') return new TextEncoder().encode(str);\n  var ar = new u8(str.length + (str.length >>> 1));\n  var ai = 0;\n\n  var w = function w(v) {\n    ar[ai++] = v;\n  };\n\n  for (var i = 0; i < l; ++i) {\n    if (ai + 5 > ar.length) {\n      var n = new u8(ai + 8 + (l - i << 1));\n      n.set(ar);\n      ar = n;\n    }\n\n    var c = str.charCodeAt(i);\n    if (c < 128 || latin1) w(c);else if (c < 2048) w(192 | c >>> 6), w(128 | c & 63);else if (c > 55295 && c < 57344) c = 65536 + (c & 1023 << 10) | str.charCodeAt(++i) & 1023, w(240 | c >>> 18), w(128 | c >>> 12 & 63), w(128 | c >>> 6 & 63), w(128 | c & 63);else w(224 | c >>> 12), w(128 | c >>> 6 & 63), w(128 | c & 63);\n  }\n\n  return slc(ar, 0, ai);\n}\n\nfunction decideCompression(compressionSupport) {\n  if (compressionSupport['gzip-js']) {\n    return 'gzip-js';\n  } else if (compressionSupport['lz64']) {\n    return 'lz64';\n  } else {\n    return 'base64';\n  }\n}\nfunction compressData(compression, jsonData, options) {\n  if (compression === 'lz64') {\n    return [{\n      data: LZString.compressToBase64(jsonData),\n      compression: 'lz64'\n    }, options];\n  } else if (compression === 'gzip-js') {\n    // :TRICKY: This returns an UInt8Array. We don't encode this to a string - returning a blob will do this for us.\n    return [gzipSync(strToU8(jsonData), {\n      mtime: 0\n    }), _objectSpread2(_objectSpread2({}, options), {}, {\n      blob: true,\n      urlQueryArgs: {\n        compression: 'gzip-js'\n      }\n    })];\n  } else {\n    return [{\n      data: _.base64Encode(jsonData)\n    }, options];\n  }\n}\n\nvar encodePostData = function encodePostData(data, options) {\n  if (options.blob) {\n    return new Blob([data.buffer], {\n      type: 'text/plain'\n    });\n  } else if (options.sendBeacon) {\n    var body = encodePostData(data, {\n      method: 'POST'\n    });\n    return new Blob([body], {\n      type: 'application/x-www-form-urlencoded'\n    });\n  } else if (options.method !== 'POST') {\n    return null;\n  }\n\n  var body_data;\n\n  if (Array.isArray(data)) {\n    body_data = 'data=' + encodeURIComponent(data);\n  } else {\n    body_data = 'data=' + encodeURIComponent(data['data']);\n  }\n\n  if (data['compression']) {\n    body_data += '&compression=' + data['compression'];\n  }\n\n  return body_data;\n};\nvar xhr = function xhr(_ref) {\n  var url = _ref.url,\n      data = _ref.data,\n      headers = _ref.headers,\n      options = _ref.options,\n      captureMetrics = _ref.captureMetrics,\n      callback = _ref.callback,\n      retriesPerformedSoFar = _ref.retriesPerformedSoFar,\n      retryQueue = _ref.retryQueue;\n  var req = new XMLHttpRequest();\n  req.open(options.method, url, true);\n  var body = encodePostData(data, options);\n  captureMetrics.incr('_send_request');\n  captureMetrics.incr('_send_request_inflight');\n  var requestId = captureMetrics.startRequest(_objectSpread2({\n    data_size: _.isString(data) ? data.length : body.length,\n    endpoint: url.slice(url.length - 2)\n  }, options._metrics));\n\n  _.each(headers, function (headerValue, headerName) {\n    req.setRequestHeader(headerName, headerValue);\n  });\n\n  if (options.method === 'POST' && !options.blob) {\n    req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n  } // send the ph_optout cookie\n  // withCredentials cannot be modified until after calling .open on Android and Mobile Safari\n\n\n  req.withCredentials = true;\n\n  req.onreadystatechange = function () {\n    if (req.readyState === 4) {\n      captureMetrics.incr(\"xhr-response\");\n      captureMetrics.incr(\"xhr-response-\".concat(req.status));\n      captureMetrics.decr('_send_request_inflight');\n      var metricsData = captureMetrics.finishRequest(requestId); // XMLHttpRequest.DONE == 4, except in safari 4\n\n      if (req.status === 200) {\n        if (callback) {\n          var response;\n\n          try {\n            response = JSON.parse(req.responseText);\n          } catch (e) {\n            console$1.error(e);\n            return;\n          }\n\n          callback(response);\n        }\n      } else {\n        var error = 'Bad HTTP status: ' + req.status + ' ' + req.statusText;\n        console$1.error(error); // don't retry certain errors\n\n        if ([401, 403, 404].indexOf(req.status) < 0) {\n          retryQueue.enqueue({\n            url: url,\n            data: data,\n            options: options,\n            headers: headers,\n            retriesPerformedSoFar: (retriesPerformedSoFar || 0) + 1,\n            callback: callback\n          });\n        }\n\n        captureMetrics.markRequestFailed(_objectSpread2(_objectSpread2({}, metricsData), {}, {\n          type: 'non_200',\n          status: req.status,\n          statusText: req.statusText\n        }));\n\n        if (callback) {\n          if (options.verbose) {\n            callback({\n              status: 0,\n              error: error\n            });\n          } else {\n            callback(0);\n          }\n        }\n      }\n    }\n  };\n\n  req.send(body);\n};\n\nvar RetryQueue = /*#__PURE__*/function (_RequestQueueScaffold) {\n  _inherits(RetryQueue, _RequestQueueScaffold);\n\n  var _super = _createSuper(RetryQueue);\n\n  function RetryQueue(captureMetrics) {\n    var _this;\n\n    _classCallCheck(this, RetryQueue);\n\n    _this = _super.call(this);\n    _this.captureMetrics = captureMetrics;\n    _this.isPolling = false;\n    _this.queue = [];\n    _this.areWeOnline = true;\n\n    if ('onLine' in window.navigator) {\n      _this.areWeOnline = window.navigator.onLine;\n      window.addEventListener('online', function () {\n        _this._handleWeAreNowOnline();\n      });\n      window.addEventListener('offline', function () {\n        _this.areWeOnline = false;\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(RetryQueue, [{\n    key: \"enqueue\",\n    value: function enqueue(requestData) {\n      var retriesPerformedSoFar = requestData.retriesPerformedSoFar || 0;\n\n      if (retriesPerformedSoFar >= 10) {\n        return;\n      }\n\n      var msToNextRetry = 3000 * Math.pow(2, retriesPerformedSoFar);\n      var retryAt = new Date(Date.now() + msToNextRetry);\n      console.warn(\"Enqueued failed request for retry in \".concat(msToNextRetry));\n      this.queue.push({\n        retryAt: retryAt,\n        requestData: requestData\n      });\n\n      if (!this.isPolling) {\n        this.isPolling = true;\n        this.poll();\n      }\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      var _this2 = this;\n\n      clearTimeout(this._poller);\n      this._poller = setTimeout(function () {\n        if (_this2.areWeOnline && _this2.queue.length > 0) {\n          _this2.flush();\n        }\n\n        _this2.poll();\n      }, this._pollInterval);\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      // using Date.now to make tests easier as recommended here https://codewithhugo.com/mocking-the-current-date-in-jest-tests/\n      var now = new Date(Date.now());\n      var toFlush = this.queue.filter(function (_ref) {\n        var retryAt = _ref.retryAt;\n        return retryAt < now;\n      });\n\n      if (toFlush.length > 0) {\n        this.queue = this.queue.filter(function (_ref2) {\n          var retryAt = _ref2.retryAt;\n          return retryAt >= now;\n        });\n\n        var _iterator = _createForOfIteratorHelper(toFlush),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var requestData = _step.value.requestData;\n\n            this._executeXhrRequest(requestData);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: \"unload\",\n    value: function unload() {\n      clearTimeout(this._poller);\n\n      var _iterator2 = _createForOfIteratorHelper(this.queue),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var requestData = _step2.value.requestData;\n          var url = requestData.url,\n              data = requestData.data,\n              options = requestData.options;\n          window.navigator.sendBeacon(url, encodePostData(data, _objectSpread2(_objectSpread2({}, options), {}, {\n            sendBeacon: true\n          })));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.queue = [];\n    }\n  }, {\n    key: \"_executeXhrRequest\",\n    value: function _executeXhrRequest(_ref3) {\n      var url = _ref3.url,\n          data = _ref3.data,\n          options = _ref3.options,\n          headers = _ref3.headers,\n          callback = _ref3.callback,\n          retriesPerformedSoFar = _ref3.retriesPerformedSoFar;\n      xhr({\n        url: url,\n        data: data || {},\n        options: options || {},\n        headers: headers || {},\n        retriesPerformedSoFar: retriesPerformedSoFar || 0,\n        callback: callback,\n        captureMetrics: this.captureMetrics,\n        retryQueue: this\n      });\n    }\n  }, {\n    key: \"_handleWeAreNowOnline\",\n    value: function _handleWeAreNowOnline() {\n      this.areWeOnline = true;\n      this.flush();\n    }\n  }]);\n\n  return RetryQueue;\n}(RequestQueueScaffold);\n\n/*\nSIMPLE STYLE GUIDE:\n\nthis.x === public function\nthis._x === internal - only use within this file\nthis.__x === private - only use within the class\n\nGlobals should be all caps\n*/\n\nvar init_type; // MODULE or SNIPPET loader\n\nvar posthog_master; // main posthog instance / object\n\nvar INIT_MODULE = 0;\nvar INIT_SNIPPET = 1; // some globals for comparisons\n\nvar __NOOP = function __NOOP() {};\n\nvar __NOOPTIONS = {};\nvar PRIMARY_INSTANCE_NAME = 'posthog';\n/*\n * Dynamic... constants? Is that an oxymoron?\n */\n// http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/\n// https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#withCredentials\n\nvar USE_XHR = win.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest(); // IE<10 does not support cross-origin XHR's but script tags\n// with defer won't block window.onload; ENQUEUE_REQUESTS\n// should only be true for Opera<12\n\nvar ENQUEUE_REQUESTS = !USE_XHR && userAgent.indexOf('MSIE') === -1 && userAgent.indexOf('Mozilla') === -1;\n\nvar defaultConfig = function defaultConfig() {\n  return {\n    api_host: 'https://app.posthog.com',\n    api_method: 'POST',\n    api_transport: 'XHR',\n    autocapture: true,\n    rageclick: false,\n    cross_subdomain_cookie: document$1.location.hostname.indexOf('herokuapp.com') === -1,\n    persistence: 'cookie',\n    persistence_name: '',\n    cookie_name: '',\n    loaded: function loaded() {},\n    store_google: true,\n    save_referrer: true,\n    test: false,\n    verbose: false,\n    img: false,\n    capture_pageview: true,\n    debug: false,\n    cookie_expiration: 365,\n    upgrade: false,\n    disable_session_recording: false,\n    disable_persistence: false,\n    disable_cookie: false,\n    secure_cookie: win.location.protocol === 'https:',\n    ip: true,\n    opt_out_capturing_by_default: false,\n    opt_out_persistence_by_default: false,\n    opt_out_capturing_persistence_type: 'localStorage',\n    opt_out_capturing_cookie_prefix: null,\n    property_blacklist: [],\n    sanitize_properties: null,\n    xhr_headers: {},\n    // { header: value, header2: value }\n    inapp_protocol: '//',\n    inapp_link_new_window: false,\n    request_batching: true,\n    properties_string_max_length: 65535,\n    session_recording: {\n      // select set of rrweb config options we expose to our users\n      // see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n      blockClass: 'ph-no-capture',\n      blockSelector: null,\n      ignoreClass: 'ph-ignore-input',\n      maskAllInputs: false,\n      maskInputOptions: {},\n      maskInputFn: null,\n      slimDOMOptions: {},\n      collectFonts: false\n    },\n    mask_all_element_attributes: false,\n    mask_all_text: false,\n    advanced_disable_decide: false,\n    // Used for internal testing\n    _onCapture: function _onCapture() {},\n    _capture_metrics: false\n  };\n};\n/**\n * PostHog Library Object\n * @constructor\n */\n\n\nvar PostHogLib = function PostHogLib() {};\n/**\n * create_mplib(token:string, config:object, name:string)\n *\n * This function is used by the init method of PostHogLib objects\n * as well as the main initializer at the end of the JSLib (that\n * initializes document.posthog as well as any additional instances\n * declared before this file has loaded).\n */\n\nvar create_mplib = function create_mplib(token, config, name) {\n  var instance,\n      target = name === PRIMARY_INSTANCE_NAME ? posthog_master : posthog_master[name];\n\n  if (target && init_type === INIT_MODULE) {\n    instance = target;\n  } else {\n    if (target && !_.isArray(target)) {\n      console$1.error('You have already initialized ' + name);\n      return;\n    }\n\n    instance = new PostHogLib();\n  }\n\n  instance._init(token, config, name);\n\n  instance['people'] = new PostHogPeople();\n\n  instance['people']._init(instance);\n\n  instance.featureFlags = new PostHogFeatureFlags(instance);\n  instance.feature_flags = instance.featureFlags;\n  instance.toolbar = new Toolbar(instance);\n  instance.sessionRecording = new SessionRecording(instance);\n  instance.sessionRecording.startRecordingIfEnabled();\n  instance['__autocapture_enabled'] = instance.get_config('autocapture');\n\n  if (instance.get_config('autocapture')) {\n    var num_buckets = 100;\n    var num_enabled_buckets = 100;\n\n    if (!autocapture.enabledForProject(instance.get_config('token'), num_buckets, num_enabled_buckets)) {\n      instance['__autocapture_enabled'] = false;\n      console$1.log('Not in active bucket: disabling Automatic Event Collection.');\n    } else if (!autocapture.isBrowserSupported()) {\n      instance['__autocapture_enabled'] = false;\n      console$1.log('Disabling Automatic Event Collection because this browser is not supported');\n    } else {\n      autocapture.init(instance);\n    }\n  }\n\n  if (!instance.get_config('advanced_disable_decide')) {\n    // As a reminder, if the /decide endpoint is disabled, feature flags, toolbar, session recording, autocapture,\n    // and compression will not be available.\n    new Decide(instance).call();\n  } // if any instance on the page has debug = true, we set the\n  // global debug to be true\n\n\n  Config.DEBUG = Config.DEBUG || instance.get_config('debug'); // if target is not defined, we called init after the lib already\n  // loaded, so there won't be an array of things to execute\n\n  if (!_.isUndefined(target) && _.isArray(target)) {\n    // Crunch through the people queue first - we queue this data up &\n    // flush on identify, so it's better to do all these operations first\n    instance._execute_array.call(instance['people'], target['people']);\n\n    instance._execute_array(target);\n  }\n\n  return instance;\n}; // Initialization methods\n\n/**\n * This function initializes a new instance of the PostHog capturing object.\n * All new instances are added to the main posthog object as sub properties (such as\n * posthog.library_name) and also returned by this function. To define a\n * second instance on the page, you would call:\n *\n *     posthog.init('new token', { your: 'config' }, 'library_name');\n *\n * and use it like so:\n *\n *     posthog.library_name.capture(...);\n *\n * @param {String} token   Your PostHog API token\n * @param {Object} [config]  A dictionary of config options to override. <a href=\"https://github.com/posthog/posthog-js/blob/6e0e873/src/posthog-core.js#L57-L91\">See a list of default config options</a>.\n * @param {String} [name]    The name for the new posthog instance that you want created\n */\n\n\nPostHogLib.prototype.init = function (token, config, name) {\n  if (_.isUndefined(name)) {\n    console$1.error('You must name your new library: init(token, config, name)');\n    return;\n  }\n\n  if (name === PRIMARY_INSTANCE_NAME) {\n    console$1.error('You must initialize the main posthog object right after you include the PostHog js snippet');\n    return;\n  }\n\n  var instance = create_mplib(token, config, name);\n  posthog_master[name] = instance;\n\n  instance._loaded();\n\n  return instance;\n}; // posthog._init(token:string, config:object, name:string)\n//\n// This function sets up the current instance of the posthog\n// library.  The difference between this method and the init(...)\n// method is this one initializes the actual instance, whereas the\n// init(...) method sets up a new library and calls _init on it.\n//\n\n\nPostHogLib.prototype._init = function (token, config, name) {\n  this['__loaded'] = true;\n  this['config'] = {};\n  this['_triggered_notifs'] = [];\n  this['compression'] = {};\n  this.set_config(_.extend({}, defaultConfig(), config, {\n    name: name,\n    token: token,\n    callback_fn: (name === PRIMARY_INSTANCE_NAME ? name : PRIMARY_INSTANCE_NAME + '.' + name) + '._jsc'\n  }));\n\n  this['_jsc'] = function () {};\n\n  this._captureMetrics = new CaptureMetrics(this.get_config('_capture_metrics'), _.bind(this.capture, this));\n  this._requestQueue = new RequestQueue(this._captureMetrics, _.bind(this._handle_queued_event, this));\n  this._retryQueue = new RetryQueue(this._captureMetrics);\n  this.__captureHooks = [];\n  this.__request_queue = [];\n  this['persistence'] = new PostHogPersistence(this['config']);\n\n  this._gdpr_init();\n\n  var uuid = _.UUID();\n\n  if (!this.get_distinct_id()) {\n    // There is no need to set the distinct id\n    // or the device id if something was already stored\n    // in the persitence\n    this.register_once({\n      distinct_id: uuid,\n      $device_id: uuid\n    }, '');\n  } // Set up the window close event handler \"unload\"\n\n\n  win.addEventListener && win.addEventListener('unload', this._handle_unload.bind(this));\n}; // Private methods\n\n\nPostHogLib.prototype._loaded = function () {\n  this.get_config('loaded')(this);\n\n  this._start_queue_if_opted_in(); // this happens after so a user can call identify in\n  // the loaded callback\n\n\n  if (this.get_config('capture_pageview')) {\n    this.capture_pageview();\n  }\n};\n\nPostHogLib.prototype._start_queue_if_opted_in = function () {\n  if (!this.has_opted_out_capturing()) {\n    if (this.get_config('request_batching')) {\n      this._requestQueue.poll();\n    }\n  }\n};\n\nPostHogLib.prototype._dom_loaded = function () {\n  if (!this.has_opted_out_capturing()) {\n    _.each(this.__request_queue, function (item) {\n      this._send_request.apply(this, item);\n    }, this);\n  }\n\n  delete this.__request_queue;\n\n  this._start_queue_if_opted_in();\n};\n/**\n * _prepare_callback() should be called by callers of _send_request for use\n * as the callback argument.\n *\n * If there is no callback, this returns null.\n * If we are going to make XHR/XDR requests, this returns a function.\n * If we are going to use script tags, this returns a string to use as the\n * callback GET param.\n */\n\n\nPostHogLib.prototype._prepare_callback = function (callback, data) {\n  if (_.isUndefined(callback)) {\n    return null;\n  }\n\n  if (USE_XHR) {\n    var callback_function = function callback_function(response) {\n      callback(response, data);\n    };\n\n    return callback_function;\n  } else {\n    // if the user gives us a callback, we store as a random\n    // property on this instances jsc function and update our\n    // callback string to reflect that.\n    var jsc = this['_jsc'];\n    var randomized_cb = '' + Math.floor(Math.random() * 100000000);\n    var callback_string = this.get_config('callback_fn') + '[' + randomized_cb + ']';\n\n    jsc[randomized_cb] = function (response) {\n      delete jsc[randomized_cb];\n      callback(response, data);\n    };\n\n    return callback_string;\n  }\n};\n\nPostHogLib.prototype._handle_unload = function () {\n  if (!this.get_config('request_batching')) {\n    if (this.get_config('capture_pageview')) {\n      this.capture('$pageleave', null, {\n        transport: 'sendbeacon'\n      });\n    }\n\n    return;\n  }\n\n  if (this.get_config('capture_pageview')) {\n    this.capture('$pageleave');\n  }\n\n  if (this.get_config('_capture_metrics')) {\n    this._requestQueue.updateUnloadMetrics();\n\n    this.capture('$capture_metrics', this._captureMetrics.metrics);\n\n    this._captureMetrics.captureInProgressRequests();\n  }\n\n  this._requestQueue.unload();\n\n  this._retryQueue.unload();\n};\n\nPostHogLib.prototype._handle_queued_event = function (url, data, options) {\n  var jsonData = JSON.stringify(data);\n\n  this.__compress_and_send_json_request(url, jsonData, options || __NOOPTIONS, __NOOP);\n};\n\nPostHogLib.prototype.__compress_and_send_json_request = function (url, jsonData, options, callback) {\n  var _compressData = compressData(decideCompression(this.compression), jsonData, options),\n      _compressData2 = _slicedToArray(_compressData, 2),\n      data = _compressData2[0],\n      _options = _compressData2[1];\n\n  this._send_request(url, data, _options, callback);\n};\n\nPostHogLib.prototype._send_request = function (url, data, options, callback) {\n  if (ENQUEUE_REQUESTS) {\n    this.__request_queue.push(arguments);\n\n    return;\n  }\n\n  var DEFAULT_OPTIONS = {\n    method: this.get_config('api_method'),\n    transport: this.get_config('api_transport'),\n    verbose: this.get_config('verbose')\n  };\n  options = _.extend(DEFAULT_OPTIONS, options || {});\n\n  if (!USE_XHR) {\n    options.method = 'GET';\n  }\n\n  var useSendBeacon = win.navigator.sendBeacon && options.transport.toLowerCase() === 'sendbeacon';\n  var args = options.urlQueryArgs || {};\n  args['ip'] = this.get_config('ip') ? 1 : 0;\n  args['_'] = new Date().getTime().toString();\n  url += '?' + _.HTTPBuildQuery(args);\n\n  if (_.isObject(data) && this.get_config('img')) {\n    var img = document$1.createElement('img');\n    img.src = url;\n    document$1.body.appendChild(img);\n  } else if (useSendBeacon) {\n    // beacon documentation https://w3c.github.io/beacon/\n    // beacons format the message and use the type property\n    // also no need to try catch as sendBeacon does not report errors\n    //   and is defined as best effort attempt\n    win.navigator.sendBeacon(url, encodePostData(data, _objectSpread2(_objectSpread2({}, options), {}, {\n      sendBeacon: true\n    })));\n  } else if (USE_XHR) {\n    try {\n      xhr({\n        url: url,\n        data: data,\n        headers: this.get_config('xhr_headers'),\n        options: options,\n        captureMetrics: this._captureMetrics,\n        callback: callback,\n        retriesPerformedSoFar: 0,\n        retryQueue: this._retryQueue\n      });\n    } catch (e) {\n      console$1.error(e);\n    }\n  } else {\n    var script = document$1.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.defer = true;\n    script.src = url;\n    var s = document$1.getElementsByTagName('script')[0];\n    s.parentNode.insertBefore(script, s);\n  }\n};\n/**\n * _execute_array() deals with processing any posthog function\n * calls that were called before the PostHog library were loaded\n * (and are thus stored in an array so they can be called later)\n *\n * Note: we fire off all the posthog function calls && user defined\n * functions BEFORE we fire off posthog capturing calls. This is so\n * identify/register/set_config calls can properly modify early\n * capturing calls.\n *\n * @param {Array} array\n */\n\n\nPostHogLib.prototype._execute_array = function (array) {\n  var fn_name,\n      alias_calls = [],\n      other_calls = [],\n      capturing_calls = [];\n\n  _.each(array, function (item) {\n    if (item) {\n      fn_name = item[0];\n\n      if (_.isArray(fn_name)) {\n        capturing_calls.push(item); // chained call e.g. posthog.get_group().set()\n      } else if (typeof item === 'function') {\n        item.call(this);\n      } else if (_.isArray(item) && fn_name === 'alias') {\n        alias_calls.push(item);\n      } else if (_.isArray(item) && fn_name.indexOf('capture') !== -1 && typeof this[fn_name] === 'function') {\n        capturing_calls.push(item);\n      } else {\n        other_calls.push(item);\n      }\n    }\n  }, this);\n\n  var execute = function execute(calls, context) {\n    _.each(calls, function (item) {\n      if (_.isArray(item[0])) {\n        // chained call\n        var caller = context;\n\n        _.each(item, function (call) {\n          caller = caller[call[0]].apply(caller, call.slice(1));\n        });\n      } else {\n        this[item[0]].apply(this, item.slice(1));\n      }\n    }, context);\n  };\n\n  execute(alias_calls, this);\n  execute(other_calls, this);\n  execute(capturing_calls, this);\n};\n/**\n * push() keeps the standard async-array-push\n * behavior around after the lib is loaded.\n * This is only useful for external integrations that\n * do not wish to rely on our convenience methods\n * (created in the snippet).\n *\n * ### Usage:\n *     posthog.push(['register', { a: 'b' }]);\n *\n * @param {Array} item A [function_name, args...] array to be executed\n */\n\n\nPostHogLib.prototype.push = function (item) {\n  this._execute_array([item]);\n};\n/**\n * Capture an event. This is the most important and\n * frequently used PostHog function.\n *\n * ### Usage:\n *\n *     // capture an event named 'Registered'\n *     posthog.capture('Registered', {'Gender': 'Male', 'Age': 21});\n *\n *     // capture an event using navigator.sendBeacon\n *     posthog.capture('Left page', {'duration_seconds': 35}, {transport: 'sendBeacon'});\n *\n * @param {String} event_name The name of the event. This can be anything the user does - 'Button Click', 'Sign Up', 'Item Purchased', etc.\n * @param {Object} [properties] A set of properties to include with the event you're sending. These describe the user who did the event or details about the event itself.\n * @param {Object} [options] Optional configuration for this capture request.\n * @param {String} [options.transport] Transport method for network request ('XHR' or 'sendBeacon').\n */\n\n\nPostHogLib.prototype.capture = addOptOutCheckPostHogLib(function (event_name, properties, options) {\n  this._captureMetrics.incr('capture');\n\n  if (event_name === '$snapshot') {\n    this._captureMetrics.incr('snapshot');\n  }\n\n  options = options || __NOOPTIONS;\n  var transport = options['transport']; // external API, don't minify 'transport' prop\n\n  if (transport) {\n    options.transport = transport; // 'transport' prop name can be minified internally\n  }\n\n  if (_.isUndefined(event_name) || typeof event_name !== 'string') {\n    console$1.error('No event name provided to posthog.capture');\n    return;\n  }\n\n  if (_.isBlockedUA(userAgent)) {\n    return;\n  }\n\n  var start_timestamp = this['persistence'].remove_event_timer(event_name); // update persistence\n\n  this['persistence'].update_search_keyword(document$1.referrer);\n\n  if (this.get_config('store_google')) {\n    this['persistence'].update_campaign_params();\n  }\n\n  if (this.get_config('save_referrer')) {\n    this['persistence'].update_referrer_info(document$1.referrer);\n  }\n\n  var data = {\n    event: event_name,\n    properties: this._calculate_event_properties(event_name, properties, start_timestamp)\n  };\n\n  if (event_name === '$identify' && options.$set) {\n    data['$set'] = options['$set'];\n  }\n\n  data = _.copyAndTruncateStrings(data, options._noTruncate ? null : this.get_config('properties_string_max_length'));\n\n  if (this.get_config('debug')) {\n    console$1.log('PostHog.js send', data);\n  }\n\n  var jsonData = JSON.stringify(data);\n  var url = this.get_config('api_host') + (options.endpoint || '/e/');\n  var has_unique_traits = options !== __NOOPTIONS;\n\n  if (this.get_config('request_batching') && (!has_unique_traits || options._batchKey)) {\n    data['timestamp'] = new Date();\n\n    this._requestQueue.enqueue(url, data, options);\n  } else {\n    this.__compress_and_send_json_request(url, jsonData, options);\n  }\n\n  this._invokeCaptureHooks(event_name);\n\n  return data;\n});\n\nPostHogLib.prototype._addCaptureHook = function (callback) {\n  this.__captureHooks.push(callback);\n};\n\nPostHogLib.prototype._invokeCaptureHooks = function (eventName) {\n  this.config._onCapture(eventName);\n\n  _.each(this.__captureHooks, function (callback) {\n    return callback(eventName);\n  });\n};\n\nPostHogLib.prototype._calculate_event_properties = function (event_name, event_properties, start_timestamp) {\n  // set defaults\n  var properties = event_properties || {};\n  properties['token'] = this.get_config('token');\n\n  if (event_name === '$snapshot') {\n    var persistenceProps = this.persistence.properties();\n    properties['distinct_id'] = persistenceProps.distinct_id;\n    return properties;\n  } // set $duration if time_event was previously called for this event\n\n\n  if (!_.isUndefined(start_timestamp)) {\n    var duration_in_ms = new Date().getTime() - start_timestamp;\n    properties['$duration'] = parseFloat((duration_in_ms / 1000).toFixed(3));\n  } // note: extend writes to the first object, so lets make sure we\n  // don't write to the persistence properties object and info\n  // properties object by passing in a new object\n  // update properties with pageview info and super-properties\n\n\n  properties = _.extend({}, _.info.properties(), this['persistence'].properties(), properties);\n  var property_blacklist = this.get_config('property_blacklist');\n\n  if (_.isArray(property_blacklist)) {\n    _.each(property_blacklist, function (blacklisted_prop) {\n      delete properties[blacklisted_prop];\n    });\n  } else {\n    console$1.error('Invalid value for property_blacklist config: ' + property_blacklist);\n  }\n\n  var sanitize_properties = this.get_config('sanitize_properties');\n\n  if (sanitize_properties) {\n    properties = sanitize_properties(properties, event_name);\n  }\n\n  return properties;\n};\n/**\n * Capture a page view event.\n * This function is called by default on page load unless the\n * capture_pageview configuration variable is false.\n *\n * @param {String} [page] The url of the page to record. If you don't include this, it defaults to the current url.\n * @api private\n */\n\n\nPostHogLib.prototype.capture_pageview = function (page) {\n  if (_.isUndefined(page)) {\n    page = document$1.location.href;\n  }\n\n  this.capture('$pageview');\n};\n/**\n * Register a set of super properties, which are included with all\n * events. This will overwrite previous super property values.\n *\n * ### Usage:\n *\n *     // register 'Gender' as a super property\n *     posthog.register({'Gender': 'Female'});\n *\n *     // register several super properties when a user signs up\n *     posthog.register({\n *         'Email': 'jdoe@example.com',\n *         'Account Type': 'Free'\n *     });\n *\n * @param {Object} properties An associative array of properties to store about the user\n * @param {Number} [days] How many days since the user's last visit to store the super properties\n */\n\n\nPostHogLib.prototype.register = function (props, days) {\n  this['persistence'].register(props, days);\n};\n/**\n * Register a set of super properties only once. This will not\n * overwrite previous super property values, unlike register().\n *\n * ### Usage:\n *\n *     // register a super property for the first time only\n *     posthog.register_once({\n *         'First Login Date': new Date().toISOString()\n *     });\n *\n * ### Notes:\n *\n * If default_value is specified, current super properties\n * with that value will be overwritten.\n *\n * @param {Object} properties An associative array of properties to store about the user\n * @param {*} [default_value] Value to override if already set in super properties (ex: 'False') Default: 'None'\n * @param {Number} [days] How many days since the users last visit to store the super properties\n */\n\n\nPostHogLib.prototype.register_once = function (props, default_value, days) {\n  this['persistence'].register_once(props, default_value, days);\n};\n/**\n * Delete a super property stored with the current user.\n *\n * @param {String} property The name of the super property to remove\n */\n\n\nPostHogLib.prototype.unregister = function (property) {\n  this['persistence'].unregister(property);\n};\n\nPostHogLib.prototype._register_single = function (prop, value) {\n  var props = {};\n  props[prop] = value;\n  this.register(props);\n};\n/*\n * See if feature flag is enabled for user.\n *\n * ### Usage:\n *\n *     if(posthog.isFeatureEnabled('beta-feature')) { // do something }\n *\n * @param {Object|String} prop Key of the feature flag.\n * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n */\n\n\nPostHogLib.prototype.isFeatureEnabled = function (key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return this.featureFlags.isFeatureEnabled(key, options);\n};\n\nPostHogLib.prototype.reloadFeatureFlags = function () {\n  return this.feature_flags.reloadFeatureFlags();\n};\n/*\n * Register an event listener that runs when feature flags become available or when they change.\n * If there are flags, the listener is called immediately in addition to being called on future changes.\n *\n * ### Usage:\n *\n *     posthog.onFeatureFlags(function(featureFlags) { // do something })\n *\n * @param {Function} [callback] The callback function will be called once the feature flags are ready or when they are updated.\n *                              It'll return a list of feature flags enabled for the user.\n */\n\n\nPostHogLib.prototype.onFeatureFlags = function (callback) {\n  this.persistence.addFeatureFlagsHandler(callback);\n  var flags = this.feature_flags.getFlags();\n\n  if (flags) {\n    callback(flags);\n  }\n};\n/**\n * Identify a user with a unique ID instead of a PostHog\n * randomly generated distinct_id. If the method is never called,\n * then unique visitors will be identified by a UUID generated\n * the first time they visit the site.\n *\n * If user properties are passed, they are also sent to posthog.\n *\n * ### Usage:\n *\n *      posthog.identify('[user unique id]')\n *      posthog.identify('[user unique id]', { email: 'john@example.com' })\n *      posthog.identify('[user unique id]', {}, { referral_code: '12345' })\n *\n * ### Notes:\n *\n * You can call this function to overwrite a previously set\n * unique ID for the current user. PostHog cannot translate\n * between IDs at this time, so when you change a user's ID\n * they will appear to be a new user.\n *\n * When used alone, posthog.identify will change the user's\n * distinct_id to the unique ID provided. When used in tandem\n * with posthog.alias, it will allow you to identify based on\n * unique ID and map that back to the original, anonymous\n * distinct_id given to the user upon her first arrival to your\n * site (thus connecting anonymous pre-signup activity to\n * post-signup activity). Though the two work together, do not\n * call identify() at the same time as alias(). Calling the two\n * at the same time can cause a race condition, so it is best\n * practice to call identify on the original, anonymous ID\n * right after you've aliased it.\n *\n * @param {String} [unique_id] A string that uniquely identifies a user. If not provided, the distinct_id currently in the persistent store (cookie or localStorage) will be used.\n * @param {Object} [userProperties] Optional: An associative array of properties to store about the user\n * @param {Object} [userPropertiesToSetOnce] Optional: An associative array of properties to store about the user. If property is previously set, this does not override that value.\n */\n\n\nPostHogLib.prototype.identify = function (new_distinct_id, userPropertiesToSet, userPropertiesToSetOnce) {\n  //if the new_distinct_id has not been set ignore the identify event\n  if (!new_distinct_id) {\n    console$1.error('Unique user id has not been set in posthog.identify');\n    return;\n  }\n\n  this._captureMetrics.incr('identify');\n\n  var previous_distinct_id = this.get_distinct_id();\n  this.register({\n    $user_id: new_distinct_id\n  });\n\n  if (!this.get_property('$device_id')) {\n    // The persisted distinct id might not actually be a device id at all\n    // it might be a distinct id of the user from before\n    var device_id = previous_distinct_id;\n    this.register_once({\n      $had_persisted_distinct_id: true,\n      $device_id: device_id\n    }, '');\n  } // identify only changes the distinct id if it doesn't match either the existing or the alias;\n  // if it's new, blow away the alias as well.\n\n\n  if (new_distinct_id !== previous_distinct_id && new_distinct_id !== this.get_property(ALIAS_ID_KEY)) {\n    this.unregister(ALIAS_ID_KEY);\n    this.register({\n      distinct_id: new_distinct_id\n    });\n  } // send an $identify event any time the distinct_id is changing and the old ID is an anoymous ID\n  // - logic on the server will determine whether or not to do anything with it.\n\n\n  if (new_distinct_id !== previous_distinct_id && (!this.get_property('$device_id') || previous_distinct_id === this.get_property('$device_id'))) {\n    this.capture('$identify', {\n      distinct_id: new_distinct_id,\n      $anon_distinct_id: previous_distinct_id\n    }, {\n      $set: userPropertiesToSet || {}\n    }, {\n      $set_once: userPropertiesToSetOnce || {}\n    });\n  } else {\n    if (userPropertiesToSet) {\n      this['people'].set(userPropertiesToSet);\n    }\n\n    if (userPropertiesToSetOnce) {\n      this['people'].set_once(userPropertiesToSetOnce);\n    }\n  }\n\n  this.reloadFeatureFlags();\n};\n/**\n * Clears super properties and generates a new random distinct_id for this instance.\n * Useful for clearing data when a user logs out.\n */\n\n\nPostHogLib.prototype.reset = function (reset_device_id) {\n  var device_id = this.get_property('$device_id');\n  this['persistence'].clear();\n\n  var uuid = _.UUID();\n\n  this.register_once({\n    distinct_id: uuid,\n    $device_id: reset_device_id ? uuid : device_id\n  }, '');\n};\n/**\n * Returns the current distinct id of the user. This is either the id automatically\n * generated by the library or the id that has been passed by a call to identify().\n *\n * ### Notes:\n *\n * get_distinct_id() can only be called after the PostHog library has finished loading.\n * init() has a loaded function available to handle this automatically. For example:\n *\n *     // set distinct_id after the posthog library has loaded\n *     posthog.init('YOUR PROJECT TOKEN', {\n *         loaded: function(posthog) {\n *             distinct_id = posthog.get_distinct_id();\n *         }\n *     });\n */\n\n\nPostHogLib.prototype.get_distinct_id = function () {\n  return this.get_property('distinct_id');\n};\n/**\n * Create an alias, which PostHog will use to link two distinct_ids going forward (not retroactively).\n * Multiple aliases can map to the same original ID, but not vice-versa. Aliases can also be chained - the\n * following is a valid scenario:\n *\n *     posthog.alias('new_id', 'existing_id');\n *     ...\n *     posthog.alias('newer_id', 'new_id');\n *\n * If the original ID is not passed in, we will use the current distinct_id - probably the auto-generated GUID.\n *\n * ### Notes:\n *\n * The best practice is to call alias() when a unique ID is first created for a user\n * (e.g., when a user first registers for an account and provides an email address).\n * alias() should never be called more than once for a given user, except to\n * chain a newer ID to a previously new ID, as described above.\n *\n * @param {String} alias A unique identifier that you want to use for this user in the future.\n * @param {String} [original] The current identifier being used for this user.\n */\n\n\nPostHogLib.prototype.alias = function (alias, original) {\n  // If the $people_distinct_id key exists in persistence, there has been a previous\n  // posthog.people.identify() call made for this user. It is VERY BAD to make an alias with\n  // this ID, as it will duplicate users.\n  if (alias === this.get_property(PEOPLE_DISTINCT_ID_KEY)) {\n    console$1.critical('Attempting to create alias for existing People user - aborting.');\n    return -2;\n  }\n\n  var _this = this;\n\n  if (_.isUndefined(original)) {\n    original = this.get_distinct_id();\n  }\n\n  if (alias !== original) {\n    this._register_single(ALIAS_ID_KEY, alias);\n\n    return this.capture('$create_alias', {\n      alias: alias,\n      distinct_id: original\n    }, function () {\n      // Flush the people queue\n      _this.identify(alias);\n    });\n  } else {\n    console$1.error('alias matches current distinct_id - skipping api call.');\n    this.identify(alias);\n    return -1;\n  }\n};\n/**\n * Update the configuration of a posthog library instance.\n *\n * The default config is:\n *\n *     {\n *       // Posthog host\n *       api_host: 'https://app.posthog.com',\n *\n *       // HTTP method for capturing requests\n *       api_method: 'POST'\n *\n *       // Automatically capture clicks, form submissions and change events\n *       autocapture: true\n *\n *       // Capture rage clicks (beta) - useful for session recording\n *       rageclick: false\n *\n *       // transport for sending requests ('XHR' or 'sendBeacon')\n *       // NB: sendBeacon should only be used for scenarios such as\n *       // page unload where a \"best-effort\" attempt to send is\n *       // acceptable; the sendBeacon API does not support callbacks\n *       // or any way to know the result of the request. PostHog\n *       // capturing via sendBeacon will not support any event-\n *       // batching or retry mechanisms.\n *       api_transport: 'XHR'\n *\n *       // super properties cookie expiration (in days)\n *       cookie_expiration: 365\n *\n *       // super properties span subdomains\n *       cross_subdomain_cookie: true\n *\n *       // debug mode\n *       debug: false\n *\n *       // if this is true, the posthog cookie or localStorage entry\n *       // will be deleted, and no user persistence will take place\n *       disable_persistence: false\n *\n *       // if this is true, PostHog will automatically determine\n *       // City, Region and Country data using the IP address of\n *       //the client\n *       ip: true\n *\n *       // opt users out of capturing by this PostHog instance by default\n *       opt_out_capturing_by_default: false\n *\n *       // opt users out of browser data storage by this PostHog instance by default\n *       opt_out_persistence_by_default: false\n *\n *       // persistence mechanism used by opt-in/opt-out methods - cookie\n *       // or localStorage - falls back to cookie if localStorage is unavailable\n *       opt_out_capturing_persistence_type: 'localStorage'\n *\n *       // customize the name of cookie/localStorage set by opt-in/opt-out methods\n *       opt_out_capturing_cookie_prefix: null\n *\n *       // type of persistent store for super properties (cookie/\n *       // localStorage) if set to 'localStorage', any existing\n *       // posthog cookie value with the same persistence_name\n *       // will be transferred to localStorage and deleted\n *       persistence: 'cookie'\n *\n *       // name for super properties persistent store\n *       persistence_name: ''\n *\n *       // names of properties/superproperties which should never\n *       // be sent with capture() calls\n *       property_blacklist: []\n *\n *       // if this is true, posthog cookies will be marked as\n *       // secure, meaning they will only be transmitted over https\n *       secure_cookie: false\n *\n *       // should we capture a page view on page load\n *       capture_pageview: true\n *\n *       // if you set upgrade to be true, the library will check for\n *       // a cookie from our old js library and import super\n *       // properties from it, then the old cookie is deleted\n *       // The upgrade config option only works in the initialization,\n *       // so make sure you set it when you create the library.\n *       upgrade: false\n *\n *       // if this is true, session recording is always disabled.\n *       disable_session_recording: false,\n *\n *       // extra HTTP request headers to set for each API request, in\n *       // the format {'Header-Name': value}\n *       xhr_headers: {}\n *\n *       // protocol for fetching in-app message resources, e.g.\n *       // 'https://' or 'http://'; defaults to '//' (which defers to the\n *       // current page's protocol)\n *       inapp_protocol: '//'\n *\n *       // whether to open in-app message link in new tab/window\n *       inapp_link_new_window: false\n *\n *      // a set of rrweb config options that PostHog users can configure\n *      // see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n *      session_recording: {\n *         blockClass: 'ph-no-capture',\n *         blockSelector: null,\n *         ignoreClass: 'ph-ignore-input',\n *         maskAllInputs: false,\n *         maskInputOptions: {},\n *         maskInputFn: null,\n *         slimDOMOptions: {},\n *         collectFonts: false\n *      }\n *\n *      // prevent autocapture from capturing any attribute names on elements\n *      mask_all_element_attributes: false\n *\n *      // prevent autocapture from capturing textContent on all elements\n *      mask_all_text: false\n *     }\n *\n *\n * @param {Object} config A dictionary of new configuration values to update\n */\n\n\nPostHogLib.prototype.set_config = function (config) {\n  var oldConfig = _objectSpread2({}, this.config);\n\n  if (_.isObject(config)) {\n    _.extend(this['config'], config);\n\n    if (!this.get_config('persistence_name')) {\n      this['config']['persistence_name'] = this['config']['cookie_name'];\n    }\n\n    if (!this.get_config('disable_persistence')) {\n      this['config']['disable_persistence'] = this['config']['disable_cookie'];\n    }\n\n    if (this['persistence']) {\n      this['persistence'].update_config(this['config']);\n    }\n\n    if (localStore.is_supported() && localStore.get('ph_debug') === 'true') {\n      this['config']['debug'] = true;\n    }\n\n    Config.DEBUG = Config.DEBUG || this.get_config('debug');\n\n    if (this.sessionRecording && typeof config.disable_session_recording !== 'undefined') {\n      if (oldConfig.disable_session_recording !== config.disable_session_recording) {\n        if (config.disable_session_recording) {\n          this.sessionRecording.stopRecording();\n        } else {\n          this.sessionRecording.startRecordingIfEnabled();\n        }\n      }\n    }\n  }\n};\n/**\n * turns session recording on, and updates the config option\n * disable_session_recording to false\n */\n\n\nPostHogLib.prototype.startSessionRecording = function () {\n  this.set_config({\n    disable_session_recording: false\n  });\n};\n/**\n * turns session recording off, and updates the config option\n * disable_session_recording to true\n */\n\n\nPostHogLib.prototype.stopSessionRecording = function () {\n  this.set_config({\n    disable_session_recording: true\n  });\n};\n/**\n * returns a boolean indicating whether session recording\n * is currently running\n */\n\n\nPostHogLib.prototype.sessionRecordingStarted = function () {\n  return this.sessionRecording.started();\n};\n/**\n * returns the current config object for the library.\n */\n\n\nPostHogLib.prototype.get_config = function (prop_name) {\n  return this['config'][prop_name];\n};\n/**\n * Returns the value of the super property named property_name. If no such\n * property is set, get_property() will return the undefined value.\n *\n * ### Notes:\n *\n * get_property() can only be called after the PostHog library has finished loading.\n * init() has a loaded function available to handle this automatically. For example:\n *\n *     // grab value for 'user_id' after the posthog library has loaded\n *     posthog.init('YOUR PROJECT TOKEN', {\n *         loaded: function(posthog) {\n *             user_id = posthog.get_property('user_id');\n *         }\n *     });\n *\n * @param {String} property_name The name of the super property you want to retrieve\n */\n\n\nPostHogLib.prototype.get_property = function (property_name) {\n  return this['persistence']['props'][property_name];\n};\n\nPostHogLib.prototype.toString = function () {\n  var name = this.get_config('name');\n\n  if (name !== PRIMARY_INSTANCE_NAME) {\n    name = PRIMARY_INSTANCE_NAME + '.' + name;\n  }\n\n  return name;\n}; // perform some housekeeping around GDPR opt-in/out state\n\n\nPostHogLib.prototype._gdpr_init = function () {\n  var is_localStorage_requested = this.get_config('opt_out_capturing_persistence_type') === 'localStorage'; // try to convert opt-in/out cookies to localStorage if possible\n\n  if (is_localStorage_requested && localStore.is_supported()) {\n    if (!this.has_opted_in_capturing() && this.has_opted_in_capturing({\n      persistence_type: 'cookie'\n    })) {\n      this.opt_in_capturing({\n        enable_persistence: false\n      });\n    }\n\n    if (!this.has_opted_out_capturing() && this.has_opted_out_capturing({\n      persistence_type: 'cookie'\n    })) {\n      this.opt_out_capturing({\n        clear_persistence: false\n      });\n    }\n\n    this.clear_opt_in_out_capturing({\n      persistence_type: 'cookie',\n      enable_persistence: false\n    });\n  } // check whether the user has already opted out - if so, clear & disable persistence\n\n\n  if (this.has_opted_out_capturing()) {\n    this._gdpr_update_persistence({\n      clear_persistence: true\n    }); // check whether we should opt out by default\n    // note: we don't clear persistence here by default since opt-out default state is often\n    //       used as an initial state while GDPR information is being collected\n\n  } else if (!this.has_opted_in_capturing() && (this.get_config('opt_out_capturing_by_default') || cookieStore.get('ph_optout'))) {\n    cookieStore.remove('ph_optout');\n    this.opt_out_capturing({\n      clear_persistence: this.get_config('opt_out_persistence_by_default')\n    });\n  }\n};\n/**\n * Enable or disable persistence based on options\n * only enable/disable if persistence is not already in this state\n * @param {boolean} [options.clear_persistence] If true, will delete all data stored by the sdk in persistence and disable it\n * @param {boolean} [options.enable_persistence] If true, will re-enable sdk persistence\n */\n\n\nPostHogLib.prototype._gdpr_update_persistence = function (options) {\n  var disabled;\n\n  if (options && options['clear_persistence']) {\n    disabled = true;\n  } else if (options && options['enable_persistence']) {\n    disabled = false;\n  } else {\n    return;\n  }\n\n  if (!this.get_config('disable_persistence') && this['persistence'].disabled !== disabled) {\n    this['persistence'].set_disabled(disabled);\n  }\n}; // call a base gdpr function after constructing the appropriate token and options args\n\n\nPostHogLib.prototype._gdpr_call_func = function (func, options) {\n  options = _.extend({\n    capture: _.bind(this.capture, this),\n    persistence_type: this.get_config('opt_out_capturing_persistence_type'),\n    cookie_prefix: this.get_config('opt_out_capturing_cookie_prefix'),\n    cookie_expiration: this.get_config('cookie_expiration'),\n    cross_subdomain_cookie: this.get_config('cross_subdomain_cookie'),\n    secure_cookie: this.get_config('secure_cookie')\n  }, options); // check if localStorage can be used for recording opt out status, fall back to cookie if not\n\n  if (!localStore.is_supported() && options['persistence_type'] === 'localStorage') {\n    options['persistence_type'] = 'cookie';\n  }\n\n  return func(this.get_config('token'), {\n    capture: options['capture'],\n    captureEventName: options['capture_event_name'],\n    captureProperties: options['capture_properties'],\n    persistenceType: options['persistence_type'],\n    persistencePrefix: options['cookie_prefix'],\n    cookieExpiration: options['cookie_expiration'],\n    crossSubdomainCookie: options['cross_subdomain_cookie'],\n    secureCookie: options['secure_cookie']\n  });\n};\n/**\n * Opt the user in to data capturing and cookies/localstorage for this PostHog instance\n *\n * ### Usage\n *\n *     // opt user in\n *     posthog.opt_in_capturing();\n *\n *     // opt user in with specific event name, properties, cookie configuration\n *     posthog.opt_in_capturing({\n *         capture_event_name: 'User opted in',\n *         capture_event_properties: {\n *             'Email': 'jdoe@example.com'\n *         },\n *         cookie_expiration: 30,\n *         secure_cookie: true\n *     });\n *\n * @param {Object} [options] A dictionary of config options to override\n * @param {function} [options.capture] Function used for capturing a PostHog event to record the opt-in action (default is this PostHog instance's capture method)\n * @param {string} [options.capture_event_name=$opt_in] Event name to be used for capturing the opt-in action\n * @param {Object} [options.capture_properties] Set of properties to be captured along with the opt-in action\n * @param {boolean} [options.enable_persistence=true] If true, will re-enable sdk persistence\n * @param {string} [options.persistence_type=localStorage] Persistence mechanism used - cookie or localStorage - falls back to cookie if localStorage is unavailable\n * @param {string} [options.cookie_prefix=__ph_opt_in_out] Custom prefix to be used in the cookie/localstorage name\n * @param {Number} [options.cookie_expiration] Number of days until the opt-in cookie expires (overrides value specified in this PostHog instance's config)\n * @param {boolean} [options.cross_subdomain_cookie] Whether the opt-in cookie is set as cross-subdomain or not (overrides value specified in this PostHog instance's config)\n * @param {boolean} [options.secure_cookie] Whether the opt-in cookie is set as secure or not (overrides value specified in this PostHog instance's config)\n */\n\n\nPostHogLib.prototype.opt_in_capturing = function (options) {\n  options = _.extend({\n    enable_persistence: true\n  }, options);\n\n  this._gdpr_call_func(optIn, options);\n\n  this._gdpr_update_persistence(options);\n};\n/**\n * Opt the user out of data capturing and cookies/localstorage for this PostHog instance\n *\n * ### Usage\n *\n *     // opt user out\n *     posthog.opt_out_capturing();\n *\n *     // opt user out with different cookie configuration from PostHog instance\n *     posthog.opt_out_capturing({\n *         cookie_expiration: 30,\n *         secure_cookie: true\n *     });\n *\n * @param {Object} [options] A dictionary of config options to override\n * @param {boolean} [options.clear_persistence=true] If true, will delete all data stored by the sdk in persistence\n * @param {string} [options.persistence_type=localStorage] Persistence mechanism used - cookie or localStorage - falls back to cookie if localStorage is unavailable\n * @param {string} [options.cookie_prefix=__ph_opt_in_out] Custom prefix to be used in the cookie/localstorage name\n * @param {Number} [options.cookie_expiration] Number of days until the opt-in cookie expires (overrides value specified in this PostHog instance's config)\n * @param {boolean} [options.cross_subdomain_cookie] Whether the opt-in cookie is set as cross-subdomain or not (overrides value specified in this PostHog instance's config)\n * @param {boolean} [options.secure_cookie] Whether the opt-in cookie is set as secure or not (overrides value specified in this PostHog instance's config)\n */\n\n\nPostHogLib.prototype.opt_out_capturing = function (options) {\n  options = _.extend({\n    clear_persistence: true\n  }, options);\n\n  this._gdpr_call_func(optOut, options);\n\n  this._gdpr_update_persistence(options);\n};\n/**\n * Check whether the user has opted in to data capturing and cookies/localstorage for this PostHog instance\n *\n * ### Usage\n *\n *     var has_opted_in = posthog.has_opted_in_capturing();\n *     // use has_opted_in value\n *\n * @param {Object} [options] A dictionary of config options to override\n * @param {string} [options.persistence_type=localStorage] Persistence mechanism used - cookie or localStorage - falls back to cookie if localStorage is unavailable\n * @param {string} [options.cookie_prefix=__ph_opt_in_out] Custom prefix to be used in the cookie/localstorage name\n * @returns {boolean} current opt-in status\n */\n\n\nPostHogLib.prototype.has_opted_in_capturing = function (options) {\n  return this._gdpr_call_func(hasOptedIn, options);\n};\n/**\n * Check whether the user has opted out of data capturing and cookies/localstorage for this PostHog instance\n *\n * ### Usage\n *\n *     var has_opted_out = posthog.has_opted_out_capturing();\n *     // use has_opted_out value\n *\n * @param {Object} [options] A dictionary of config options to override\n * @param {string} [options.persistence_type=localStorage] Persistence mechanism used - cookie or localStorage - falls back to cookie if localStorage is unavailable\n * @param {string} [options.cookie_prefix=__ph_opt_in_out] Custom prefix to be used in the cookie/localstorage name\n * @returns {boolean} current opt-out status\n */\n\n\nPostHogLib.prototype.has_opted_out_capturing = function (options) {\n  return this._gdpr_call_func(hasOptedOut, options);\n};\n/**\n * Clear the user's opt in/out status of data capturing and cookies/localstorage for this PostHog instance\n *\n * ### Usage\n *\n *     // clear user's opt-in/out status\n *     posthog.clear_opt_in_out_capturing();\n *\n *     // clear user's opt-in/out status with specific cookie configuration - should match\n *     // configuration used when opt_in_capturing/opt_out_capturing methods were called.\n *     posthog.clear_opt_in_out_capturing({\n *         cookie_expiration: 30,\n *         secure_cookie: true\n *     });\n *\n * @param {Object} [options] A dictionary of config options to override\n * @param {boolean} [options.enable_persistence=true] If true, will re-enable sdk persistence\n * @param {string} [options.persistence_type=localStorage] Persistence mechanism used - cookie or localStorage - falls back to cookie if localStorage is unavailable\n * @param {string} [options.cookie_prefix=__ph_opt_in_out] Custom prefix to be used in the cookie/localstorage name\n * @param {Number} [options.cookie_expiration] Number of days until the opt-in cookie expires (overrides value specified in this PostHog instance's config)\n * @param {boolean} [options.cross_subdomain_cookie] Whether the opt-in cookie is set as cross-subdomain or not (overrides value specified in this PostHog instance's config)\n * @param {boolean} [options.secure_cookie] Whether the opt-in cookie is set as secure or not (overrides value specified in this PostHog instance's config)\n */\n\n\nPostHogLib.prototype.clear_opt_in_out_capturing = function (options) {\n  options = _.extend({\n    enable_persistence: true\n  }, options);\n\n  this._gdpr_call_func(clearOptInOut, options);\n\n  this._gdpr_update_persistence(options);\n};\n/**\n * Integrate Sentry with PostHog. This will add a direct link to the person in Sentry, and an $exception event in PostHog\n *\n * ### Usage\n *\n *     Sentry.init({\n *          dsn: 'https://example',\n *          integrations: [\n *              new posthog.SentryIntegration(posthog)\n *          ]\n *     })\n *\n * @param {Object} [posthog] The posthog object\n * @param {string} [organization] Optional: The Sentry organization, used to send a direct link from PostHog to Sentry\n * @param {Number} [projectId] Optional: The Sentry project id, used to send a direct link from PostHog to Sentry\n * @param {string} [prefix] Optional: Url of a self-hosted sentry instance (default: https://sentry.io/organizations/)\n */\n\n\nPostHogLib.prototype.sentry_integration = function (_posthog, organization, projectId, prefix) {\n  // setupOnce gets called by Sentry when it intializes the plugin\n  this.name = 'posthog-js';\n\n  this.setupOnce = function (addGlobalEventProcessor) {\n    addGlobalEventProcessor(function (event) {\n      if (event.level !== 'error' || !_posthog.__loaded) return event;\n      if (!event.tags) event.tags = {};\n      event.tags['PostHog URL'] = _posthog.config.api_host + '/person/' + _posthog.get_distinct_id();\n      var data = {\n        $sentry_event_id: event.event_id,\n        $sentry_exception: event.exception\n      };\n      if (organization && projectId) data['$sentry_url'] = (prefix || 'https://sentry.io/organizations/') + organization + '/issues/?project=' + projectId + '&query=' + event.event_id;\n\n      _posthog.capture('$exception', data);\n\n      return event;\n    });\n  };\n};\n\nPostHogLib.prototype.debug = function (debug) {\n  if (debug === false) {\n    win.console.log(\"You've disabled debug mode.\");\n    localStorage && localStorage.setItem('ph_debug', undefined);\n    this.set_config({\n      debug: false\n    });\n  } else {\n    win.console.log(\"You're now in debug mode. All calls to PostHog will be logged in your console.\\nYou can disable this with `posthog.debug(false)`.\");\n    localStorage && localStorage.setItem('ph_debug', 'true');\n    this.set_config({\n      debug: true\n    });\n  }\n};\n\nPostHogLib.prototype.decodeLZ64 = LZString.decompressFromBase64; // EXPORTS (for closure compiler)\n// PostHogLib Exports\n\nPostHogLib.prototype['init'] = PostHogLib.prototype.init;\nPostHogLib.prototype['reset'] = PostHogLib.prototype.reset;\nPostHogLib.prototype['capture'] = PostHogLib.prototype.capture;\nPostHogLib.prototype['capture_pageview'] = PostHogLib.prototype.capture_pageview;\nPostHogLib.prototype['register'] = PostHogLib.prototype.register;\nPostHogLib.prototype['register_once'] = PostHogLib.prototype.register_once;\nPostHogLib.prototype['unregister'] = PostHogLib.prototype.unregister;\nPostHogLib.prototype['identify'] = PostHogLib.prototype.identify;\nPostHogLib.prototype['alias'] = PostHogLib.prototype.alias;\nPostHogLib.prototype['set_config'] = PostHogLib.prototype.set_config;\nPostHogLib.prototype['get_config'] = PostHogLib.prototype.get_config;\nPostHogLib.prototype['get_property'] = PostHogLib.prototype.get_property;\nPostHogLib.prototype['get_distinct_id'] = PostHogLib.prototype.get_distinct_id;\nPostHogLib.prototype['toString'] = PostHogLib.prototype.toString;\nPostHogLib.prototype['opt_out_captureing'] = PostHogLib.prototype.opt_out_captureing;\nPostHogLib.prototype['opt_in_captureing'] = PostHogLib.prototype.opt_in_captureing;\nPostHogLib.prototype['has_opted_out_captureing'] = PostHogLib.prototype.has_opted_out_captureing;\nPostHogLib.prototype['has_opted_in_captureing'] = PostHogLib.prototype.has_opted_in_captureing;\nPostHogLib.prototype['clear_opt_in_out_captureing'] = PostHogLib.prototype.clear_opt_in_out_captureing;\nPostHogLib.prototype['opt_out_capturing'] = PostHogLib.prototype.opt_out_capturing;\nPostHogLib.prototype['opt_in_capturing'] = PostHogLib.prototype.opt_in_capturing;\nPostHogLib.prototype['has_opted_out_capturing'] = PostHogLib.prototype.has_opted_out_capturing;\nPostHogLib.prototype['has_opted_in_capturing'] = PostHogLib.prototype.has_opted_in_capturing;\nPostHogLib.prototype['clear_opt_in_out_capturing'] = PostHogLib.prototype.clear_opt_in_out_capturing;\nPostHogLib.prototype['isFeatureEnabled'] = PostHogLib.prototype.isFeatureEnabled;\nPostHogLib.prototype['reloadFeatureFlags'] = PostHogLib.prototype.reloadFeatureFlags;\nPostHogLib.prototype['onFeatureFlags'] = PostHogLib.prototype.onFeatureFlags;\nPostHogLib.prototype['decodeLZ64'] = PostHogLib.prototype.decodeLZ64;\nPostHogLib.prototype['SentryIntegration'] = PostHogLib.prototype.sentry_integration;\nPostHogLib.prototype['debug'] = PostHogLib.prototype.debug;\nPostHogLib.prototype['LIB_VERSION'] = Config.LIB_VERSION;\nPostHogLib.prototype['startSessionRecording'] = PostHogLib.prototype.startSessionRecording;\nPostHogLib.prototype['stopSessionRecording'] = PostHogLib.prototype.stopSessionRecording;\nPostHogLib.prototype['sessionRecordingStarted'] = PostHogLib.prototype.sessionRecordingStarted; // PostHogPersistence Exports\n\nPostHogPersistence.prototype['properties'] = PostHogPersistence.prototype.properties;\nPostHogPersistence.prototype['update_search_keyword'] = PostHogPersistence.prototype.update_search_keyword;\nPostHogPersistence.prototype['update_referrer_info'] = PostHogPersistence.prototype.update_referrer_info;\nPostHogPersistence.prototype['get_cross_subdomain'] = PostHogPersistence.prototype.get_cross_subdomain;\nPostHogPersistence.prototype['clear'] = PostHogPersistence.prototype.clear;\n\n_.safewrap_class(PostHogLib, ['identify']);\n\nvar instances = {};\n\nvar extend_mp = function extend_mp() {\n  // add all the sub posthog instances\n  _.each(instances, function (instance, name) {\n    if (name !== PRIMARY_INSTANCE_NAME) {\n      posthog_master[name] = instance;\n    }\n  }); // add private functions as _\n\n\n  posthog_master['_'] = _;\n};\n\nvar override_ph_init_func = function override_ph_init_func() {\n  // we override the snippets init function to handle the case where a\n  // user initializes the posthog library after the script loads & runs\n  posthog_master['init'] = function (token, config, name) {\n    if (name) {\n      // initialize a sub library\n      if (!posthog_master[name]) {\n        posthog_master[name] = instances[name] = create_mplib(token, config, name);\n\n        posthog_master[name]._loaded();\n      }\n\n      return posthog_master[name];\n    } else {\n      var instance = posthog_master;\n\n      if (instances[PRIMARY_INSTANCE_NAME]) {\n        // main posthog lib already initialized\n        instance = instances[PRIMARY_INSTANCE_NAME];\n      } else if (token) {\n        // intialize the main posthog lib\n        instance = create_mplib(token, config, PRIMARY_INSTANCE_NAME);\n\n        instance._loaded();\n\n        instances[PRIMARY_INSTANCE_NAME] = instance;\n      }\n\n      posthog_master = instance;\n\n      if (init_type === INIT_SNIPPET) {\n        win[PRIMARY_INSTANCE_NAME] = posthog_master;\n      }\n\n      extend_mp();\n    }\n  };\n};\n\nvar add_dom_loaded_handler = function add_dom_loaded_handler() {\n  // Cross browser DOM Loaded support\n  function dom_loaded_handler() {\n    // function flag since we only want to execute this once\n    if (dom_loaded_handler.done) {\n      return;\n    }\n\n    dom_loaded_handler.done = true;\n    ENQUEUE_REQUESTS = false;\n\n    _.each(instances, function (inst) {\n      inst._dom_loaded();\n    });\n  }\n\n  function do_scroll_check() {\n    try {\n      document$1.documentElement.doScroll('left');\n    } catch (e) {\n      setTimeout(do_scroll_check, 1);\n      return;\n    }\n\n    dom_loaded_handler();\n  }\n\n  if (document$1.addEventListener) {\n    if (document$1.readyState === 'complete') {\n      // safari 4 can fire the DOMContentLoaded event before loading all\n      // external JS (including this file). you will see some copypasta\n      // on the internet that checks for 'complete' and 'loaded', but\n      // 'loaded' is an IE thing\n      dom_loaded_handler();\n    } else {\n      document$1.addEventListener('DOMContentLoaded', dom_loaded_handler, false);\n    }\n  } else if (document$1.attachEvent) {\n    // IE\n    document$1.attachEvent('onreadystatechange', dom_loaded_handler); // check to make sure we arn't in a frame\n\n    var toplevel = false;\n\n    try {\n      toplevel = win.frameElement === null;\n    } catch (e) {// noop\n    }\n\n    if (document$1.documentElement.doScroll && toplevel) {\n      do_scroll_check();\n    }\n  } // fallback handler, always will work\n\n\n  _.register_event(win, 'load', dom_loaded_handler, true);\n};\nfunction init_as_module() {\n  init_type = INIT_MODULE;\n  posthog_master = new PostHogLib();\n  override_ph_init_func();\n  posthog_master['init']();\n  add_dom_loaded_handler();\n  return posthog_master;\n}\n\n/* eslint camelcase: \"off\" */\nvar posthog = init_as_module();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (posthog);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/posthog-js/dist/es.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ (function(module) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\nvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_ASYNC_MODE_TYPE:\n          case REACT_CONCURRENT_MODE_TYPE:\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n} // AsyncMode is deprecated along with isAsyncMode\n\nvar AsyncMode = REACT_ASYNC_MODE_TYPE;\nvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n    }\n  }\n\n  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n}\nfunction isConcurrentMode(object) {\n  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.AsyncMode = AsyncMode;\nexports.ConcurrentMode = ConcurrentMode;\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-is/cjs/react-is.development.js\n");

/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"./node_modules/react-is/cjs/react-is.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzPzRjZWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDO0FBQ0QsRUFBRSxnSUFBeUQ7QUFDM0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-is/index.js\n");

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v17.0.2\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar _assign = __webpack_require__(/*! object-assign */ \"./node_modules/next/dist/build/polyfills/object-assign.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = 0xeac7;\nvar REACT_PORTAL_TYPE = 0xeaca;\nexports.Fragment = 0xeacb;\nvar REACT_STRICT_MODE_TYPE = 0xeacc;\nvar REACT_PROFILER_TYPE = 0xead2;\nvar REACT_PROVIDER_TYPE = 0xeacd;\nvar REACT_CONTEXT_TYPE = 0xeace;\nvar REACT_FORWARD_REF_TYPE = 0xead0;\nvar REACT_SUSPENSE_TYPE = 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = 0xead8;\nvar REACT_MEMO_TYPE = 0xead3;\nvar REACT_LAZY_TYPE = 0xead4;\nvar REACT_BLOCK_TYPE = 0xead9;\nvar REACT_SERVER_BLOCK_TYPE = 0xeada;\nvar REACT_FUNDAMENTAL_TYPE = 0xead5;\nvar REACT_SCOPE_TYPE = 0xead7;\nvar REACT_OPAQUE_ID_TYPE = 0xeae0;\nvar REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nvar REACT_OFFSCREEN_TYPE = 0xeae2;\nvar REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  exports.Fragment = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    var argsWithFormat = args.map(function (item) {\n      return '' + item;\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case exports.Fragment:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentName(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: _assign({}, props, {\n          value: prevLog\n        }),\n        info: _assign({}, props, {\n          value: prevInfo\n        }),\n        warn: _assign({}, props, {\n          value: prevWarn\n        }),\n        error: _assign({}, props, {\n          value: prevError\n        }),\n        group: _assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: _assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: _assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentName(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentName(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (Array.isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentName(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentName(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (Array.isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (Array.isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (type === exports.Fragment) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV$1 =  jsxWithValidation ;\n\nexports.jsxDEV = jsxDEV$1;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-dev-runtime.development.js\n");

/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz85MjBlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQztBQUNELEVBQUUsdUpBQXNFO0FBQ3hFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-dev-runtime.js\n");

/***/ }),

/***/ "./node_modules/shallowequal/index.js":
/*!********************************************!*\
  !*** ./node_modules/shallowequal/index.js ***!
  \********************************************/
/***/ (function(module) {

eval("//\n\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || !objA || typeof objB !== \"object\" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  // Test for A's keys different from B.\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || (ret === void 0 && valueA !== valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3NoYWxsb3dlcXVhbC9pbmRleC5qcz8xYjJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhbGxvd2VxdWFsL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/shallowequal/index.js\n");

/***/ }),

/***/ "./node_modules/styled-components/dist/styled-components.browser.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/styled-components/dist/styled-components.browser.esm.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ServerStyleSheet\": function() { return /* binding */ Ue; },\n/* harmony export */   \"StyleSheetConsumer\": function() { return /* binding */ le; },\n/* harmony export */   \"StyleSheetContext\": function() { return /* binding */ ue; },\n/* harmony export */   \"StyleSheetManager\": function() { return /* binding */ ye; },\n/* harmony export */   \"ThemeConsumer\": function() { return /* binding */ Le; },\n/* harmony export */   \"ThemeContext\": function() { return /* binding */ ze; },\n/* harmony export */   \"ThemeProvider\": function() { return /* binding */ Ge; },\n/* harmony export */   \"__PRIVATE__\": function() { return /* binding */ Ze; },\n/* harmony export */   \"createGlobalStyle\": function() { return /* binding */ $e; },\n/* harmony export */   \"css\": function() { return /* binding */ Ae; },\n/* harmony export */   \"isStyledComponent\": function() { return /* binding */ N; },\n/* harmony export */   \"keyframes\": function() { return /* binding */ We; },\n/* harmony export */   \"useTheme\": function() { return /* binding */ Xe; },\n/* harmony export */   \"version\": function() { return /* binding */ C; },\n/* harmony export */   \"withTheme\": function() { return /* binding */ Je; }\n/* harmony export */ });\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\");\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shallowequal */ \"./node_modules/shallowequal/index.js\");\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(shallowequal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/stylis */ \"./node_modules/@emotion/stylis/dist/stylis.browser.esm.js\");\n/* harmony import */ var _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/unitless */ \"./node_modules/@emotion/unitless/dist/unitless.browser.esm.js\");\n/* harmony import */ var _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/is-prop-valid */ \"./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! hoist-non-react-statics */ \"./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\nfunction v(){return(v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var g=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},S=function(t){return null!==t&&\"object\"==typeof t&&\"[object Object]\"===(t.toString?t.toString():Object.prototype.toString.call(t))&&!(0,react_is__WEBPACK_IMPORTED_MODULE_0__.typeOf)(t)},w=Object.freeze([]),E=Object.freeze({});function b(e){return\"function\"==typeof e}function _(e){return true&&\"string\"==typeof e&&e||e.displayName||e.name||\"Component\"}function N(e){return e&&\"string\"==typeof e.styledComponentId}var A=\"undefined\"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||\"data-styled\",C=\"5.3.0\",I=\"undefined\"!=typeof window&&\"HTMLElement\"in window,P=Boolean(\"boolean\"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:\"undefined\"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&\"\"!==process.env.REACT_APP_SC_DISABLE_SPEEDY?\"false\"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:\"undefined\"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&\"\"!==process.env.SC_DISABLE_SPEEDY?\"false\"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY:\"production\"!==\"development\"),O={},R= true?{1:\"Cannot create styled-component for component: %s.\\n\\n\",2:\"Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\\n\\n- Are you trying to reuse it across renders?\\n- Are you accidentally calling collectStyles twice?\\n\\n\",3:\"Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\\n\\n\",4:\"The `StyleSheetManager` expects a valid target or sheet prop!\\n\\n- Does this error occur on the client and is your target falsy?\\n- Does this error occur on the server and is the sheet falsy?\\n\\n\",5:\"The clone method cannot be used on the client!\\n\\n- Are you running in a client-like environment on the server?\\n- Are you trying to run SSR on the client?\\n\\n\",6:\"Trying to insert a new style tag, but the given Node is unmounted!\\n\\n- Are you using a custom target that isn't mounted?\\n- Does your document not have a valid head element?\\n- Have you accidentally removed a style tag manually?\\n\\n\",7:'ThemeProvider: Please return an object from your \"theme\" prop function, e.g.\\n\\n```js\\ntheme={() => ({})}\\n```\\n\\n',8:'ThemeProvider: Please make your \"theme\" prop an object.\\n\\n',9:\"Missing document `<head>`\\n\\n\",10:\"Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\\n\\n\",11:\"_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\\n\\n\",12:\"It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\\\`\\\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\\n\\n\",13:\"%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\\n\\n\",14:'ThemeProvider: \"theme\" prop is required.\\n\\n',15:\"A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\\n\\n```js\\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\\n```\\n\\n\",16:\"Reached the limit of how many styled components may be created at group %s.\\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\\nas for instance in your render method then you may be running into this limitation.\\n\\n\",17:\"CSSStyleSheet could not be found on HTMLStyleElement.\\nHas styled-components' style tag been unmounted or altered by another script?\\n\"}:0;function D(){for(var e=arguments.length<=0?void 0:arguments[0],t=[],n=1,r=arguments.length;n<r;n+=1)t.push(n<0||arguments.length<=n?void 0:arguments[n]);return t.forEach((function(t){e=e.replace(/%[a-z]/,t)})),e}function j(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw false?0:new Error(D.apply(void 0,[R[e]].concat(n)).trim())}var T=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&j(16,\"\"+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var i=r;i<o;i++)this.groupSizes[i]=0}for(var s=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(s,t[a])&&(this.groupSizes[e]++,s++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t=\"\";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,i=r;i<o;i++)t+=this.tag.getRule(i)+\"/*!sc*/\\n\";return t},e}(),k=new Map,x=new Map,V=1,B=function(e){if(k.has(e))return k.get(e);for(;x.has(V);)V++;var t=V++;return true&&((0|t)<0||t>1<<30)&&j(16,\"\"+t),k.set(e,t),x.set(t,e),t},M=function(e){return x.get(e)},z=function(e,t){k.set(e,t),x.set(t,e)},L=\"style[\"+A+'][data-styled-version=\"5.3.0\"]',G=new RegExp(\"^\"+A+'\\\\.g(\\\\d+)\\\\[id=\"([\\\\w\\\\d-]+)\"\\\\].*?\"([^\"]*)'),F=function(e,t,n){for(var r,o=n.split(\",\"),i=0,s=o.length;i<s;i++)(r=o[i])&&e.registerName(t,r)},Y=function(e,t){for(var n=t.innerHTML.split(\"/*!sc*/\\n\"),r=[],o=0,i=n.length;o<i;o++){var s=n[o].trim();if(s){var a=s.match(G);if(a){var c=0|parseInt(a[1],10),u=a[2];0!==c&&(z(u,c),F(e,u,a[3]),e.getTag().insertRules(c,r)),r.length=0}else r.push(s)}}},q=function(){return\"undefined\"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},H=function(e){var t=document.head,n=e||t,r=document.createElement(\"style\"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(A))return r}}(n),i=void 0!==o?o.nextSibling:null;r.setAttribute(A,\"active\"),r.setAttribute(\"data-styled-version\",\"5.3.0\");var s=q();return s&&r.setAttribute(\"nonce\",s),n.insertBefore(r,i),r},$=function(){function e(e){var t=this.element=H(e);t.appendChild(document.createTextNode(\"\")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}j(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&\"string\"==typeof t.cssText?t.cssText:\"\"},e}(),W=function(){function e(e){var t=this.element=H(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:\"\"},e}(),U=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:\"\"},e}(),J=I,X={isServer:!I,useCSSOMInjection:!P},Z=function(){function e(e,t,n){void 0===e&&(e=E),void 0===t&&(t={}),this.options=v({},X,{},e),this.gs=t,this.names=new Map(n),!this.options.isServer&&I&&J&&(J=!1,function(e){for(var t=document.querySelectorAll(L),n=0,r=t.length;n<r;n++){var o=t[n];o&&\"active\"!==o.getAttribute(A)&&(Y(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return B(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(v({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new U(o):r?new $(o):new W(o),new T(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(B(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(B(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(B(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r=\"\",o=0;o<n;o++){var i=M(o);if(void 0!==i){var s=e.names.get(i),a=t.getGroup(o);if(void 0!==s&&0!==a.length){var c=A+\".g\"+o+'[id=\"'+i+'\"]',u=\"\";void 0!==s&&s.forEach((function(e){e.length>0&&(u+=e+\",\")})),r+=\"\"+a+c+'{content:\"'+u+'\"}/*!sc*/\\n'}}}return r}(this)},e}(),K=/(a)(d)/gi,Q=function(e){return String.fromCharCode(e+(e>25?39:97))};function ee(e){var t,n=\"\";for(t=Math.abs(e);t>52;t=t/52|0)n=Q(t%52)+n;return(Q(t%52)+n).replace(K,\"$1-$2\")}var te=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},ne=function(e){return te(5381,e)};function re(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(b(n)&&!N(n))return!1}return!0}var oe=ne(\"5.3.0\"),ie=function(){function e(e,t,n){this.rules=e,this.staticRulesId=\"\",this.isStatic= false&&0,this.componentId=t,this.baseHash=te(oe,t),this.baseStyle=n,Z.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var i=Ne(this.rules,e,t,n).join(\"\"),s=ee(te(this.baseHash,i.length)>>>0);if(!t.hasNameForId(r,s)){var a=n(i,\".\"+s,void 0,r);t.insertRules(r,s,a)}o.push(s),this.staticRulesId=s}else{for(var c=this.rules.length,u=te(this.baseHash,n.hash),l=\"\",d=0;d<c;d++){var h=this.rules[d];if(\"string\"==typeof h)l+=h, true&&(u=te(u,h+d));else if(h){var p=Ne(h,e,t,n),f=Array.isArray(p)?p.join(\"\"):p;u=te(u,f+d),l+=f}}if(l){var m=ee(u>>>0);if(!t.hasNameForId(r,m)){var y=n(l,\".\"+m,void 0,r);t.insertRules(r,m,y)}o.push(m)}}return o.join(\" \")},e}(),se=/^\\s*\\/\\/.*$/gm,ae=[\":\",\"[\",\".\",\"#\"];function ce(e){var t,n,r,o,i=void 0===e?E:e,s=i.options,a=void 0===s?E:s,c=i.plugins,u=void 0===c?w:c,l=new _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__.default(a),d=[],h=function(e){function t(t){if(t)try{e(t+\"}\")}catch(e){}}return function(n,r,o,i,s,a,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+\";\"),\"\";break;case 2:if(0===u)return r+\"/*|*/\";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),\"\";default:return r+(0===d?\"/*|*/\":\"\")}case-2:r.split(\"/*|*/}\").forEach(t)}}}((function(e){d.push(e)})),f=function(e,r,i){return 0===r&&-1!==ae.indexOf(i[n.length])||i.match(o)?e:\".\"+t};function m(e,i,s,a){void 0===a&&(a=\"&\");var c=e.replace(se,\"\"),u=i&&s?s+\" \"+i+\" { \"+c+\" }\":c;return t=a,n=i,r=new RegExp(\"\\\\\"+n+\"\\\\b\",\"g\"),o=new RegExp(\"(\\\\\"+n+\"\\\\b){2,}\"),l(s||!i?\"\":i,u)}return l.use([].concat(u,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,f))},h,function(e){if(-2===e){var t=d;return d=[],t}}])),m.hash=u.length?u.reduce((function(e,t){return t.name||j(15),te(e,t.name)}),5381).toString():\"\",m}var ue=react__WEBPACK_IMPORTED_MODULE_1___default().createContext(),le=ue.Consumer,de=react__WEBPACK_IMPORTED_MODULE_1___default().createContext(),he=(de.Consumer,new Z),pe=ce();function fe(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ue)||he}function me(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(de)||pe}function ye(e){var t=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(e.stylisPlugins),n=t[0],i=t[1],c=fe(),u=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){var t=c;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){return ce({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)((function(){shallowequal__WEBPACK_IMPORTED_MODULE_2___default()(n,e.stylisPlugins)||i(e.stylisPlugins)}),[e.stylisPlugins]),react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ue.Provider,{value:u},react__WEBPACK_IMPORTED_MODULE_1___default().createElement(de.Provider,{value:l}, true?react__WEBPACK_IMPORTED_MODULE_1___default().Children.only(e.children):0))}var ve=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=pe);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,\"@keyframes\"))},this.toString=function(){return j(12,String(n.name))},this.name=e,this.id=\"sc-keyframes-\"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=pe),this.name+e.hash},e}(),ge=/([A-Z])/,Se=/([A-Z])/g,we=/^ms-/,Ee=function(e){return\"-\"+e.toLowerCase()};function be(e){return ge.test(e)?e.replace(Se,Ee).replace(we,\"-ms-\"):e}var _e=function(e){return null==e||!1===e||\"\"===e};function Ne(e,n,r,o){if(Array.isArray(e)){for(var i,s=[],a=0,c=e.length;a<c;a+=1)\"\"!==(i=Ne(e[a],n,r,o))&&(Array.isArray(i)?s.push.apply(s,i):s.push(i));return s}if(_e(e))return\"\";if(N(e))return\".\"+e.styledComponentId;if(b(e)){if(\"function\"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!n)return e;var u=e(n);return true&&(0,react_is__WEBPACK_IMPORTED_MODULE_0__.isElement)(u)&&console.warn(_(e)+\" is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\"),Ne(u,n,r,o)}var l;return e instanceof ve?r?(e.inject(r,o),e.getName(o)):e:S(e)?function e(t,n){var r,o,i=[];for(var s in t)t.hasOwnProperty(s)&&!_e(t[s])&&(S(t[s])?i.push.apply(i,e(t[s],s)):b(t[s])?i.push(be(s)+\":\",t[s],\";\"):i.push(be(s)+\": \"+(r=s,null==(o=t[s])||\"boolean\"==typeof o||\"\"===o?\"\":\"number\"!=typeof o||0===o||r in _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__.default?String(o).trim():o+\"px\")+\";\"));return n?[n+\" {\"].concat(i,[\"}\"]):i}(e):e.toString()}function Ae(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return b(e)||S(e)?Ne(g(w,[e].concat(n))):0===n.length&&1===e.length&&\"string\"==typeof e[0]?e:Ne(g(e,n))}var Ce=/invalid hook call/i,Ie=new Set,Pe=function(e,t){if(true){var n=\"The component \"+e+(t?' with the id of \"'+t+'\"':\"\")+\" has been created dynamically.\\nYou may see this warning because you've called styled inside another component.\\nTo resolve this only create new StyledComponents outside of any render method and function component.\";try{(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(),Ie.has(n)||(console.warn(n),Ie.add(n))}catch(e){Ce.test(e.message)&&Ie.delete(n)}}},Oe=function(e,t,n){return void 0===n&&(n=E),e.theme!==n.theme&&e.theme||t||n.theme},Re=/[!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~-]+/g,De=/(^-|-$)/g;function je(e){return e.replace(Re,\"-\").replace(De,\"\")}var Te=function(e){return ee(ne(e)>>>0)};function ke(e){return\"string\"==typeof e&&( false||e.charAt(0)===e.charAt(0).toLowerCase())}var xe=function(e){return\"function\"==typeof e||\"object\"==typeof e&&null!==e&&!Array.isArray(e)},Ve=function(e){return\"__proto__\"!==e&&\"constructor\"!==e&&\"prototype\"!==e};function Be(e,t,n){var r=e[n];xe(t)&&xe(r)?Me(r,t):e[n]=t}function Me(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,i=n;o<i.length;o++){var s=i[o];if(xe(s))for(var a in s)Ve(a)&&Be(e,s[a],a)}return e}var ze=react__WEBPACK_IMPORTED_MODULE_1___default().createContext(),Le=ze.Consumer;function Ge(e){var t=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ze),n=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){return function(e,t){if(!e)return j(14);if(b(e)){var n=e(t);return false||null!==n&&!Array.isArray(n)&&\"object\"==typeof n?n:j(7)}return Array.isArray(e)||\"object\"!=typeof e?j(8):t?v({},t,{},e):e}(e.theme,t)}),[e.theme,t]);return e.children?react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ze.Provider,{value:n},e.children):null}var Fe={};function Ye(e,t,n){var o=N(e),s=!ke(e),a=t.attrs,c=void 0===a?w:a,d=t.componentId,h=void 0===d?function(e,t){var n=\"string\"!=typeof e?\"sc\":je(e);Fe[n]=(Fe[n]||0)+1;var r=n+\"-\"+Te(\"5.3.0\"+n+Fe[n]);return t?t+\"-\"+r:r}(t.displayName,t.parentComponentId):d,p=t.displayName,f=void 0===p?function(e){return ke(e)?\"styled.\"+e:\"Styled(\"+_(e)+\")\"}(e):p,g=t.displayName&&t.componentId?je(t.displayName)+\"-\"+t.componentId:t.componentId||h,S=o&&e.attrs?Array.prototype.concat(e.attrs,c).filter(Boolean):c,A=t.shouldForwardProp;o&&e.shouldForwardProp&&(A=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var C,I=new ie(n,g,o?e.componentStyle:void 0),P=I.isStatic&&0===c.length,O=function(e,t){return function(e,t,n,r){var o=e.attrs,s=e.componentStyle,a=e.defaultProps,c=e.foldedComponentIds,d=e.shouldForwardProp,h=e.styledComponentId,p=e.target; true&&(0,react__WEBPACK_IMPORTED_MODULE_1__.useDebugValue)(h);var f=function(e,t,n){void 0===e&&(e=E);var r=v({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,i,s=e;for(t in b(s)&&(s=s(r)),s)r[t]=o[t]=\"className\"===t?(n=o[t],i=s[t],n&&i?n+\" \"+i:n||i):s[t]})),[r,o]}(Oe(t,(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ze),a)||E,t,o),y=f[0],g=f[1],S=function(e,t,n,r){var o=fe(),i=me(),s=t?e.generateAndInjectStyles(E,o,i):e.generateAndInjectStyles(n,o,i);return true&&(0,react__WEBPACK_IMPORTED_MODULE_1__.useDebugValue)(s), true&&!t&&r&&r(s),s}(s,r,y, true?e.warnTooManyClasses:0),w=n,_=g.$as||t.$as||g.as||t.as||p,N=ke(_),A=g!==t?v({},t,{},g):t,C={};for(var I in A)\"$\"!==I[0]&&\"as\"!==I&&(\"forwardedAs\"===I?C.as=A[I]:(d?d(I,_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__.default,_):!N||(0,_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__.default)(I))&&(C[I]=A[I]));return t.style&&g.style!==t.style&&(C.style=v({},t.style,{},g.style)),C.className=Array.prototype.concat(c,h,S!==h?S:null,t.className,g.className).filter(Boolean).join(\" \"),C.ref=w,(0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(_,C)}(C,e,t,P)};return O.displayName=f,(C=react__WEBPACK_IMPORTED_MODULE_1___default().forwardRef(O)).attrs=S,C.componentStyle=I,C.displayName=f,C.shouldForwardProp=A,C.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):w,C.styledComponentId=g,C.target=o?e.target:e,C.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,[\"componentId\"]),i=r&&r+\"-\"+(ke(e)?e:je(_(e)));return Ye(e,v({},o,{attrs:S,componentId:i}),n)},Object.defineProperty(C,\"defaultProps\",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Me({},e.defaultProps,t):t}}), true&&(Pe(f,g),C.warnTooManyClasses=function(e,t){var n={},r=!1;return function(o){if(!r&&(n[o]=!0,Object.keys(n).length>=200)){var i=t?' with the id of \"'+t+'\"':\"\";console.warn(\"Over 200 classes were generated for component \"+e+i+\".\\nConsider using the attrs method, together with a style object for frequently changed styles.\\nExample:\\n  const Component = styled.div.attrs(props => ({\\n    style: {\\n      background: props.background,\\n    },\\n  }))`width: 100%;`\\n\\n  <Component />\"),r=!0,n={}}}}(f,g)),C.toString=function(){return\".\"+C.styledComponentId},s&&hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(C,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),C}var qe=function(e){return function e(t,r,o){if(void 0===o&&(o=E),!(0,react_is__WEBPACK_IMPORTED_MODULE_0__.isValidElementType)(r))return j(1,String(r));var i=function(){return t(r,o,Ae.apply(void 0,arguments))};return i.withConfig=function(n){return e(t,r,v({},o,{},n))},i.attrs=function(n){return e(t,r,v({},o,{attrs:Array.prototype.concat(o.attrs,n).filter(Boolean)}))},i}(Ye,e)};[\"a\",\"abbr\",\"address\",\"area\",\"article\",\"aside\",\"audio\",\"b\",\"base\",\"bdi\",\"bdo\",\"big\",\"blockquote\",\"body\",\"br\",\"button\",\"canvas\",\"caption\",\"cite\",\"code\",\"col\",\"colgroup\",\"data\",\"datalist\",\"dd\",\"del\",\"details\",\"dfn\",\"dialog\",\"div\",\"dl\",\"dt\",\"em\",\"embed\",\"fieldset\",\"figcaption\",\"figure\",\"footer\",\"form\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"head\",\"header\",\"hgroup\",\"hr\",\"html\",\"i\",\"iframe\",\"img\",\"input\",\"ins\",\"kbd\",\"keygen\",\"label\",\"legend\",\"li\",\"link\",\"main\",\"map\",\"mark\",\"marquee\",\"menu\",\"menuitem\",\"meta\",\"meter\",\"nav\",\"noscript\",\"object\",\"ol\",\"optgroup\",\"option\",\"output\",\"p\",\"param\",\"picture\",\"pre\",\"progress\",\"q\",\"rp\",\"rt\",\"ruby\",\"s\",\"samp\",\"script\",\"section\",\"select\",\"small\",\"source\",\"span\",\"strong\",\"style\",\"sub\",\"summary\",\"sup\",\"table\",\"tbody\",\"td\",\"textarea\",\"tfoot\",\"th\",\"thead\",\"time\",\"title\",\"tr\",\"track\",\"u\",\"ul\",\"var\",\"video\",\"wbr\",\"circle\",\"clipPath\",\"defs\",\"ellipse\",\"foreignObject\",\"g\",\"image\",\"line\",\"linearGradient\",\"marker\",\"mask\",\"path\",\"pattern\",\"polygon\",\"polyline\",\"radialGradient\",\"rect\",\"stop\",\"svg\",\"text\",\"textPath\",\"tspan\"].forEach((function(e){qe[e]=qe(e)}));var He=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=re(e),Z.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Ne(this.rules,t,n,r).join(\"\"),\"\"),i=this.componentId+e;n.insertRules(i,i,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&Z.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();function $e(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];var s=Ae.apply(void 0,[e].concat(n)),a=\"sc-global-\"+Te(JSON.stringify(s)),u=new He(s,a);function l(e){var t=fe(),n=me(),o=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ze),l=(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(t.allocateGSInstance(a)).current;return true&&react__WEBPACK_IMPORTED_MODULE_1___default().Children.count(e.children)&&console.warn(\"The global style component \"+a+\" was given child JSX. createGlobalStyle does not render children.\"), true&&s.some((function(e){return\"string\"==typeof e&&-1!==e.indexOf(\"@import\")}))&&console.warn(\"Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app.\"),(0,react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)((function(){return h(l,e,t,o,n),function(){return u.removeStyles(l,t)}}),[l,e,t,o,n]),null}function h(e,t,n,r,o){if(u.isStatic)u.renderStyles(e,O,n,o);else{var i=v({},t,{theme:Oe(t,r,l.defaultProps)});u.renderStyles(e,i,n,o)}}return true&&Pe(a),react__WEBPACK_IMPORTED_MODULE_1___default().memo(l)}function We(e){ true&&\"undefined\"!=typeof navigator&&\"ReactNative\"===navigator.product&&console.warn(\"`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.\");for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Ae.apply(void 0,[e].concat(n)).join(\"\"),i=Te(o);return new ve(i,o)}var Ue=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString(),n=q();return\"<style \"+[n&&'nonce=\"'+n+'\"',A+'=\"true\"','data-styled-version=\"5.3.0\"'].filter(Boolean).join(\" \")+\">\"+t+\"</style>\"},this.getStyleTags=function(){return e.sealed?j(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return j(2);var n=((t={})[A]=\"\",t[\"data-styled-version\"]=\"5.3.0\",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),o=q();return o&&(n.nonce=o),[react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"style\",v({},n,{key:\"sc-0-0\"}))]},this.seal=function(){e.sealed=!0},this.instance=new Z({isServer:!0}),this.sealed=!1}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?j(2):react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ye,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return j(3)},e}(),Je=function(e){var t=react__WEBPACK_IMPORTED_MODULE_1___default().forwardRef((function(t,n){var o=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ze),s=e.defaultProps,a=Oe(t,o,s);return true&&void 0===a&&console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class \"'+_(e)+'\"'),react__WEBPACK_IMPORTED_MODULE_1___default().createElement(e,v({},t,{theme:a,ref:n}))}));return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(t,e),t.displayName=\"WithTheme(\"+_(e)+\")\",t},Xe=function(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ze)},Ze={StyleSheet:Z,masterSheet:he}; true&&\"undefined\"!=typeof navigator&&\"ReactNative\"===navigator.product&&console.warn(\"It looks like you've imported 'styled-components' on React Native.\\nPerhaps you're looking to import 'styled-components/native'?\\nRead more about this at https://www.styled-components.com/docs/basics#react-native\"), true&&(window[\"__styled-components-init__\"]=window[\"__styled-components-init__\"]||0,1===window[\"__styled-components-init__\"]&&console.warn(\"It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\\n\\nSee https://s-c.sh/2BAXzed for more info.\"),window[\"__styled-components-init__\"]+=1);/* harmony default export */ __webpack_exports__[\"default\"] = (qe);\n//# sourceMappingURL=styled-components.browser.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/styled-components/dist/styled-components.browser.esm.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ // runtime can't be in strict mode because a global variable is assign and maybe created.
/******/ 
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app.tsx!"), __webpack_exec__("./node_modules/next/dist/client/router.js"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);